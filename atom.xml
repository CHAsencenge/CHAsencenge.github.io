<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>解字</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-25T18:25:44.757Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CHAsencenge</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>push-to-git</title>
    <link href="http://yoursite.com/2019/11/20/push-to-git/"/>
    <id>http://yoursite.com/2019/11/20/push-to-git/</id>
    <published>2019-11-20T15:02:36.000Z</published>
    <updated>2019-11-25T18:25:44.757Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">push update to github repo</blockquote><h3 id="for-first-use"><a href="#for-first-use" class="headerlink" title="for first use"></a>for first use</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">```  ***init .git***</span><br><span class="line"></span><br><span class="line">``` git status ```  [^check files to be added to the local repository]</span><br><span class="line"></span><br><span class="line">``` git add xxx ``` [^add files to repo]</span><br><span class="line"></span><br><span class="line">``` git commit -m &quot;commit description&quot; ``` [^commit to repo]</span><br><span class="line"></span><br><span class="line">``` git remote add origin git@github.com:mobinets/hyblora.git ``` [^link local repo to github]</span><br><span class="line"></span><br><span class="line">``` git pull --rebase origin master ``` [^pull = fetch + merge]</span><br><span class="line"></span><br><span class="line">``` git push -u origin master ``` [^upload]</span><br><span class="line"></span><br><span class="line">### not first use repo</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line">git add xxx</span><br><span class="line">git commit -m &quot;commit discription&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote class=&quot;blockquote-center&quot;&gt;push update to github repo
&lt;/blockquote&gt;

&lt;h3 id=&quot;for-first-use&quot;&gt;&lt;a href=&quot;#for-first-use&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="command" scheme="http://yoursite.com/categories/command/"/>
    
    
  </entry>
  
  <entry>
    <title>双十一有一说一</title>
    <link href="http://yoursite.com/2019/11/11/%E5%8F%8C%E5%8D%81%E4%B8%80%E6%9C%89%E4%B8%80%E8%AF%B4%E4%B8%80/"/>
    <id>http://yoursite.com/2019/11/11/双十一有一说一/</id>
    <published>2019-11-11T04:16:55.000Z</published>
    <updated>2019-11-11T04:46:14.441Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="writing" scheme="http://yoursite.com/categories/writing/"/>
    
    
  </entry>
  
  <entry>
    <title>partical filter</title>
    <link href="http://yoursite.com/2019/09/23/partical-filter/"/>
    <id>http://yoursite.com/2019/09/23/partical-filter/</id>
    <published>2019-09-23T05:36:58.000Z</published>
    <updated>2019-10-23T12:36:37.284Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy <span class="keyword">as</span> scipy</span><br><span class="line"><span class="keyword">from</span> numpy.random <span class="keyword">import</span> uniform</span><br><span class="line"><span class="keyword">import</span> scipy.stats</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">np.set_printoptions(threshold=<span class="number">3</span>)</span><br><span class="line">np.set_printoptions(suppress=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawLines</span><span class="params">(img, points, r, g, b)</span>:</span></span><br><span class="line">    cv2.polylines(img, [np.int32(points)], isClosed=<span class="literal">False</span>, color=(r, g, b))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawCross</span><span class="params">(img, center, r, g, b)</span>:</span></span><br><span class="line">    d = <span class="number">5</span></span><br><span class="line">    t = <span class="number">2</span></span><br><span class="line">    LINE_AA = cv2.LINE_AA <span class="keyword">if</span> cv2.__version__[<span class="number">0</span>] == <span class="string">'3'</span> <span class="keyword">else</span> cv2.CV_AA</span><br><span class="line">    color = (r, g, b)</span><br><span class="line">    ctrx = center[<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    ctry = center[<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">    cv2.line(img, (ctrx - d, ctry - d), (ctrx + d, ctry + d), color, t, LINE_AA)</span><br><span class="line">    cv2.line(img, (ctrx + d, ctry - d), (ctrx - d, ctry + d), color, t, LINE_AA)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mouseCallback</span><span class="params">(event, x, y, flags,null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> center</span><br><span class="line">    <span class="keyword">global</span> trajectory</span><br><span class="line">    <span class="keyword">global</span> previous_x</span><br><span class="line">    <span class="keyword">global</span> previous_y</span><br><span class="line">    <span class="keyword">global</span> zs</span><br><span class="line">    </span><br><span class="line">    center=np.array([[x,y]])</span><br><span class="line">    trajectory=np.vstack((trajectory,np.array([x,y])))</span><br><span class="line">    <span class="comment">#noise=sensorSigma * np.random.randn(1,2) + sensorMu</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> previous_x &gt;<span class="number">0</span>:</span><br><span class="line">        heading=np.arctan2(np.array([y-previous_y]), np.array([previous_x-x ]))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> heading&gt;<span class="number">0</span>:</span><br><span class="line">            heading=-(heading-np.pi)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            heading=-(np.pi+heading)</span><br><span class="line">            </span><br><span class="line">        distance=np.linalg.norm(np.array([[previous_x,previous_y]])-np.array([[x,y]]) ,axis=<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        std=np.array([<span class="number">2</span>,<span class="number">4</span>])</span><br><span class="line">        u=np.array([heading,distance])</span><br><span class="line">        predict(particles, u, std, dt=<span class="number">1.</span>)</span><br><span class="line">        zs = (np.linalg.norm(landmarks - center, axis=<span class="number">1</span>) + (np.random.randn(NL) * sensor_std_err))</span><br><span class="line">        update(particles, weights, z=zs, R=<span class="number">50</span>, landmarks=landmarks)</span><br><span class="line">        </span><br><span class="line">        indexes = systematic_resample(weights)</span><br><span class="line">        resample_from_index(particles, weights, indexes)</span><br><span class="line"></span><br><span class="line">    previous_x=x</span><br><span class="line">    previous_y=y</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WIDTH=<span class="number">800</span></span><br><span class="line">HEIGHT=<span class="number">600</span></span><br><span class="line">WINDOW_NAME=<span class="string">"Particle Filter"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sensorMu=0</span></span><br><span class="line"><span class="comment">#sensorSigma=3</span></span><br><span class="line"></span><br><span class="line">sensor_std_err=<span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_uniform_particles</span><span class="params">(x_range, y_range, N)</span>:</span></span><br><span class="line">    particles = np.empty((N, <span class="number">2</span>))</span><br><span class="line">    particles[:, <span class="number">0</span>] = uniform(x_range[<span class="number">0</span>], x_range[<span class="number">1</span>], size=N)</span><br><span class="line">    particles[:, <span class="number">1</span>] = uniform(y_range[<span class="number">0</span>], y_range[<span class="number">1</span>], size=N)</span><br><span class="line">    <span class="keyword">return</span> particles</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(particles, u, std, dt=<span class="number">1.</span>)</span>:</span></span><br><span class="line">    N = len(particles)</span><br><span class="line">    dist = (u[<span class="number">1</span>] * dt) + (np.random.randn(N) * std[<span class="number">1</span>])</span><br><span class="line">    particles[:, <span class="number">0</span>] += np.cos(u[<span class="number">0</span>]) * dist</span><br><span class="line">    particles[:, <span class="number">1</span>] += np.sin(u[<span class="number">0</span>]) * dist</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(particles, weights, z, R, landmarks)</span>:</span></span><br><span class="line">    weights.fill(<span class="number">1.</span>)</span><br><span class="line">    <span class="keyword">for</span> i, landmark <span class="keyword">in</span> enumerate(landmarks):</span><br><span class="line">       </span><br><span class="line">        distance=np.power((particles[:,<span class="number">0</span>] - landmark[<span class="number">0</span>])**<span class="number">2</span> +(particles[:,<span class="number">1</span>] - landmark[<span class="number">1</span>])**<span class="number">2</span>,<span class="number">0.5</span>)</span><br><span class="line">        weights *= scipy.stats.norm(distance, R).pdf(z[i])</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    weights += <span class="number">1.e-300</span> <span class="comment"># avoid round-off to zero</span></span><br><span class="line">    weights /= sum(weights)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">neff</span><span class="params">(weights)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.</span> / np.sum(np.square(weights))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">systematic_resample</span><span class="params">(weights)</span>:</span></span><br><span class="line">    N = len(weights)</span><br><span class="line">    positions = (np.arange(N) + np.random.random()) / N</span><br><span class="line"></span><br><span class="line">    indexes = np.zeros(N, <span class="string">'i'</span>)</span><br><span class="line">    cumulative_sum = np.cumsum(weights)</span><br><span class="line">    i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; N <span class="keyword">and</span> j&lt;N:</span><br><span class="line">        <span class="keyword">if</span> positions[i] &lt; cumulative_sum[j]:</span><br><span class="line">            indexes[i] = j</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> indexes</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">estimate</span><span class="params">(particles, weights)</span>:</span></span><br><span class="line">    pos = particles[:, <span class="number">0</span>:<span class="number">1</span>]</span><br><span class="line">    mean = np.average(pos, weights=weights, axis=<span class="number">0</span>)</span><br><span class="line">    var = np.average((pos - mean)**<span class="number">2</span>, weights=weights, axis=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> mean, var</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resample_from_index</span><span class="params">(particles, weights, indexes)</span>:</span></span><br><span class="line">    particles[:] = particles[indexes]</span><br><span class="line">    weights[:] = weights[indexes]</span><br><span class="line">    weights /= np.sum(weights)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">x_range=np.array([<span class="number">0</span>,<span class="number">800</span>])</span><br><span class="line">y_range=np.array([<span class="number">0</span>,<span class="number">600</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#Number of partciles</span></span><br><span class="line">N=<span class="number">400</span></span><br><span class="line"></span><br><span class="line">landmarks=np.array([ [<span class="number">144</span>,<span class="number">73</span>], [<span class="number">410</span>,<span class="number">13</span>], [<span class="number">336</span>,<span class="number">175</span>], [<span class="number">718</span>,<span class="number">159</span>], [<span class="number">178</span>,<span class="number">484</span>], [<span class="number">665</span>,<span class="number">464</span>]  ])</span><br><span class="line">NL = len(landmarks)</span><br><span class="line">particles=create_uniform_particles(x_range, y_range, N)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">weights = np.array([<span class="number">1.0</span>]*N)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a black image, a window and bind the function to window</span></span><br><span class="line">img = np.zeros((HEIGHT,WIDTH,<span class="number">3</span>), np.uint8)</span><br><span class="line">cv2.namedWindow(WINDOW_NAME)</span><br><span class="line">cv2.setMouseCallback(WINDOW_NAME,mouseCallback)</span><br><span class="line"></span><br><span class="line">center=np.array([[<span class="number">-10</span>,<span class="number">-10</span>]])</span><br><span class="line"></span><br><span class="line">trajectory=np.zeros(shape=(<span class="number">0</span>,<span class="number">2</span>))</span><br><span class="line">robot_pos=np.zeros(shape=(<span class="number">0</span>,<span class="number">2</span>))</span><br><span class="line">previous_x=<span class="number">-1</span></span><br><span class="line">previous_y=<span class="number">-1</span></span><br><span class="line">DELAY_MSEC=<span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">    cv2.imshow(WINDOW_NAME,img)</span><br><span class="line">    img = np.zeros((HEIGHT,WIDTH,<span class="number">3</span>), np.uint8)</span><br><span class="line">    drawLines(img, trajectory,   <span class="number">0</span>,   <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">    drawCross(img, center, r=<span class="number">255</span>, g=<span class="number">0</span>, b=<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#landmarks</span></span><br><span class="line">    <span class="keyword">for</span> landmark <span class="keyword">in</span> landmarks:</span><br><span class="line">        cv2.circle(img,tuple(landmark),<span class="number">10</span>,(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),<span class="number">-1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#draw_particles:</span></span><br><span class="line">    <span class="keyword">for</span> particle <span class="keyword">in</span> particles:</span><br><span class="line">        cv2.circle(img,tuple((int(particle[<span class="number">0</span>]),int(particle[<span class="number">1</span>]))),<span class="number">1</span>,(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>),<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(DELAY_MSEC) &amp; <span class="number">0xFF</span> == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    cv2.circle(img,(<span class="number">10</span>,<span class="number">10</span>),<span class="number">10</span>,(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),<span class="number">-1</span>)</span><br><span class="line">    cv2.circle(img,(<span class="number">10</span>,<span class="number">30</span>),<span class="number">3</span>,(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>),<span class="number">-1</span>)</span><br><span class="line">    cv2.putText(img,<span class="string">"Landmarks"</span>,(<span class="number">30</span>,<span class="number">20</span>),<span class="number">1</span>,<span class="number">1.0</span>,(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">    cv2.putText(img,<span class="string">"Particles"</span>,(<span class="number">30</span>,<span class="number">40</span>),<span class="number">1</span>,<span class="number">1.0</span>,(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line">    cv2.putText(img,<span class="string">"Robot Trajectory(Ground truth)"</span>,(<span class="number">30</span>,<span class="number">60</span>),<span class="number">1</span>,<span class="number">1.0</span>,(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    drawLines(img, np.array([[<span class="number">10</span>,<span class="number">55</span>],[<span class="number">25</span>,<span class="number">55</span>]]), <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="如何安装依赖并运行"><a href="#如何安装依赖并运行" class="headerlink" title="如何安装依赖并运行"></a>如何安装依赖并运行</h2><p>打开anaconda prompt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda create -n Filters python=3</span><br><span class="line">conda activate Filters</span><br><span class="line">conda install -c menpo opencv3</span><br><span class="line">conda install numpy scipy matplotlib sympy</span><br></pre></td></tr></table></figure><p>cd python_code<br>python partical.py<br>python partical_v2.py</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>新生活你要怎么过</title>
    <link href="http://yoursite.com/2019/09/16/%E6%96%B0%E7%94%9F%E6%B4%BB%E4%BD%A0%E8%A6%81%E6%80%8E%E4%B9%88%E8%BF%87/"/>
    <id>http://yoursite.com/2019/09/16/新生活你要怎么过/</id>
    <published>2019-09-16T15:06:07.000Z</published>
    <updated>2019-09-16T15:27:31.657Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1/O/Q+mzRcPecF2LQ40b25uPOIq9sHu5CQ=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="writing" scheme="http://yoursite.com/categories/writing/"/>
    
    
  </entry>
  
  <entry>
    <title>你的上限真的很高吗</title>
    <link href="http://yoursite.com/2019/09/14/%E4%BD%A0%E7%9A%84%E4%B8%8A%E9%99%90%E7%9C%9F%E7%9A%84%E5%BE%88%E9%AB%98%E5%90%97/"/>
    <id>http://yoursite.com/2019/09/14/你的上限真的很高吗/</id>
    <published>2019-09-14T15:52:50.000Z</published>
    <updated>2019-09-14T15:52:50.303Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>readme</title>
    <link href="http://yoursite.com/2019/09/14/readme/"/>
    <id>http://yoursite.com/2019/09/14/readme/</id>
    <published>2019-09-14T15:52:50.000Z</published>
    <updated>2019-11-11T04:59:19.890Z</updated>
    
    <content type="html"><![CDATA[<p>hexo文件夹中，git bash here</p><p>hexo new ‘’</p><p>hexo clean</p><p>hexo g</p><p>hexo d</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;hexo文件夹中，git bash here&lt;/p&gt;
&lt;p&gt;hexo new ‘’&lt;/p&gt;
&lt;p&gt;hexo clean&lt;/p&gt;
&lt;p&gt;hexo g&lt;/p&gt;
&lt;p&gt;hexo d&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>矛盾论</title>
    <link href="http://yoursite.com/2019/09/13/%E7%9F%9B%E7%9B%BE%E8%AE%BA/"/>
    <id>http://yoursite.com/2019/09/13/矛盾论/</id>
    <published>2019-09-13T07:24:37.000Z</published>
    <updated>2019-09-16T15:32:03.483Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="writing" scheme="http://yoursite.com/categories/writing/"/>
    
    
  </entry>
  
  <entry>
    <title>电脑迁移</title>
    <link href="http://yoursite.com/2019/09/13/%E7%94%B5%E8%84%91%E8%BF%81%E7%A7%BB/"/>
    <id>http://yoursite.com/2019/09/13/电脑迁移/</id>
    <published>2019-09-13T04:51:27.000Z</published>
    <updated>2019-09-13T04:54:40.402Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19mxMS8y4EvULXA1LmvgQd+AwOB6XW6f/JpidwVIj6FX4zXSfssDwBlLMNylWcDy+2118V3/eXOVOoUxIZSQ34Hm0D3q7C1TjatOGYY+vT6lt15IBifIGKJgm/VUHqkLWPpM2QZca0prm45mAB/Od8EIIepxcD2mR/nzcfOiJ9QVryH2gpVuhacUGeWn7xom7B3oeEQkFzBUJn4rrvCV/Bfou2y9fVt04pIL7P0+2sRjNQxWho0715kf+4YUt1JJDirfoj6EWs3S2Ad/6ClWjeJEV0Zm8nqqb7+6ewRE21kIVndmnzFRhiQUfEwReAMBzGt07SHSm0UQJXZ7Lt364xPS9YFjpArXihqzaUEg27Qo5SyVs72Y12r</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/09/12/hello-world/"/>
    <id>http://yoursite.com/2019/09/12/hello-world/</id>
    <published>2019-09-12T14:27:15.898Z</published>
    <updated>2019-07-03T10:54:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python yield</title>
    <link href="http://yoursite.com/2019/07/25/python-yield/"/>
    <id>http://yoursite.com/2019/07/25/python-yield/</id>
    <published>2019-07-25T06:59:22.000Z</published>
    <updated>2019-07-25T08:31:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">python中yield关键字的用法</blockquote><a id="more"></a><h2 id="迭代-iteration-与可迭代-iterable"><a href="#迭代-iteration-与可迭代-iterable" class="headerlink" title="迭代(iteration)与可迭代(iterable)"></a>迭代(iteration)与可迭代(iterable)</h2><p>使用<strong>容器</strong>时逐个获取元素的过程为<strong>迭代</strong>。</p><h2 id="哪些类型是可迭代的"><a href="#哪些类型是可迭代的" class="headerlink" title="哪些类型是可迭代的"></a>哪些类型是可迭代的</h2><ul><li>python中的顺序类型： <code>list</code>, <code>tuple</code>(元组，列表可修改元组不可修改，列表用中括号元组用小括号), <code>string</code>.</li><li><code>dict</code>, <code>set</code>, <code>file</code>.</li><li>某类对象提供了 <code>__iter__()</code> 或者 <code>__getitem__()</code> 方法.</li></ul><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>对迭代器不断调用<code>next()</code>方法，可依次获取下一个元素，迭代器<code>__iter__()</code>方法返回迭代器自身，因此迭代器也是可迭代的。</p><h2 id="迭代器协议-iterator-protocol"><a href="#迭代器协议-iterator-protocol" class="headerlink" title="迭代器协议(iterator protocol)"></a>迭代器协议(iterator protocol)</h2><p>一个容器提供<code>__iter__()</code>方法，该方法能返回一个能逐个访问容器内所有元素的迭代器，则该容器实现了迭代器协议。</p><h3 id="python处理for循环的过程"><a href="#python处理for循环的过程" class="headerlink" title="python处理for循环的过程"></a>python处理for循环的过程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> something:</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><p>处理for循环首先调用内建函数<code>iter(something)</code>,内建函数调用<code>something.__iter__()</code>,返回something对应的迭代器，然后for循环会调用内建函数<code>next()</code>，作用在迭代器上获取迭代器的下一个元素，并赋值给x</p><h2 id="生成器函数-generaor-function-和生成器-generator"><a href="#生成器函数-generaor-function-和生成器-generator" class="headerlink" title="生成器函数(generaor function)和生成器(generator)"></a>生成器函数(generaor function)和生成器(generator)</h2><p>如果一个函数包含 yield 表达式，那么它是一个生成器函数；调用它会返回一个特殊的迭代器，称为生成器。</p><p>生成器函数被调用后，其函数体内的代码并不会立即执行，而是返回一个生成器（generator-iterator）。当返回的生成器调用成员方法时，相应的生成器函数中的代码才会执行。</p><h2 id="“下一个yield表达式”"><a href="#“下一个yield表达式”" class="headerlink" title="“下一个yield表达式”"></a>“下一个yield表达式”</h2><p>调用 generator.next() 时，生成器函数会从当前位置开始执行到下一个 yield 表达式。这里的「下一个」指的是执行逻辑的下一个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f123</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> f123(): <span class="comment"># 1, 2, and 3, will be printed</span></span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f13</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">False</span>:</span><br><span class="line">        <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> f13(): <span class="comment"># 1 and 3, will be printed</span></span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><h3 id="使用-send-方法与生成器函数通信"><a href="#使用-send-方法与生成器函数通信" class="headerlink" title="使用 send() 方法与生成器函数通信"></a>使用 send() 方法与生成器函数通信</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        y = (<span class="keyword">yield</span> x)</span><br><span class="line">        x += y</span><br><span class="line"></span><br><span class="line">geniter = func()</span><br><span class="line">geniter.next()  <span class="comment"># 1</span></span><br><span class="line">geniter.send(<span class="number">3</span>) <span class="comment"># 4</span></span><br><span class="line">geniter.send(<span class="number">10</span>)<span class="comment"># 14</span></span><br></pre></td></tr></table></figure><p>生成器函数 func 用 yield 表达式，将处理好的 x 发送给生成器的调用者；与此同时，生成器的调用者通过 send 函数，将外部信息作为生成器函数内部的 yield 表达式的值，保存在 y 当中，并参与后续的处理。</p><h2 id="yield的好处"><a href="#yield的好处" class="headerlink" title="yield的好处"></a>yield的好处</h2><p>顺序访问容器内的前五个元素：</p><ul><li>way1:获取所有元素然后取前五</li><li>way2:逐个迭代，至第五个元素</li></ul><p>假设对于一个func(),返回值为列表，调用者对其返回值只有逐个迭代：</p><ul><li>若等函数生成所有元素可能需要很长时间</li><li>使用yield把func()变成一个生成器函数，每次产生一个元素，可以节省开销</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;python中yield关键字的用法
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>又梦</title>
    <link href="http://yoursite.com/2019/07/19/%E5%8F%88%E6%A2%A6/"/>
    <id>http://yoursite.com/2019/07/19/又梦/</id>
    <published>2019-07-19T02:55:49.000Z</published>
    <updated>2019-07-19T03:06:28.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="writing" scheme="http://yoursite.com/categories/writing/"/>
    
    
  </entry>
  
  <entry>
    <title>非极客</title>
    <link href="http://yoursite.com/2019/07/19/%E9%9D%9E%E6%9E%81%E5%AE%A2/"/>
    <id>http://yoursite.com/2019/07/19/非极客/</id>
    <published>2019-07-19T02:26:12.000Z</published>
    <updated>2019-07-19T02:52:30.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="writing" scheme="http://yoursite.com/categories/writing/"/>
    
    
  </entry>
  
  <entry>
    <title>复现vifi相关</title>
    <link href="http://yoursite.com/2019/07/18/%E5%A4%8D%E7%8E%B0vifi%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2019/07/18/复现vifi相关/</id>
    <published>2019-07-18T10:35:47.000Z</published>
    <updated>2019-07-19T03:06:48.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">复现vifi过程中涉及的相关知识</blockquote><a id="more"></a>### ]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;复现vifi过程中涉及的相关知识&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Gradle(转载自Bonker)</title>
    <link href="http://yoursite.com/2019/07/18/Gradle/"/>
    <id>http://yoursite.com/2019/07/18/Gradle/</id>
    <published>2019-07-18T08:38:29.000Z</published>
    <updated>2019-07-18T08:53:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">关于Android开发中的Gradle</blockquote><a id="more"></a><p>(转载自Bonker）原文链接：<a href="https://www.cnblogs.com/Bonker/p/5619458.html" target="_blank" rel="noopener">https://www.cnblogs.com/Bonker/p/5619458.html</a></p><h2 id="什么是Gradle"><a href="#什么是Gradle" class="headerlink" title="什么是Gradle"></a>什么是Gradle</h2><p>简单的说，Gradle是一个构建工具，它是用来帮助我们构建app的，构建包括编译、打包等过程。我们可以为Gradle指定构建规则，然后它就会根据我们的“命令”自动为我们构建app。Android Studio中默认就使用Gradle来完成应用的构建。有些同学可能会有疑问：”我用AS不记得给Gradle指定过什么构建规则呀，最后不还是能搞出来个apk。“ 实际上，app的构建过程是大同小异的，有一些过程是”通用“的，也就是每个app的构建都要经历一些公共步骤。因此，在我们在创建工程时，Android Studio自动帮我们生成了一些通用构建规则，很多时候我们甚至完全不用修改这些规则就能完成我们app的构建。</p><p>有些时候，我们会有一些个性化的构建需求，比如我们引入了第三方库，或者我们想要在通用构建过程中做一些其他的事情，这时我们就要自己在系统默认构建规则上做一些修改。这时候我们就要自己向Gradle”下命令“了，这时候我们就需要用Gradle能听懂的话了，也就是Groovy。Groovy是一种基于JVM的动态语言，关于它的具体介绍，感兴趣的同学可以文末参考”延伸阅读“部分给出的链接。</p><p>我们在开头处提到“Gradle是一种构建工具”。实际上，当我们想要更灵活的构建过程时，Gradle就成为了一个编程框架——我们可以通过编程让构建过程按我们的意愿进行。也就是说，当我们把Gradle作为构建工具使用时，我们只需要掌握它的配置脚本的基本写法就OK了；而当我们需要对构建流程进行高度定制时，就务必要掌握Groovy等相关知识了。限于篇幅，本文只从构建工具使用者的角度来介绍Gradle的一些最佳实践，在文末“延伸阅读”部分给出了几篇高质量的深入介绍Gradle的文章，其中包含了Groovy等知识的介绍。</p><h2 id="Gradle的基本组分"><a href="#Gradle的基本组分" class="headerlink" title="Gradle的基本组分"></a>Gradle的基本组分</h2><h3 id="Project与Task"><a href="#Project与Task" class="headerlink" title="Project与Task"></a>Project与Task</h3><p>在Gradle中，每一个待构建的工程是一个Project，构建一个Project需要执行一系列Task，比如编译、打包这些构建过程的子过程都对应着一个Task。具体来说，一个apk文件的构建包含以下Task：Java源码编译、资源文件编译、Lint检查、打包以生成最终的apk文件等等。</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>插件的核心工作有两个：一是定义Task；而是执行Task。也就是说，我们想让Gradle能正常工作，完成整个构建流程中的一系列Task的执行，必须导入合适的插件，这些插件中定义了构建Project中的一系列Task，并且负责执行相应的Task。</p><p>在新建工程的app模块的build.gradle文件的第一行，往往都是如下这句：</p><p>apply plugin: ‘com.android.application’<br>这句话的意思就是应用“com.android.application“这个插件来构建app模块，app模块就是Gradle中的一个Project。也就是说，这个插件负责定义并执行Java源码编译、资源文件编译、打包等一系列Task。实际上”com.android.application”整个插件中定义了如下4个顶级任务：</p><p>assemble: 构建项目的输出（apk）</p><p>check: 进行校验工作</p><p>build: 执行assemble任务与check任务</p><p>clean: 清除项目的输出</p><p>当我们执行一个任务时，会自动执行它所依赖的任务。比如，执行assemble任务会执行assembleDebug任务和assembleRelease任务，这是因为一个Android项目至少要有debug和release这两个版本的输出。</p><h3 id="Gradle配置文件"><a href="#Gradle配置文件" class="headerlink" title="Gradle配置文件"></a>Gradle配置文件</h3><p>我们在Android Studio中新建一个工程，可以得到如下的工程结构图：</p><p>上面我们说过，Android Studio中的一个Module即为Gradle中的一个Project。上图的app目录下，存在一个build.gradle文件，代表了app Module的构建脚本，它定义了应用于本模块的构建规则。我们可以看到，工程根目录下也存在一个build.gradle文件，它代表了整个工程的构建，其中定义了适用于这个工程中所有模块的构建规则。</p><p>接下来我们介绍一下上图中其他几个Gradle配置文件：</p><p>gradle.properties: 从它的名字可以看出，这个文件中定义了一系列“属性”。实际上，这个文件中定义了一系列供build.gradle使用的常量，比如keystore的存储路径、keyalias等等。</p><p>gradlew与gradlew.bat: gradlew为Linux下的shell脚本，gradlew.bat是Windows下的批处理文件。gradlew是gradle wrapper的缩写，也就是说它对gradle的命令进行了包装，比如我们进入到指定Module目录并执行“gradlew.bat assemble”即可完成对当前Module的构建（Windows系统下）。</p><p>local.properties: 从名字就可以看出来，这个文件中定义了一些本地属性，比如SDK的路径。</p><p>settings.gradle: 假如我们的项目包含了不只一个Module时，我们想要一次性构建所有Module以完成整个项目的构建，这时我们需要用到这个文件。比如我们的项目包含了ModuleA和ModuleB这两个模块，则这个文件中会包含这样的语句：include ‘:ModuleA’, ‘:ModuleB’。</p><h3 id="构建脚本"><a href="#构建脚本" class="headerlink" title="构建脚本"></a>构建脚本</h3><p>首先我们来看一下工程目录下的build.gradle，它指定了真个整个项目的构建规则，它的内容如下：</p><figure class="highlight plain"><figcaption><span>&#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    repositories &#123;</span><br><span class="line">        jcenter() //构建脚本中所依赖的库都在jcenter仓库下载</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        //指定了gradle插件的版本</span><br><span class="line">        classpath &apos;com.android.tools.build:gradle:1.5.0&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        //当前项目所有模块所依赖的库都在jcenter仓库下载</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">我们再来简单介绍下app模块的build.gradle的内容：</span><br></pre></td></tr></table></figure><p>//加载用于构建Android项目的插件<br>apply plugin: ‘com.android.application’</p><p>android { //构建Android项目使用的配置<br>    compileSdkVersion 23 //指定编译项目时使用的SDK版本<br>    buildToolsVersion “23.0.1” //指定构建工具的版本</p><pre><code>defaultConfig {    applicationId &quot;com.absfree.debugframwork&quot; //包名    minSdkVersion 15  //指定支持的最小SDK版本    targetSdkVersion 23 //针对的目标SDK版本    versionCode 1     versionName &quot;1.0&quot;}buildTypes { //针对不同的构建版本进行一些设置    release { //对release版本进行的设置        minifyEnabled false //是否开启混淆        proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;  //指定混淆文件的位置    }}</code></pre><p>}</p><p>dependencies { //指定当前模块的依赖<br>    compile fileTree(dir: ‘libs’, include: [‘*.jar’])<br>    testCompile ‘junit:junit:4.12’<br>    compile ‘com.android.support:appcompat-v7:23.1.1’<br>    compile ‘com.android.support:design:23.1.1’<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"></span><br><span class="line">## 常见配置</span><br><span class="line"></span><br><span class="line">整个工程的build.gradle通常不需我们改动，这里我们介绍下一些对模块目录下build.gradle文件的常见配置。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">### 依赖第三方库</span><br><span class="line"></span><br><span class="line">当我们的项目中用到了了一些第三方库时，我们就需要进行一些配置，以保证能正确导入相关依赖。设置方法很简单，比如我们在app模块中中用到了Fresco，只需要在build.gradle文件中的dependencies块添加如下语句：</span><br></pre></td></tr></table></figure><p>dependencies {<br>    …<br>    compile ‘com.facebook.fresco:fresco:0.11.0’<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这样一来，Gradle会自动从jcenter仓库下载我们所需的第三方库并导入到项目中。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">### 导入本地jar包</span><br><span class="line"></span><br><span class="line">在使用第三方库时，除了像上面那样从jcenter仓库下载，我们还可以导入本地的jar包。配置方法也很简单，只需要先把jar文件添加到app\libs目录下，然后在相应jar文件上单击右键，选择“Ad As Library”。然后在build.gradle的dependencies块下添加如下语句：</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">compile files(&apos;libs/xxx.jar&apos;)</span><br><span class="line">实际上我们可以看到，系统为我们创建的build.gradle中就已经包含了如下语句：</span><br><span class="line"></span><br><span class="line">compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">这句话的意思是，将libs目录下的所有jar包都导入。所以实际上我们只需要把jar包添加到libs目录下并“Ad As Library&quot;即可。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 依赖其它模块</span><br><span class="line"></span><br><span class="line">假设我们的项目包含了多个模块，并且app模块依赖other模块，那么我们只需app\build.gradle的denpendencies块下添加如下语句：</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">compile project(&apos;:other&apos;)</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">### 构建输出为aar文件</span><br><span class="line"></span><br><span class="line">通常我们构建的输出目标都是apk文件，但如果我们的当前项目时Android Library，我们的目标输出就是aar文件。要想达到这个目的也很容易，只需要把build.gradle的第一句改为如下：</span><br><span class="line"></span><br><span class="line">apply plugin:&apos;com.android.library&apos;</span><br><span class="line">这话表示我们使用的插件不再是构建Android应用的插件，而是构建Android Library的插件，这个插件定义并执行用于构建Android Library的一系列Task。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">### 自动移除不再使用的资源</span><br><span class="line"></span><br><span class="line">只需进行如下配置：</span><br></pre></td></tr></table></figure><p>android {<br>    …<br>    }<br>    buildTypes {<br>        release {<br>            …<br>            shrinkResources true<br>            …<br>        }<br>    }<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 忽略Lint错误</span><br><span class="line"></span><br><span class="line">在我们构建Android项目的过程中，有时候会由于Lint错误而终止。当这些错误来自第三方库中时，我们往往想要忽略这些错误从而继续构建进程。这时候，我们可以只需进行如下配置：</span><br></pre></td></tr></table></figure><p>android {<br>    …<br>    lintOptions {<br>        abortOnError false<br>    }<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 集成签名配置</span><br><span class="line"></span><br><span class="line">在构建release版本的Android项目时，每次都手动导入签名文件，键入密码、keyalias等信息十分麻烦。通过将签名配置集成到构建脚本中，我们就不必每次构建发行版本时都手动设置了。具体配置如下：</span><br></pre></td></tr></table></figure><p>signingConfigs {<br>    myConfig { //将”xx”替换为自己的签名文件信息<br>        storeFile file(“xx.jks”)<br>        storePassword “xx”<br>        keyAlias “xx”<br>        keyPassword “xx”<br>    }<br>}<br>android {<br>    buildTypes {<br>        release {<br>            signingConfig  signingConfigs.myConfig //在release块中加入这行<br>            …<br>        }<br>    }<br>    …<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">真实开发中，我们不应该把密码等信息直接写到build.gradle中，更好的做法是放在gradle.properties中设置：</span><br></pre></td></tr></table></figure><p>RELEASE_STOREFILE=xxx.jks<br>RELEASE_STORE_PASSWORD = xxx<br>RELEASE_KEY_ALIAS=xxx<br>RELEASE_KEY_PASSWORD=xxx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">然后在build.gradle中直接引用即可：</span><br></pre></td></tr></table></figure><p>signingConfigs {<br>    myConfig {<br>        storeFilefile(RELEASE_STOREFILE)<br>        storePassword RELEASE_STORE_PASSWORD<br>        keyAlias RELEASE_KEY_ALIAS<br>        keyPassword RELEASE_KEY_PASSWORD<br>    }<br>}</p><p>``` </p><p>关于Gradle的其他配置方法大家可以参考“延伸阅读”部分的“Gradle最佳实践”。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;关于Android开发中的Gradle&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Gradle" scheme="http://yoursite.com/categories/Gradle/"/>
    
    
      <category term="Gradle" scheme="http://yoursite.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Linux远程登录及服务器配置</title>
    <link href="http://yoursite.com/2019/07/17/Linux%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/"/>
    <id>http://yoursite.com/2019/07/17/Linux远程登录/</id>
    <published>2019-07-17T13:45:43.000Z</published>
    <updated>2019-07-18T08:56:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">Linux远程登录及服务器配置</blockquote><a id="more"></a><p>##Linux远程登录原理<br>安装telnet远程客户端登录工具的客户机通过23（默认）端口连接到Linux服务器，通过telnet将远程客户机上命令传到服务器执行并反馈。<br>###telnet软件包安装<br><code>sudo apt-get install inetutils-telnetd</code>(ubuntu没有默认安装Telnet软件包)</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;Linux远程登录及服务器配置&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="远程登录" scheme="http://yoursite.com/tags/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>usr-key</title>
    <link href="http://yoursite.com/2019/07/17/usr-key/"/>
    <id>http://yoursite.com/2019/07/17/usr-key/</id>
    <published>2019-07-17T07:33:59.000Z</published>
    <updated>2019-07-28T07:00:56.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+e6NgIkIy0JawO2dDG1fI0CG3d4Tta1C+SWy29lEURKpNPu66Ls1NInjrV5306ta8x4rbnIVIpCHbs1AZhmVQUrGBb0tVbYD8sqz9vrAIbAYda+ILHWrtuEeGcBy7BjJXGJytIpIjcnmdplWGINVnDgJLJJ+/HSJI2srExmDCQLGfAqaQJcCCjnhZcotov5XhSsiKlnLF/4n1wJPt8E7AIUmXugHSLHD7Xvt6HfB8MtHjSSKMGhtY7wIOBt8i/KpYaKorS+EpXyeOEd5QlnpcDiYiA0CIesCNtdq2eA2nMAWoZShFSsudoF/8/9j2xVKlvwX4keJhbBif5vhsnr7VAJrKm4lSfukjZcWB6ghPAuensOwBUTcXCmqP13aA3SXeuhOFspiKdD/QarzjgdKH8cefUPkxUi1nrqmJ7VV/CdmUgUduLRbugNootr3xINf1aA9QePDVGae6A8+gJwL2+fF4k2pbHHcPI/FAOq5mNgT+5fs6zRSzXpw85j0+uttgKu0Z+G7OgU/MWa0KjkJrcmFlNLMRktzZtypKboEmamLlz6meGnupNlLN6gQPGP5+85U0Mw1bApWLWxZnDTOrjPVv/fcgIh+Alg3FWNPraHrmm0LbziQsOZ7PKxqwkLR01xZiYxwGK8h7A9UIB8yXLU76zHZbqf56mmD4+A0IJtI4B/E+uI+5xpCv7hiTNKT//qUhpXa8aXnZfL+aZ/JSxwcKqil1L52U1OE9HWJZHr2eIAt5c1IjPBnNHolPrVf+irqd5xrXHEt/aX4DepfY1n1lnRitaMe3ACc8c41ZsmLiofliXkih0d24t6tYl6LOgOQJz1DjHVZyAMmZAbOMRE3NUVSl0DOVVd7GhdIOAnpK+hnereQ3mhGVeiQ6y+TsLQ0yZd8D9UdjwPtpeNL8g4rbKfcH9O8uaTzQWvYnszb62MfXNGVJmHbOm52BLJ0jFrsCkR6oZMun/1ErZj4YEiEaepNK31iE6vD50jfMBRnffcU4bwLIyernX8U9Ka2TEdDo64oXwSJRPZYpaF6x60cv+YN+FZwuKimiZkjNxyTQuMiYbKmXy/HWlXWE+3c4e1DCyqUlKVYetL1yxZQKJrsltAcNiKG9gx+gYN6GsJM3YIJBFBUwGEzH4/D7rBs52H5Y+PQZDkzFuecnHsyi7lEmcAax/O41tCzEONd6qXpIosjZdsDhlfB5/H7aDvfb2jwdQZ7TS3BJJn+6tlGsNYBiS1T7ubEMhdrb4jopz4k7JX99/QwIY3wCNegbeNz27JGeDT3EeBi071dl5i0f/FhLZiywXBEFCOKR7ibNtiHbF0tQp6DaP7ocP88BQeszXq28wnT7eaqpJTATkQghcKLiY1ZugVrTRUZAc6b3XcJFC7p/Qyupw72s4S3SeuhQN0igd5Dw+Wj3XnFuIYbn77xX1rp2ziA4pF2i5YLGXb4EIs6RCgJjpj5/mm27qLV9jswuTDZrP/teXfYmzcKnGs8vloRIErYzlbioSF8weBIkg0wPTkNZ1XMohyGIehJd5zgko6aOSzkOefohZXYbJ6y6w5wDjb66qgp02tVUl5irwYeyTiWniUkZZkMxmbCiNSiX0c4lfWKvWkhYrdklT3lWDisgOCgE=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="key" scheme="http://yoursite.com/categories/key/"/>
    
    
  </entry>
  
  <entry>
    <title>light frequency authenticate</title>
    <link href="http://yoursite.com/2019/07/05/light-frequency-authenticate/"/>
    <id>http://yoursite.com/2019/07/05/light-frequency-authenticate/</id>
    <published>2019-07-05T03:09:43.000Z</published>
    <updated>2019-07-09T06:38:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">基于可见光的无线网络认证</blockquote><a id="more"></a><p>2019-07-05</p><h2 id="802-1x认证过程："><a href="#802-1x认证过程：" class="headerlink" title="802.1x认证过程："></a>802.1x认证过程：</h2><ol><li><p>当用户有访问网络需求时打开802.1X客户端程序，输入已经申请、登记过的用户名和密码，发起连接请求（EAPOL-Start报文）。此时，客户端程序将发出请求认证的报文给设备端，开始启动一次认证过程。</p></li><li><p>设备端收到请求认证的数据帧后，将发出一个请求帧（EAP-Request/Identity报文）要求用户的客户端程序发送输入的用户名。</p></li><li><p>客户端程序响应设备端发出的请求，将用户名信息通过数据帧（EAP-Response/Identity报文）发送给设备端。设备端将客户端发送的数据帧经过封包处理后（RADIUS Access-Request报文）送给认证服务器进行处理。</p></li><li><p>RADIUS服务器收到设备端转发的用户名信息后，将该信息与数据库中的用户名表对比，找到该用户名对应的密码信息，用随机生成的一个加密字对它进行加密处理，同时也将此加密字通过RADIUS Access-Challenge报文发送给设备端，由设备端转发给客户端程序。</p></li><li><p>客户端程序收到由设备端传来的加密字（EAP-Request/MD5 Challenge报文）后，用该加密字对密码部分进行加密处理（此种加密算法通常是不可逆的），生成EAP-Response/MD5 Challenge报文，并通过设备端传给认证服务器。</p></li><li><p>RADIUS服务器将收到的已加密的密码信息（RADIUS Access-Request报文）和本地经过加密运算后的密码信息进行对比，如果相同，则认为该用户为合法用户，反馈认证通过的消息（RADIUS Access-Accept报文和EAP-Success报文）。</p></li><li><p>设备收到认证通过消息后将端口改为授权状态，允许用户通过端口访问网络。在此期间，设备端会通过向客户端定期发送握手报文的方法，对用户的在线情况进行监测。缺省情况下，两次握手请求报文都得不到客户端应答，设备端就会让用户下线，防止用户因为异常原因下线而设备无法感知。</p></li><li><p>客户端也可以发送EAPOL-Logoff报文给设备端，主动要求下线。设备端把端口状态从授权状态改变成未授权状态，并向客户端发送EAP-Failure报文。</p></li></ol><h2 id="关于WiFidog："><a href="#关于WiFidog：" class="headerlink" title="关于WiFidog："></a>关于WiFidog：</h2><p>Portal认证，通常也会叫Web认证，未认证用户上网时，设备强制用户登录到特定站点，用户可以免费访问其中的服务。当用户需要使用互联网中的其它信息时，必须在门户网站进行认证，只有认证通过后才可以使用互联网资源。现金很多中国移动CMCC、中国联通、中国电信ChinaNet的WIFI都使用这种认证接入方式。</p><p>在OpenWRT上实现Portal认证，实际上早已有解决方案：</p><ol><li><p>chillispot，但原维护作者停止更新，被chillispot.info接管继续开发；</p></li><li><p>coova-chilli，它是基于chillispot开发拓展的，功能最为强大；可以去官方看一下Coova-chilli；</p></li><li><p><strong>wifidog</strong>，前两个由于原维护作者停止更新，笔者也没有深入研究，重点钻研了wifidog，Wifidog也是OpenWRT和DD-WRT中实现Portal比较出名的。但是，Wifidog只是实现AP认证网关，需要配合外部的Portal服务器才能使用，Portal主要是提供认证所需的WEB页面且实现认证计费等的功能。虽然这也有很多商用解决方案，例如wiwiz、wifiap等，但是这些商业解决方案的目标都是盈利，即使可以免费使用，免费账号的功能和权限都受到了很大的限制，例如不能自定义页面，Web认证页面有广告等等。有条件的人可能打算自己搭建Portal服务器，但是看看Wifidog的官方Wiki，对搭建过程实在是难以理解。后来，笔者发现网络上还有一个 <strong>authpuppy方案</strong> ，官方网站 <strong><a href="http://www.authpuppy.org" target="_blank" rel="noopener">www.authpuppy.org</a></strong> ，是一个已实现好的Wifidog认证服务器，里面包含各种插件供你使用，官方的安装过程也很简单，如果你懂的HTML和面向对象编程的相关知识且拥有一个服务器，可以自行修改认证页面，使用authpuppy也是一个不错的方案。</p></li><li><p>如何 <strong>自行编写一个轻量级的Web Portal认证服务器</strong> ：</p><ul><li><h3 id="Wifidog的工作原理："><a href="#Wifidog的工作原理：" class="headerlink" title="Wifidog的工作原理："></a>Wifidog的工作原理：</h3><ol><li><p>客户端发出初始化请求，比如访问 <a href="http://www.dqrun.com" target="_blank" rel="noopener">www.dqrun.com</a> 。</p></li><li><p>网关的防火墙规则将这个请求重定向到本地网关的端口上。这个端口是Wifidog监听的端口。</p></li><li><p>Wfidog提供一个HTTP重定向回复，重定向到Web认证页面，重定向的Url的Querystring中包含了Gateway的ID，Gateway的FQDN以及其他的信息。</p></li><li><p>用户向认证服务器发出认证请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gw_id=[GatewayID, default: “default”]</span><br><span class="line">gw_address=[GatewayAddress, internal IP of router]</span><br><span class="line">gw_port=[GatewayPort, port that wifidog Gateway is listening on]</span><br><span class="line">url=[user requested url]；</span><br></pre></td></tr></table></figure></li><li><p>网关返回一个（可以是自定义的）splash（也称作“登录”）页面。</p></li><li><p>用户提供他的凭据信息，比如用户名和密码。</p></li><li><p>成功认证的话，客户端将会被重定向到网关的自己的web页面上，并且带有一个认证凭据（一个一次性的token），内容比如：<a href="http://GatewayIP:GatewayPort/wifidog/auth?token=[auth" target="_blank" rel="noopener">http://GatewayIP:GatewayPort/wifidog/auth?token=[auth</a> token]；</p></li><li><p>用户就是用获取到的凭据访问网关。</p></li><li><p>网关去认证服务器询问token的有效性。</p></li><li><p>认证服务器确认token的有效性。</p></li><li><p>网关发送重定向给客户端，以从认证服务器上获取 成功提示页面，重定向到 <a href="http://portal_server:port/portal_script" target="_blank" rel="noopener">http://portal_server:port/portal_script</a> 这个位置。</p></li><li><p>认证服务器通知客户请求成功，可以上网了。</p></li></ol></li></ul></li></ol><h2 id="待完成工作："><a href="#待完成工作：" class="headerlink" title="待完成工作："></a>待完成工作：</h2><p><strong>装wifidog</strong> ，配置:<br>1）监听端口 2)服务器地址 3）5个脚本的地址(login, portal, msg, ping, auth)<br> <strong>配置方法：</strong>远程登陆openwrt: ssh <a href="mailto:root@192.168.1.1" target="_blank" rel="noopener">root@192.168.1.1</a>， 然后修改/etc/wifidog.conf文件。</p><p><strong>将笔记本搭建成服务器</strong></p><p><strong>添加对LED的频率提取功能</strong></p><p><strong>实现动态调节LED频率,将此功能添加至系统</strong></p><hr><p>2019/07/08</p><h2 id="路由器刷openwrt系统"><a href="#路由器刷openwrt系统" class="headerlink" title="路由器刷openwrt系统"></a>路由器刷openwrt系统</h2><p>恢复出厂：断电后，先按住reset再通电。<br><br>登陆192.168.1.1（breed web），先点“恢复出厂”，选择“openwrt”；再点击“更新固件”，选中已下载好的openwrt镜像，进行固件更新。<br></p><h3 id="解决路由器联网问题"><a href="#解决路由器联网问题" class="headerlink" title="解决路由器联网问题"></a>解决路由器联网问题</h3><ol><li>设置密码：点击<code>Go to password configuration...</code>，敲入2遍新的路由器密码，点击页面最下面的 保存执行按钮，密码修改即时生效。 </li><li>设置主机名和时区：<code>System</code>菜单的<code>system</code>进去，主机名改为自己希望的名称，时区设置为<code>Asia/Shanghai</code>，保存。</li><li><strong>联网设置</strong> :点击菜单<code>Network</code>中的第二项，可以选择2G或5G无线网络连接WIFI，按 <code>scan</code>扫描按钮，稍等出现列表中，选择自己(想通过这个路由连接)的WIFI，输入密码，按提交，然后稍等，按保存执行。</li></ol><h2 id="ubuntu16-04编译OpenWrt环境搭建："><a href="#ubuntu16-04编译OpenWrt环境搭建：" class="headerlink" title="ubuntu16.04编译OpenWrt环境搭建："></a>ubuntu16.04编译OpenWrt环境搭建：</h2><ol><li><p>ubuntu下OpenWrt编译环境需要安装很多组件：<br><br><code>sudo apt-get install gcc</code><br><code>sudo apt-get install g++</code><br><code>sudo apt-get install binutils</code><br><code>sudo apt-get install patch</code><br><code>sudo apt-get install bzip2</code><br><code>sudo apt-get install flex</code><br><code>sudo apt-get install bison</code><br><code>sudo apt-get install make</code><br><code>sudo apt-get install autoconf</code><br><code>sudo apt-get install gettext</code><br><code>sudo apt-get install texinfo</code><br><code>sudo apt-get install unzip</code><br><code>sudo apt-get install sharutils</code><br><code>sudo apt-get install subversion</code><br><code>sudo apt-get install libncurses5-dev</code><br><code>sudo apt-get install ncurses-term</code><br><code>sudo apt-get install zlib1g-dev</code><br><code>sudo apt-get install subversion</code><br><code>sudo apt-get install  git-core</code><br><code>sudo apt-get install gawk</code><br><code>sudo apt-get install asciidoc</code><br><code>sudo apt-get install libz-dev</code><br>当然安装之前最好先更新下组件包：<br><code>sudo apt-get update</code><br>逐个安装…</p></li><li><p>新建一个openwrt目录，使用命令：<br><code>mkdir openwrt</code><br><code>sudo chmod 777 openwrt</code><br>接下来的所有命令都在/openwrt目录下运行</p></li><li><p>下载OpenWrt源码:<br><code>git clone git://git.openwrt.org/openwrt/openwrt.git</code></p></li><li><p>添加软件扩展包：<br><code>cd /home/ngmi/openwrt/openwrt/</code><br><code>cp feeds.conf.default feeds.conf</code>(将feeds.conf.default修改为feeds.conf)</p></li><li><p>更新扩展，安装扩展：<br><code>./scripts/feeds update -a</code><br><code>./scripts/feeds install -a</code></p></li><li><p>测试下编译环境，使用命令：<br><code>make defconfig</code></p></li><li><p><code>make menuconfig</code><br>如果一切正常，会出现一个配置菜单，可以选择要编译的固件平台、型号，还能选择固件中要添加的功能和组件，至此编译环境就搭建好了。</p></li></ol><h2 id="在OpenWrt的路由器上安装Wifidog应用程序"><a href="#在OpenWrt的路由器上安装Wifidog应用程序" class="headerlink" title="在OpenWrt的路由器上安装Wifidog应用程序"></a>在OpenWrt的路由器上安装Wifidog应用程序</h2><ol><li>在OpenWrt系统的源码文件下，编辑<code>feeds.conf.default</code>文件<br><br><code>vim feeds.conf.default</code><br>在其中增加一行：<br><code>src-git wifidog https://github.com/wifidog/wifidog-gateway.git</code></li><li>然后更新，再安装：<br><code>./scripts/feeds update -a</code><br><code>./scripts/feeds install -a</code></li><li>终端执行编译命令<br><code>make menuconfig</code></li><li>在<code>Network/captive portals/</code>下选择wifidog 就有选择 WiFiDog 这一项了</li></ol><hr><p>2019/07/09</p><h2 id="配置服务器中遇到的问题"><a href="#配置服务器中遇到的问题" class="headerlink" title="配置服务器中遇到的问题"></a>配置服务器中遇到的问题</h2><p><strong>问题：</strong></p><figure class="highlight plain"><figcaption><span>python3 manage.py runserver 0.0.0.0:8000</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;manage.py&quot;, line 22, in &lt;module&gt;</span><br><span class="line">    execute_from_command_line(sys.argv)</span><br><span class="line">  File &quot;/usr/local/lib/python3.5/dist-packages/django/core/management/__init__.py&quot;, line 381, in execute_from_command_line</span><br><span class="line">    utility.execute()</span><br><span class="line">  File &quot;/usr/local/lib/python3.5/dist-packages/django/core/management/__init__.py&quot;, line 375, in execute</span><br><span class="line">    self.fetch_command(subcommand).run_from_argv(self.argv)</span><br><span class="line">  File &quot;/usr/local/lib/python3.5/dist-packages/django/core/management/base.py&quot;, line 323, in run_from_argv</span><br><span class="line">    self.execute(*args, **cmd_options)</span><br><span class="line">  File &quot;/usr/local/lib/python3.5/dist-packages/django/core/management/commands/runserver.py&quot;, line 60, in execute</span><br><span class="line">    super().execute(*args, **options)</span><br><span class="line">  File &quot;/usr/local/lib/python3.5/dist-packages/django/core/management/base.py&quot;, line 364, in execute</span><br><span class="line">    output = self.handle(*args, **options)</span><br><span class="line">  File &quot;/home/ngmi/lightFreq-master/my_wifi_auth_server/django_pdb/management/commands/runserver.py&quot;, line 59, in handle</span><br><span class="line">    and middleware not in settings.MIDDLEWARE_CLASSES):</span><br><span class="line">  File &quot;/usr/local/lib/python3.5/dist-packages/django/conf/__init__.py&quot;, line 80, in __getattr__</span><br><span class="line">    val = getattr(self._wrapped, name)</span><br><span class="line">AttributeError: &apos;Settings&apos; object has no attribute &apos;MIDDLEWARE_CLASSES&apos;</span><br></pre></td></tr></table></figure><p><strong>解决方法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">middleware = <span class="string">'django_pdb.middleware.PdbMiddleware'</span></span><br><span class="line">        <span class="keyword">if</span> ((pdb_option <span class="keyword">or</span> settings.DEBUG)</span><br><span class="line">            <span class="keyword">and</span> middleware <span class="keyword">not</span> <span class="keyword">in</span> settings.MIDDLEWARE):</span><br><span class="line">            settings.MIDDLEWARE += (middleware,)</span><br></pre></td></tr></table></figure><p>由于Django版本的问题，需要将（lightFreq-master/my_wifi_auth_server/django_pdb/management/conmands/runserver.py）以上代码中原本的MIDDLEWARE_CLASSES改为MIDDLEWARE。</p><p><strong>问题：</strong></p><figure class="highlight plain"><figcaption><span>HTTP_HOST header: '0.0.0.0:8000'. You may need to add '0.0.0.0' to ALLOWED_HOSTS.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bad Request: /</span><br><span class="line">[09/Jul/2019 14:14:40] &quot;GET / HTTP/1.1&quot; 400 66219</span><br></pre></td></tr></table></figure><p>进入<a href="http://0.0.0.0:8000页面显示Invalid" target="_blank" rel="noopener">http://0.0.0.0:8000页面显示Invalid</a>…<br><br><strong>解决办法：</strong><br>将lightFreq-master/my_wifi_auth_server/Auth_server/settings.py文件中<code>ALLOWED_HOSTS = [&#39;192.168.1.162&#39;,&#39;127.0.0.1&#39;]</code>修改为<code>ALLOWED_HOSTS = [&#39;*&#39;]</code></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;基于可见光的无线网络认证&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="light-frequency-authenticate" scheme="http://yoursite.com/categories/light-frequency-authenticate/"/>
    
    
      <category term="lightFre" scheme="http://yoursite.com/tags/lightFre/"/>
    
  </entry>
  
  <entry>
    <title>perfect-quare-number</title>
    <link href="http://yoursite.com/2019/07/04/perfect-quare-number/"/>
    <id>http://yoursite.com/2019/07/04/perfect-quare-number/</id>
    <published>2019-07-04T09:48:04.000Z</published>
    <updated>2019-07-04T10:05:02.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">求一个数，加100和加268都是完全平方数<br>解决:unindent does not match any outer indentation level问题</blockquote><a id="more"></a><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</span><br><span class="line">x = int(math.sqrt(i + <span class="number">100</span>))</span><br><span class="line">y = int(math.sqrt(i + <span class="number">268</span>))</span><br><span class="line"><span class="keyword">if</span> (x * x == i + <span class="number">100</span>) <span class="keyword">and</span> (y * y == i + <span class="number">268</span>):</span><br><span class="line"><span class="keyword">print</span> (i)</span><br></pre></td></tr></table></figure><h2 id="error"><a href="#error" class="headerlink" title="error"></a>error</h2><p>unindent does not match any outer indentation level：Tab换行对齐和四个空格的对齐不能混用，混用会这样报错。</p><p>print i：正确应为 print (i)</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;求一个数，加100和加268都是完全平方数&lt;br&gt;解决:unindent does not match any outer indentation level问题
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python-100-practices" scheme="http://yoursite.com/categories/python-100-practices/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>四年又三年</title>
    <link href="http://yoursite.com/2019/07/03/%E5%9B%9B%E5%B9%B4%E5%8F%88%E4%B8%89%E5%B9%B4/"/>
    <id>http://yoursite.com/2019/07/03/四年又三年/</id>
    <published>2019-07-03T13:02:40.000Z</published>
    <updated>2019-07-03T14:16:44.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="writing" scheme="http://yoursite.com/categories/writing/"/>
    
    
  </entry>
  
  <entry>
    <title>十六岁不太友好的reminder</title>
    <link href="http://yoursite.com/2019/07/03/%E6%B5%AE%E7%94%9F%E8%8B%A5%E6%A2%A6/"/>
    <id>http://yoursite.com/2019/07/03/浮生若梦/</id>
    <published>2019-07-03T11:57:29.000Z</published>
    <updated>2019-07-03T14:25:30.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="writing" scheme="http://yoursite.com/categories/writing/"/>
    
    
  </entry>
  
</feed>
