<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>解字</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-07T04:03:43.915Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CHAsencenge</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>本地代码提交至git</title>
    <link href="http://yoursite.com/2019/11/20/%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E8%87%B3git/"/>
    <id>http://yoursite.com/2019/11/20/本地代码提交至git/</id>
    <published>2019-11-20T15:02:36.000Z</published>
    <updated>2020-07-07T04:03:43.915Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">本地更新如何提交至GitHub</blockquote><a id="more"></a><h3 id="for-first-use"><a href="#for-first-use" class="headerlink" title="for first use"></a>for first use</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git init   ***init .git***  </span><br><span class="line">git status   ***check files to be added to the local repository***  </span><br><span class="line">git add xxx  ***add files to repo***   </span><br><span class="line">git commit -m &quot;commit description&quot;  ***commit to repo***   </span><br><span class="line">git remote add origin git@github.com:mobinets/hyblora.git  ***link local repo to github***    </span><br><span class="line">git pull --rebase origin master  ***pull = fetch + merge***  </span><br><span class="line">git push -u origin master  ***upload***</span><br></pre></td></tr></table></figure><h3 id="not-first-use-repo"><a href="#not-first-use-repo" class="headerlink" title="not first use repo"></a>not first use repo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add xxx  </span><br><span class="line">git commit -m &quot;commit discription&quot;  </span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;本地更新如何提交至GitHub
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>ParticalFilter(粒子滤波算法)</title>
    <link href="http://yoursite.com/2019/09/23/ParticalFilter(%E7%B2%92%E5%AD%90%E6%BB%A4%E6%B3%A2%E7%AE%97%E6%B3%95)/"/>
    <id>http://yoursite.com/2019/09/23/ParticalFilter(粒子滤波算法)/</id>
    <published>2019-09-23T05:36:58.000Z</published>
    <updated>2020-07-07T04:04:58.469Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">粒子滤波算法</blockquote><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy <span class="keyword">as</span> scipy</span><br><span class="line"><span class="keyword">from</span> numpy.random <span class="keyword">import</span> uniform</span><br><span class="line"><span class="keyword">import</span> scipy.stats</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">np.set_printoptions(threshold=<span class="number">3</span>)</span><br><span class="line">np.set_printoptions(suppress=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawLines</span><span class="params">(img, points, r, g, b)</span>:</span></span><br><span class="line">    cv2.polylines(img, [np.int32(points)], isClosed=<span class="literal">False</span>, color=(r, g, b))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawCross</span><span class="params">(img, center, r, g, b)</span>:</span></span><br><span class="line">    d = <span class="number">5</span></span><br><span class="line">    t = <span class="number">2</span></span><br><span class="line">    LINE_AA = cv2.LINE_AA <span class="keyword">if</span> cv2.__version__[<span class="number">0</span>] == <span class="string">'3'</span> <span class="keyword">else</span> cv2.CV_AA</span><br><span class="line">    color = (r, g, b)</span><br><span class="line">    ctrx = center[<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    ctry = center[<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">    cv2.line(img, (ctrx - d, ctry - d), (ctrx + d, ctry + d), color, t, LINE_AA)</span><br><span class="line">    cv2.line(img, (ctrx + d, ctry - d), (ctrx - d, ctry + d), color, t, LINE_AA)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mouseCallback</span><span class="params">(event, x, y, flags,null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> center</span><br><span class="line">    <span class="keyword">global</span> trajectory</span><br><span class="line">    <span class="keyword">global</span> previous_x</span><br><span class="line">    <span class="keyword">global</span> previous_y</span><br><span class="line">    <span class="keyword">global</span> zs</span><br><span class="line">    </span><br><span class="line">    center=np.array([[x,y]])</span><br><span class="line">    trajectory=np.vstack((trajectory,np.array([x,y])))</span><br><span class="line">    <span class="comment">#noise=sensorSigma * np.random.randn(1,2) + sensorMu</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> previous_x &gt;<span class="number">0</span>:</span><br><span class="line">        heading=np.arctan2(np.array([y-previous_y]), np.array([previous_x-x ]))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> heading&gt;<span class="number">0</span>:</span><br><span class="line">            heading=-(heading-np.pi)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            heading=-(np.pi+heading)</span><br><span class="line">            </span><br><span class="line">        distance=np.linalg.norm(np.array([[previous_x,previous_y]])-np.array([[x,y]]) ,axis=<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        std=np.array([<span class="number">2</span>,<span class="number">4</span>])</span><br><span class="line">        u=np.array([heading,distance])</span><br><span class="line">        predict(particles, u, std, dt=<span class="number">1.</span>)</span><br><span class="line">        zs = (np.linalg.norm(landmarks - center, axis=<span class="number">1</span>) + (np.random.randn(NL) * sensor_std_err))</span><br><span class="line">        update(particles, weights, z=zs, R=<span class="number">50</span>, landmarks=landmarks)</span><br><span class="line">        </span><br><span class="line">        indexes = systematic_resample(weights)</span><br><span class="line">        resample_from_index(particles, weights, indexes)</span><br><span class="line"></span><br><span class="line">    previous_x=x</span><br><span class="line">    previous_y=y</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WIDTH=<span class="number">800</span></span><br><span class="line">HEIGHT=<span class="number">600</span></span><br><span class="line">WINDOW_NAME=<span class="string">"Particle Filter"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sensorMu=0</span></span><br><span class="line"><span class="comment">#sensorSigma=3</span></span><br><span class="line"></span><br><span class="line">sensor_std_err=<span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_uniform_particles</span><span class="params">(x_range, y_range, N)</span>:</span></span><br><span class="line">    particles = np.empty((N, <span class="number">2</span>))</span><br><span class="line">    particles[:, <span class="number">0</span>] = uniform(x_range[<span class="number">0</span>], x_range[<span class="number">1</span>], size=N)</span><br><span class="line">    particles[:, <span class="number">1</span>] = uniform(y_range[<span class="number">0</span>], y_range[<span class="number">1</span>], size=N)</span><br><span class="line">    <span class="keyword">return</span> particles</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(particles, u, std, dt=<span class="number">1.</span>)</span>:</span></span><br><span class="line">    N = len(particles)</span><br><span class="line">    dist = (u[<span class="number">1</span>] * dt) + (np.random.randn(N) * std[<span class="number">1</span>])</span><br><span class="line">    particles[:, <span class="number">0</span>] += np.cos(u[<span class="number">0</span>]) * dist</span><br><span class="line">    particles[:, <span class="number">1</span>] += np.sin(u[<span class="number">0</span>]) * dist</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(particles, weights, z, R, landmarks)</span>:</span></span><br><span class="line">    weights.fill(<span class="number">1.</span>)</span><br><span class="line">    <span class="keyword">for</span> i, landmark <span class="keyword">in</span> enumerate(landmarks):</span><br><span class="line">       </span><br><span class="line">        distance=np.power((particles[:,<span class="number">0</span>] - landmark[<span class="number">0</span>])**<span class="number">2</span> +(particles[:,<span class="number">1</span>] - landmark[<span class="number">1</span>])**<span class="number">2</span>,<span class="number">0.5</span>)</span><br><span class="line">        weights *= scipy.stats.norm(distance, R).pdf(z[i])</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    weights += <span class="number">1.e-300</span> <span class="comment"># avoid round-off to zero</span></span><br><span class="line">    weights /= sum(weights)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">neff</span><span class="params">(weights)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.</span> / np.sum(np.square(weights))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">systematic_resample</span><span class="params">(weights)</span>:</span></span><br><span class="line">    N = len(weights)</span><br><span class="line">    positions = (np.arange(N) + np.random.random()) / N</span><br><span class="line"></span><br><span class="line">    indexes = np.zeros(N, <span class="string">'i'</span>)</span><br><span class="line">    cumulative_sum = np.cumsum(weights)</span><br><span class="line">    i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; N <span class="keyword">and</span> j&lt;N:</span><br><span class="line">        <span class="keyword">if</span> positions[i] &lt; cumulative_sum[j]:</span><br><span class="line">            indexes[i] = j</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> indexes</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">estimate</span><span class="params">(particles, weights)</span>:</span></span><br><span class="line">    pos = particles[:, <span class="number">0</span>:<span class="number">1</span>]</span><br><span class="line">    mean = np.average(pos, weights=weights, axis=<span class="number">0</span>)</span><br><span class="line">    var = np.average((pos - mean)**<span class="number">2</span>, weights=weights, axis=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> mean, var</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resample_from_index</span><span class="params">(particles, weights, indexes)</span>:</span></span><br><span class="line">    particles[:] = particles[indexes]</span><br><span class="line">    weights[:] = weights[indexes]</span><br><span class="line">    weights /= np.sum(weights)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">x_range=np.array([<span class="number">0</span>,<span class="number">800</span>])</span><br><span class="line">y_range=np.array([<span class="number">0</span>,<span class="number">600</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#Number of partciles</span></span><br><span class="line">N=<span class="number">400</span></span><br><span class="line"></span><br><span class="line">landmarks=np.array([ [<span class="number">144</span>,<span class="number">73</span>], [<span class="number">410</span>,<span class="number">13</span>], [<span class="number">336</span>,<span class="number">175</span>], [<span class="number">718</span>,<span class="number">159</span>], [<span class="number">178</span>,<span class="number">484</span>], [<span class="number">665</span>,<span class="number">464</span>]  ])</span><br><span class="line">NL = len(landmarks)</span><br><span class="line">particles=create_uniform_particles(x_range, y_range, N)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">weights = np.array([<span class="number">1.0</span>]*N)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a black image, a window and bind the function to window</span></span><br><span class="line">img = np.zeros((HEIGHT,WIDTH,<span class="number">3</span>), np.uint8)</span><br><span class="line">cv2.namedWindow(WINDOW_NAME)</span><br><span class="line">cv2.setMouseCallback(WINDOW_NAME,mouseCallback)</span><br><span class="line"></span><br><span class="line">center=np.array([[<span class="number">-10</span>,<span class="number">-10</span>]])</span><br><span class="line"></span><br><span class="line">trajectory=np.zeros(shape=(<span class="number">0</span>,<span class="number">2</span>))</span><br><span class="line">robot_pos=np.zeros(shape=(<span class="number">0</span>,<span class="number">2</span>))</span><br><span class="line">previous_x=<span class="number">-1</span></span><br><span class="line">previous_y=<span class="number">-1</span></span><br><span class="line">DELAY_MSEC=<span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">    cv2.imshow(WINDOW_NAME,img)</span><br><span class="line">    img = np.zeros((HEIGHT,WIDTH,<span class="number">3</span>), np.uint8)</span><br><span class="line">    drawLines(img, trajectory,   <span class="number">0</span>,   <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">    drawCross(img, center, r=<span class="number">255</span>, g=<span class="number">0</span>, b=<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#landmarks</span></span><br><span class="line">    <span class="keyword">for</span> landmark <span class="keyword">in</span> landmarks:</span><br><span class="line">        cv2.circle(img,tuple(landmark),<span class="number">10</span>,(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),<span class="number">-1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#draw_particles:</span></span><br><span class="line">    <span class="keyword">for</span> particle <span class="keyword">in</span> particles:</span><br><span class="line">        cv2.circle(img,tuple((int(particle[<span class="number">0</span>]),int(particle[<span class="number">1</span>]))),<span class="number">1</span>,(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>),<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(DELAY_MSEC) &amp; <span class="number">0xFF</span> == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    cv2.circle(img,(<span class="number">10</span>,<span class="number">10</span>),<span class="number">10</span>,(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),<span class="number">-1</span>)</span><br><span class="line">    cv2.circle(img,(<span class="number">10</span>,<span class="number">30</span>),<span class="number">3</span>,(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>),<span class="number">-1</span>)</span><br><span class="line">    cv2.putText(img,<span class="string">"Landmarks"</span>,(<span class="number">30</span>,<span class="number">20</span>),<span class="number">1</span>,<span class="number">1.0</span>,(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">    cv2.putText(img,<span class="string">"Particles"</span>,(<span class="number">30</span>,<span class="number">40</span>),<span class="number">1</span>,<span class="number">1.0</span>,(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line">    cv2.putText(img,<span class="string">"Robot Trajectory(Ground truth)"</span>,(<span class="number">30</span>,<span class="number">60</span>),<span class="number">1</span>,<span class="number">1.0</span>,(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    drawLines(img, np.array([[<span class="number">10</span>,<span class="number">55</span>],[<span class="number">25</span>,<span class="number">55</span>]]), <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="如何安装依赖并运行"><a href="#如何安装依赖并运行" class="headerlink" title="如何安装依赖并运行"></a>如何安装依赖并运行</h2><p>打开anaconda prompt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda create -n Filters python=3</span><br><span class="line">conda activate Filters</span><br><span class="line">conda install -c menpo opencv3</span><br><span class="line">conda install numpy scipy matplotlib sympy</span><br></pre></td></tr></table></figure><p>cd python_code<br>python partical.py<br>python partical_v2.py</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;粒子滤波算法&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hexo发布</title>
    <link href="http://yoursite.com/2019/09/14/Hexo%E5%8F%91%E5%B8%83/"/>
    <id>http://yoursite.com/2019/09/14/Hexo发布/</id>
    <published>2019-09-14T15:52:50.000Z</published>
    <updated>2020-07-07T06:13:42.138Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">如何发布Hexo博客</blockquote><a id="more"></a><p>hexo文件夹中，git bash here</p><p>hexo new ‘’</p><p>hexo clean</p><p>hexo g</p><p>hexo d</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;如何发布Hexo博客&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Python---yield关键字</title>
    <link href="http://yoursite.com/2019/07/25/Python%E7%9A%84yield%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://yoursite.com/2019/07/25/Python的yield关键字/</id>
    <published>2019-07-25T06:59:22.000Z</published>
    <updated>2020-07-07T03:59:33.769Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">python中yield关键字的用法</blockquote><a id="more"></a><h2 id="迭代-iteration-与可迭代-iterable"><a href="#迭代-iteration-与可迭代-iterable" class="headerlink" title="迭代(iteration)与可迭代(iterable)"></a>迭代(iteration)与可迭代(iterable)</h2><p>使用<strong>容器</strong>时逐个获取元素的过程为<strong>迭代</strong>。</p><h2 id="哪些类型是可迭代的"><a href="#哪些类型是可迭代的" class="headerlink" title="哪些类型是可迭代的"></a>哪些类型是可迭代的</h2><ul><li>python中的顺序类型： <code>list</code>, <code>tuple</code>(元组，列表可修改元组不可修改，列表用中括号元组用小括号), <code>string</code>.</li><li><code>dict</code>, <code>set</code>, <code>file</code>.</li><li>某类对象提供了 <code>__iter__()</code> 或者 <code>__getitem__()</code> 方法.</li></ul><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>对迭代器不断调用<code>next()</code>方法，可依次获取下一个元素，迭代器<code>__iter__()</code>方法返回迭代器自身，因此迭代器也是可迭代的。</p><h2 id="迭代器协议-iterator-protocol"><a href="#迭代器协议-iterator-protocol" class="headerlink" title="迭代器协议(iterator protocol)"></a>迭代器协议(iterator protocol)</h2><p>一个容器提供<code>__iter__()</code>方法，该方法能返回一个能逐个访问容器内所有元素的迭代器，则该容器实现了迭代器协议。</p><h3 id="python处理for循环的过程"><a href="#python处理for循环的过程" class="headerlink" title="python处理for循环的过程"></a>python处理for循环的过程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> something:</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><p>处理for循环首先调用内建函数<code>iter(something)</code>,内建函数调用<code>something.__iter__()</code>,返回something对应的迭代器，然后for循环会调用内建函数<code>next()</code>，作用在迭代器上获取迭代器的下一个元素，并赋值给x</p><h2 id="生成器函数-generaor-function-和生成器-generator"><a href="#生成器函数-generaor-function-和生成器-generator" class="headerlink" title="生成器函数(generaor function)和生成器(generator)"></a>生成器函数(generaor function)和生成器(generator)</h2><p>如果一个函数包含 yield 表达式，那么它是一个生成器函数；调用它会返回一个特殊的迭代器，称为生成器。</p><p>生成器函数被调用后，其函数体内的代码并不会立即执行，而是返回一个生成器（generator-iterator）。当返回的生成器调用成员方法时，相应的生成器函数中的代码才会执行。</p><h2 id="“下一个yield表达式”"><a href="#“下一个yield表达式”" class="headerlink" title="“下一个yield表达式”"></a>“下一个yield表达式”</h2><p>调用 generator.next() 时，生成器函数会从当前位置开始执行到下一个 yield 表达式。这里的「下一个」指的是执行逻辑的下一个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f123</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> f123(): <span class="comment"># 1, 2, and 3, will be printed</span></span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f13</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">False</span>:</span><br><span class="line">        <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> f13(): <span class="comment"># 1 and 3, will be printed</span></span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><h3 id="使用-send-方法与生成器函数通信"><a href="#使用-send-方法与生成器函数通信" class="headerlink" title="使用 send() 方法与生成器函数通信"></a>使用 send() 方法与生成器函数通信</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        y = (<span class="keyword">yield</span> x)</span><br><span class="line">        x += y</span><br><span class="line"></span><br><span class="line">geniter = func()</span><br><span class="line">geniter.next()  <span class="comment"># 1</span></span><br><span class="line">geniter.send(<span class="number">3</span>) <span class="comment"># 4</span></span><br><span class="line">geniter.send(<span class="number">10</span>)<span class="comment"># 14</span></span><br></pre></td></tr></table></figure><p>生成器函数 func 用 yield 表达式，将处理好的 x 发送给生成器的调用者；与此同时，生成器的调用者通过 send 函数，将外部信息作为生成器函数内部的 yield 表达式的值，保存在 y 当中，并参与后续的处理。</p><h2 id="yield的好处"><a href="#yield的好处" class="headerlink" title="yield的好处"></a>yield的好处</h2><p>顺序访问容器内的前五个元素：</p><ul><li>way1:获取所有元素然后取前五</li><li>way2:逐个迭代，至第五个元素</li></ul><p>假设对于一个func(),返回值为列表，调用者对其返回值只有逐个迭代：</p><ul><li>若等函数生成所有元素可能需要很长时间</li><li>使用yield把func()变成一个生成器函数，每次产生一个元素，可以节省开销</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;python中yield关键字的用法
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Gradle相关知识(转载自Bonker)</title>
    <link href="http://yoursite.com/2019/07/18/Gradle%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86(%E8%BD%AC%E8%BD%BD%E8%87%AABonker)/"/>
    <id>http://yoursite.com/2019/07/18/Gradle相关知识(转载自Bonker)/</id>
    <published>2019-07-18T08:38:29.000Z</published>
    <updated>2020-07-07T06:13:05.470Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">关于Android开发中的Gradle</blockquote><a id="more"></a><p>(转载自Bonker）原文链接：<a href="https://www.cnblogs.com/Bonker/p/5619458.html" target="_blank" rel="noopener">https://www.cnblogs.com/Bonker/p/5619458.html</a></p><h2 id="什么是Gradle"><a href="#什么是Gradle" class="headerlink" title="什么是Gradle"></a>什么是Gradle</h2><p>简单的说，Gradle是一个构建工具，它是用来帮助我们构建app的，构建包括编译、打包等过程。我们可以为Gradle指定构建规则，然后它就会根据我们的“命令”自动为我们构建app。Android Studio中默认就使用Gradle来完成应用的构建。有些同学可能会有疑问：”我用AS不记得给Gradle指定过什么构建规则呀，最后不还是能搞出来个apk。“ 实际上，app的构建过程是大同小异的，有一些过程是”通用“的，也就是每个app的构建都要经历一些公共步骤。因此，在我们在创建工程时，Android Studio自动帮我们生成了一些通用构建规则，很多时候我们甚至完全不用修改这些规则就能完成我们app的构建。</p><p>有些时候，我们会有一些个性化的构建需求，比如我们引入了第三方库，或者我们想要在通用构建过程中做一些其他的事情，这时我们就要自己在系统默认构建规则上做一些修改。这时候我们就要自己向Gradle”下命令“了，这时候我们就需要用Gradle能听懂的话了，也就是Groovy。Groovy是一种基于JVM的动态语言，关于它的具体介绍，感兴趣的同学可以文末参考”延伸阅读“部分给出的链接。</p><p>我们在开头处提到“Gradle是一种构建工具”。实际上，当我们想要更灵活的构建过程时，Gradle就成为了一个编程框架——我们可以通过编程让构建过程按我们的意愿进行。也就是说，当我们把Gradle作为构建工具使用时，我们只需要掌握它的配置脚本的基本写法就OK了；而当我们需要对构建流程进行高度定制时，就务必要掌握Groovy等相关知识了。限于篇幅，本文只从构建工具使用者的角度来介绍Gradle的一些最佳实践，在文末“延伸阅读”部分给出了几篇高质量的深入介绍Gradle的文章，其中包含了Groovy等知识的介绍。</p><h2 id="Gradle的基本组分"><a href="#Gradle的基本组分" class="headerlink" title="Gradle的基本组分"></a>Gradle的基本组分</h2><h3 id="Project与Task"><a href="#Project与Task" class="headerlink" title="Project与Task"></a>Project与Task</h3><p>在Gradle中，每一个待构建的工程是一个Project，构建一个Project需要执行一系列Task，比如编译、打包这些构建过程的子过程都对应着一个Task。具体来说，一个apk文件的构建包含以下Task：Java源码编译、资源文件编译、Lint检查、打包以生成最终的apk文件等等。</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>插件的核心工作有两个：一是定义Task；而是执行Task。也就是说，我们想让Gradle能正常工作，完成整个构建流程中的一系列Task的执行，必须导入合适的插件，这些插件中定义了构建Project中的一系列Task，并且负责执行相应的Task。</p><p>在新建工程的app模块的build.gradle文件的第一行，往往都是如下这句：</p><p>apply plugin: ‘com.android.application’<br>这句话的意思就是应用“com.android.application“这个插件来构建app模块，app模块就是Gradle中的一个Project。也就是说，这个插件负责定义并执行Java源码编译、资源文件编译、打包等一系列Task。实际上”com.android.application”整个插件中定义了如下4个顶级任务：</p><p>assemble: 构建项目的输出（apk）</p><p>check: 进行校验工作</p><p>build: 执行assemble任务与check任务</p><p>clean: 清除项目的输出</p><p>当我们执行一个任务时，会自动执行它所依赖的任务。比如，执行assemble任务会执行assembleDebug任务和assembleRelease任务，这是因为一个Android项目至少要有debug和release这两个版本的输出。</p><h3 id="Gradle配置文件"><a href="#Gradle配置文件" class="headerlink" title="Gradle配置文件"></a>Gradle配置文件</h3><p>我们在Android Studio中新建一个工程，可以得到如下的工程结构图：</p><p>上面我们说过，Android Studio中的一个Module即为Gradle中的一个Project。上图的app目录下，存在一个build.gradle文件，代表了app Module的构建脚本，它定义了应用于本模块的构建规则。我们可以看到，工程根目录下也存在一个build.gradle文件，它代表了整个工程的构建，其中定义了适用于这个工程中所有模块的构建规则。</p><p>接下来我们介绍一下上图中其他几个Gradle配置文件：</p><p>gradle.properties: 从它的名字可以看出，这个文件中定义了一系列“属性”。实际上，这个文件中定义了一系列供build.gradle使用的常量，比如keystore的存储路径、keyalias等等。</p><p>gradlew与gradlew.bat: gradlew为Linux下的shell脚本，gradlew.bat是Windows下的批处理文件。gradlew是gradle wrapper的缩写，也就是说它对gradle的命令进行了包装，比如我们进入到指定Module目录并执行“gradlew.bat assemble”即可完成对当前Module的构建（Windows系统下）。</p><p>local.properties: 从名字就可以看出来，这个文件中定义了一些本地属性，比如SDK的路径。</p><p>settings.gradle: 假如我们的项目包含了不只一个Module时，我们想要一次性构建所有Module以完成整个项目的构建，这时我们需要用到这个文件。比如我们的项目包含了ModuleA和ModuleB这两个模块，则这个文件中会包含这样的语句：include ‘:ModuleA’, ‘:ModuleB’。</p><h3 id="构建脚本"><a href="#构建脚本" class="headerlink" title="构建脚本"></a>构建脚本</h3><p>首先我们来看一下工程目录下的build.gradle，它指定了真个整个项目的构建规则，它的内容如下：</p><figure class="highlight plain"><figcaption><span>&#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    repositories &#123;</span><br><span class="line">        jcenter() //构建脚本中所依赖的库都在jcenter仓库下载</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        //指定了gradle插件的版本</span><br><span class="line">        classpath &apos;com.android.tools.build:gradle:1.5.0&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        //当前项目所有模块所依赖的库都在jcenter仓库下载</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再来简单介绍下app模块的build.gradle的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//加载用于构建Android项目的插件</span><br><span class="line">apply plugin: &apos;com.android.application&apos;</span><br><span class="line"></span><br><span class="line">android &#123; //构建Android项目使用的配置</span><br><span class="line">    compileSdkVersion 23 //指定编译项目时使用的SDK版本</span><br><span class="line">    buildToolsVersion &quot;23.0.1&quot; //指定构建工具的版本</span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId &quot;com.absfree.debugframwork&quot; //包名</span><br><span class="line">        minSdkVersion 15  //指定支持的最小SDK版本</span><br><span class="line">        targetSdkVersion 23 //针对的目标SDK版本</span><br><span class="line">        versionCode 1 </span><br><span class="line">        versionName &quot;1.0&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123; //针对不同的构建版本进行一些设置</span><br><span class="line">        release &#123; //对release版本进行的设置</span><br><span class="line">            minifyEnabled false //是否开启混淆</span><br><span class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;  //指定混淆文件的位置</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123; //指定当前模块的依赖</span><br><span class="line">    compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])</span><br><span class="line">    testCompile &apos;junit:junit:4.12&apos;</span><br><span class="line">    compile &apos;com.android.support:appcompat-v7:23.1.1&apos;</span><br><span class="line">    compile &apos;com.android.support:design:23.1.1&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常见配置"><a href="#常见配置" class="headerlink" title="常见配置"></a>常见配置</h2><p>整个工程的build.gradle通常不需我们改动，这里我们介绍下一些对模块目录下build.gradle文件的常见配置。</p><h3 id="依赖第三方库"><a href="#依赖第三方库" class="headerlink" title="依赖第三方库"></a>依赖第三方库</h3><p>当我们的项目中用到了了一些第三方库时，我们就需要进行一些配置，以保证能正确导入相关依赖。设置方法很简单，比如我们在app模块中中用到了Fresco，只需要在build.gradle文件中的dependencies块添加如下语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    compile &apos;com.facebook.fresco:fresco:0.11.0&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来，Gradle会自动从jcenter仓库下载我们所需的第三方库并导入到项目中。</p><h3 id="导入本地jar包"><a href="#导入本地jar包" class="headerlink" title="导入本地jar包"></a>导入本地jar包</h3><p>在使用第三方库时，除了像上面那样从jcenter仓库下载，我们还可以导入本地的jar包。配置方法也很简单，只需要先把jar文件添加到app\libs目录下，然后在相应jar文件上单击右键，选择“Ad As Library”。然后在build.gradle的dependencies块下添加如下语句：</p><p>compile files(‘libs/xxx.jar’)<br>实际上我们可以看到，系统为我们创建的build.gradle中就已经包含了如下语句：</p><p>compile fileTree(dir: ‘libs’, include: [‘*.jar’])</p><p>这句话的意思是，将libs目录下的所有jar包都导入。所以实际上我们只需要把jar包添加到libs目录下并“Ad As Library”即可。</p><h3 id="依赖其它模块"><a href="#依赖其它模块" class="headerlink" title="依赖其它模块"></a>依赖其它模块</h3><p>假设我们的项目包含了多个模块，并且app模块依赖other模块，那么我们只需app\build.gradle的denpendencies块下添加如下语句：</p><p>compile project(‘:other’)</p><h3 id="构建输出为aar文件"><a href="#构建输出为aar文件" class="headerlink" title="构建输出为aar文件"></a>构建输出为aar文件</h3><p>通常我们构建的输出目标都是apk文件，但如果我们的当前项目时Android Library，我们的目标输出就是aar文件。要想达到这个目的也很容易，只需要把build.gradle的第一句改为如下：</p><p>apply plugin:’com.android.library’<br>这话表示我们使用的插件不再是构建Android应用的插件，而是构建Android Library的插件，这个插件定义并执行用于构建Android Library的一系列Task。</p><h3 id="自动移除不再使用的资源"><a href="#自动移除不再使用的资源" class="headerlink" title="自动移除不再使用的资源"></a>自动移除不再使用的资源</h3><p>只需进行如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            ...</span><br><span class="line">            shrinkResources true</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="忽略Lint错误"><a href="#忽略Lint错误" class="headerlink" title="忽略Lint错误"></a>忽略Lint错误</h3><p>在我们构建Android项目的过程中，有时候会由于Lint错误而终止。当这些错误来自第三方库中时，我们往往想要忽略这些错误从而继续构建进程。这时候，我们可以只需进行如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    lintOptions &#123;</span><br><span class="line">        abortOnError false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="集成签名配置"><a href="#集成签名配置" class="headerlink" title="集成签名配置"></a>集成签名配置</h3><p>在构建release版本的Android项目时，每次都手动导入签名文件，键入密码、keyalias等信息十分麻烦。通过将签名配置集成到构建脚本中，我们就不必每次构建发行版本时都手动设置了。具体配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">signingConfigs &#123;</span><br><span class="line">    myConfig &#123; //将&quot;xx&quot;替换为自己的签名文件信息</span><br><span class="line">        storeFile file(&quot;xx.jks&quot;)</span><br><span class="line">        storePassword &quot;xx&quot;</span><br><span class="line">        keyAlias &quot;xx&quot;</span><br><span class="line">        keyPassword &quot;xx&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">android &#123;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            signingConfig  signingConfigs.myConfig //在release块中加入这行</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真实开发中，我们不应该把密码等信息直接写到build.gradle中，更好的做法是放在gradle.properties中设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RELEASE_STOREFILE=xxx.jks </span><br><span class="line">RELEASE_STORE_PASSWORD = xxx</span><br><span class="line">RELEASE_KEY_ALIAS=xxx</span><br><span class="line">RELEASE_KEY_PASSWORD=xxx</span><br></pre></td></tr></table></figure><p>然后在build.gradle中直接引用即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">signingConfigs &#123;</span><br><span class="line">    myConfig &#123; </span><br><span class="line">        storeFilefile(RELEASE_STOREFILE)</span><br><span class="line">        storePassword RELEASE_STORE_PASSWORD</span><br><span class="line">        keyAlias RELEASE_KEY_ALIAS</span><br><span class="line">        keyPassword RELEASE_KEY_PASSWORD </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于Gradle的其他配置方法大家可以参考“延伸阅读”部分的“Gradle最佳实践”。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;关于Android开发中的Gradle&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Gradle" scheme="http://yoursite.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Linux远程登录及服务器配置</title>
    <link href="http://yoursite.com/2019/07/17/Linux%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/"/>
    <id>http://yoursite.com/2019/07/17/Linux远程登录/</id>
    <published>2019-07-17T13:45:43.000Z</published>
    <updated>2020-07-07T03:58:51.303Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">Linux远程登录及服务器配置</blockquote><a id="more"></a><p>##Linux远程登录原理<br>安装telnet远程客户端登录工具的客户机通过23（默认）端口连接到Linux服务器，通过telnet将远程客户机上命令传到服务器执行并反馈。<br>###telnet软件包安装<br><code>sudo apt-get install inetutils-telnetd</code>(ubuntu没有默认安装Telnet软件包)</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;Linux远程登录及服务器配置&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="远程登录" scheme="http://yoursite.com/tags/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>usr-key</title>
    <link href="http://yoursite.com/2019/07/17/UsrKey/"/>
    <id>http://yoursite.com/2019/07/17/UsrKey/</id>
    <published>2019-07-17T07:33:59.000Z</published>
    <updated>2020-07-07T01:13:58.953Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX18tWdSSRzU4WXxFrXWO3uj5Ny3Hy/3Eci3wQKr24qHRUUTDerW4wcDTCK0mMK8WXjNJgLnyFD3RCUu+uKP6ySrppb7YmEGlsINfFXncpkmlRiBQT+QLn1owtRRAsAcYuZCKjDN7Rx4MvX8zpVqhrOAZwSvcryvTdTnSdMwWX9qnihO2LrsRZ39EsXdkt+pmnYQc9jwaWPCHUrOaLCaIqakGteRiRc+qMf7muqAzzGfnRnZEAsjFMSSdO1i7am0+jP6S0SLXd4HNHlFhG9eBUyumsig3ldqFcHBLAVwLUJ7R4h9cobQb3knLzONj3Kvak13Eglhxsmcq0e6XBQfiuS73wu4WJx4+Suyj9d1TkSPboOGzPeqn1OmCW6CVmLG7loSDUWynF6lM3cMge0zuT1injJammUZA4JEb2X54CihA/KPhre00oUAnnjQVrdSPcQX2xWv3dKFsAqHfaGstEZX0+g9+WJqH1mnwr3yOZyZEmihzBUMGeHbW415Avtvs2GK5lWZDB+y13g6k0yA4QTxcRQsczDo91Jrm42xUZYF8j6gCnVFDxsFIvoYzWSEW/6V8TgrXhb4nJlU7DidUAP9sidU/JtcsY5449pX7UcAN+e1SlbszJzpeVcdI4FYyord/M6WVEM7+eYDlwq6ZtjmzPCfO4LqBebRjnlgLaMJdxmz2BScobFmkb9KrObPgU7TMXhskhGdapOkG25k+JoYG03H6crwqnr+mB9q0oy7V668MxNAaT8cS2S/GurYdRjEvuhvsyGSwBbc3b9XyeJwX9krNGBEV+t5skrIp3IbdVD9Panor+Cx5b/s8dUer6U7OFykBx4izwAYdQsoHu8CeVFxlyxOMFwe4R6cecr3OBvIf9HE36io4Gwvvmw/vGCw4X7q63erC0P9SLGntInPFcSKi3g9tfwfFXvLtg745V2zcnlCZ3e10vwTyhbLKcOVnfI+0H+9tb3FYQ0H7c8icyL15S7rc77jpxuCXdyIAJ1oPsPlGUOg3CT1i4kFM2pQCyA2na2Kcf0gx0mIBa/pDyHtzm1jI5TOgLM/pDoOYiPadPJGEfQBw3F+VgC5EESU18QwYF6OHo0mxgzMxBEqwIFgNdyFtd3MFzRFSqNZUWqlt2qNnjj2Vu2AtMAcJzz9zyVinyYtAQI6GkuAgyX5wBspjf/tyPSJG/blUWjkDRAQOfj1idvOvV8MNBLC7U6g28DbQ23RONtaF8Ix8Z9S+82+aDQ3UUVpdvoID0+981TgVH7yx1DSYBAQVivmaysUEsiSZJuMMUsn6/o4ykqcLvFyn2SxTUnssTxpNb3m8xYWYfEmrmw4vf8fbcssb5MdPHRofZOQRanPgE9ivvmXnWMjqHytXfgHBp2RPKqEMpFAsqczUre3Sl4hrwYNfUpWVE8LgemPoOuhXXzFRblJaCsGrcW9cdvVSa36DH+QBAoJlRu28ccNG3RREKmdHKJlIhHhZ5dQ8+WhDn59EPNwnTgSQpESXTELpjNUZlEijUtDv7mDogYRPowbM/wIUvLJaOXamQqMqaTNqbHxkb1TnSrSoGR/Mxreue9RTXt9c2yKUtrRzyqFlzHbMHs3H7XMkfdpsPohdim3HbB0Gr1wlOdXJE0tstJg=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="key" scheme="http://yoursite.com/categories/key/"/>
    
    
  </entry>
  
  <entry>
    <title>可见光认证相关</title>
    <link href="http://yoursite.com/2019/07/05/%E5%8F%AF%E8%A7%81%E5%85%89%E8%AE%A4%E8%AF%81/"/>
    <id>http://yoursite.com/2019/07/05/可见光认证/</id>
    <published>2019-07-05T03:09:43.000Z</published>
    <updated>2020-07-07T04:06:45.767Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">基于可见光的无线网络认证</blockquote><a id="more"></a><p>2019-07-05</p><h2 id="802-1x认证过程："><a href="#802-1x认证过程：" class="headerlink" title="802.1x认证过程："></a>802.1x认证过程：</h2><ol><li><p>当用户有访问网络需求时打开802.1X客户端程序，输入已经申请、登记过的用户名和密码，发起连接请求（EAPOL-Start报文）。此时，客户端程序将发出请求认证的报文给设备端，开始启动一次认证过程。</p></li><li><p>设备端收到请求认证的数据帧后，将发出一个请求帧（EAP-Request/Identity报文）要求用户的客户端程序发送输入的用户名。</p></li><li><p>客户端程序响应设备端发出的请求，将用户名信息通过数据帧（EAP-Response/Identity报文）发送给设备端。设备端将客户端发送的数据帧经过封包处理后（RADIUS Access-Request报文）送给认证服务器进行处理。</p></li><li><p>RADIUS服务器收到设备端转发的用户名信息后，将该信息与数据库中的用户名表对比，找到该用户名对应的密码信息，用随机生成的一个加密字对它进行加密处理，同时也将此加密字通过RADIUS Access-Challenge报文发送给设备端，由设备端转发给客户端程序。</p></li><li><p>客户端程序收到由设备端传来的加密字（EAP-Request/MD5 Challenge报文）后，用该加密字对密码部分进行加密处理（此种加密算法通常是不可逆的），生成EAP-Response/MD5 Challenge报文，并通过设备端传给认证服务器。</p></li><li><p>RADIUS服务器将收到的已加密的密码信息（RADIUS Access-Request报文）和本地经过加密运算后的密码信息进行对比，如果相同，则认为该用户为合法用户，反馈认证通过的消息（RADIUS Access-Accept报文和EAP-Success报文）。</p></li><li><p>设备收到认证通过消息后将端口改为授权状态，允许用户通过端口访问网络。在此期间，设备端会通过向客户端定期发送握手报文的方法，对用户的在线情况进行监测。缺省情况下，两次握手请求报文都得不到客户端应答，设备端就会让用户下线，防止用户因为异常原因下线而设备无法感知。</p></li><li><p>客户端也可以发送EAPOL-Logoff报文给设备端，主动要求下线。设备端把端口状态从授权状态改变成未授权状态，并向客户端发送EAP-Failure报文。</p></li></ol><h2 id="关于WiFidog："><a href="#关于WiFidog：" class="headerlink" title="关于WiFidog："></a>关于WiFidog：</h2><p>Portal认证，通常也会叫Web认证，未认证用户上网时，设备强制用户登录到特定站点，用户可以免费访问其中的服务。当用户需要使用互联网中的其它信息时，必须在门户网站进行认证，只有认证通过后才可以使用互联网资源。现金很多中国移动CMCC、中国联通、中国电信ChinaNet的WIFI都使用这种认证接入方式。</p><p>在OpenWRT上实现Portal认证，实际上早已有解决方案：</p><ol><li><p>chillispot，但原维护作者停止更新，被chillispot.info接管继续开发；</p></li><li><p>coova-chilli，它是基于chillispot开发拓展的，功能最为强大；可以去官方看一下Coova-chilli；</p></li><li><p><strong>wifidog</strong>，前两个由于原维护作者停止更新，笔者也没有深入研究，重点钻研了wifidog，Wifidog也是OpenWRT和DD-WRT中实现Portal比较出名的。但是，Wifidog只是实现AP认证网关，需要配合外部的Portal服务器才能使用，Portal主要是提供认证所需的WEB页面且实现认证计费等的功能。虽然这也有很多商用解决方案，例如wiwiz、wifiap等，但是这些商业解决方案的目标都是盈利，即使可以免费使用，免费账号的功能和权限都受到了很大的限制，例如不能自定义页面，Web认证页面有广告等等。有条件的人可能打算自己搭建Portal服务器，但是看看Wifidog的官方Wiki，对搭建过程实在是难以理解。后来，笔者发现网络上还有一个 <strong>authpuppy方案</strong> ，官方网站 <strong><a href="http://www.authpuppy.org" target="_blank" rel="noopener">www.authpuppy.org</a></strong> ，是一个已实现好的Wifidog认证服务器，里面包含各种插件供你使用，官方的安装过程也很简单，如果你懂的HTML和面向对象编程的相关知识且拥有一个服务器，可以自行修改认证页面，使用authpuppy也是一个不错的方案。</p></li><li><p>如何 <strong>自行编写一个轻量级的Web Portal认证服务器</strong> ：</p><ul><li><h3 id="Wifidog的工作原理："><a href="#Wifidog的工作原理：" class="headerlink" title="Wifidog的工作原理："></a>Wifidog的工作原理：</h3><ol><li><p>客户端发出初始化请求，比如访问 <a href="http://www.dqrun.com" target="_blank" rel="noopener">www.dqrun.com</a> 。</p></li><li><p>网关的防火墙规则将这个请求重定向到本地网关的端口上。这个端口是Wifidog监听的端口。</p></li><li><p>Wfidog提供一个HTTP重定向回复，重定向到Web认证页面，重定向的Url的Querystring中包含了Gateway的ID，Gateway的FQDN以及其他的信息。</p></li><li><p>用户向认证服务器发出认证请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gw_id=[GatewayID, default: “default”]</span><br><span class="line">gw_address=[GatewayAddress, internal IP of router]</span><br><span class="line">gw_port=[GatewayPort, port that wifidog Gateway is listening on]</span><br><span class="line">url=[user requested url]；</span><br></pre></td></tr></table></figure></li><li><p>网关返回一个（可以是自定义的）splash（也称作“登录”）页面。</p></li><li><p>用户提供他的凭据信息，比如用户名和密码。</p></li><li><p>成功认证的话，客户端将会被重定向到网关的自己的web页面上，并且带有一个认证凭据（一个一次性的token），内容比如：<a href="http://GatewayIP:GatewayPort/wifidog/auth?token=[auth" target="_blank" rel="noopener">http://GatewayIP:GatewayPort/wifidog/auth?token=[auth</a> token]；</p></li><li><p>用户就是用获取到的凭据访问网关。</p></li><li><p>网关去认证服务器询问token的有效性。</p></li><li><p>认证服务器确认token的有效性。</p></li><li><p>网关发送重定向给客户端，以从认证服务器上获取 成功提示页面，重定向到 <a href="http://portal_server:port/portal_script" target="_blank" rel="noopener">http://portal_server:port/portal_script</a> 这个位置。</p></li><li><p>认证服务器通知客户请求成功，可以上网了。</p></li></ol></li></ul></li></ol><h2 id="待完成工作："><a href="#待完成工作：" class="headerlink" title="待完成工作："></a>待完成工作：</h2><p><strong>装wifidog</strong> ，配置:<br>1）监听端口 2)服务器地址 3）5个脚本的地址(login, portal, msg, ping, auth)<br> <strong>配置方法：</strong>远程登陆openwrt: ssh <a href="mailto:root@192.168.1.1" target="_blank" rel="noopener">root@192.168.1.1</a>， 然后修改/etc/wifidog.conf文件。</p><p><strong>将笔记本搭建成服务器</strong></p><p><strong>添加对LED的频率提取功能</strong></p><p><strong>实现动态调节LED频率,将此功能添加至系统</strong></p><hr><p>2019/07/08</p><h2 id="路由器刷openwrt系统"><a href="#路由器刷openwrt系统" class="headerlink" title="路由器刷openwrt系统"></a>路由器刷openwrt系统</h2><p>恢复出厂：断电后，先按住reset再通电。<br><br>登陆192.168.1.1（breed web），先点“恢复出厂”，选择“openwrt”；再点击“更新固件”，选中已下载好的openwrt镜像，进行固件更新。<br></p><h3 id="解决路由器联网问题"><a href="#解决路由器联网问题" class="headerlink" title="解决路由器联网问题"></a>解决路由器联网问题</h3><ol><li>设置密码：点击<code>Go to password configuration...</code>，敲入2遍新的路由器密码，点击页面最下面的 保存执行按钮，密码修改即时生效。 </li><li>设置主机名和时区：<code>System</code>菜单的<code>system</code>进去，主机名改为自己希望的名称，时区设置为<code>Asia/Shanghai</code>，保存。</li><li><strong>联网设置</strong> :点击菜单<code>Network</code>中的第二项，可以选择2G或5G无线网络连接WIFI，按 <code>scan</code>扫描按钮，稍等出现列表中，选择自己(想通过这个路由连接)的WIFI，输入密码，按提交，然后稍等，按保存执行。</li></ol><h2 id="ubuntu16-04编译OpenWrt环境搭建："><a href="#ubuntu16-04编译OpenWrt环境搭建：" class="headerlink" title="ubuntu16.04编译OpenWrt环境搭建："></a>ubuntu16.04编译OpenWrt环境搭建：</h2><ol><li><p>ubuntu下OpenWrt编译环境需要安装很多组件：<br><br><code>sudo apt-get install gcc</code><br><code>sudo apt-get install g++</code><br><code>sudo apt-get install binutils</code><br><code>sudo apt-get install patch</code><br><code>sudo apt-get install bzip2</code><br><code>sudo apt-get install flex</code><br><code>sudo apt-get install bison</code><br><code>sudo apt-get install make</code><br><code>sudo apt-get install autoconf</code><br><code>sudo apt-get install gettext</code><br><code>sudo apt-get install texinfo</code><br><code>sudo apt-get install unzip</code><br><code>sudo apt-get install sharutils</code><br><code>sudo apt-get install subversion</code><br><code>sudo apt-get install libncurses5-dev</code><br><code>sudo apt-get install ncurses-term</code><br><code>sudo apt-get install zlib1g-dev</code><br><code>sudo apt-get install subversion</code><br><code>sudo apt-get install  git-core</code><br><code>sudo apt-get install gawk</code><br><code>sudo apt-get install asciidoc</code><br><code>sudo apt-get install libz-dev</code><br>当然安装之前最好先更新下组件包：<br><code>sudo apt-get update</code><br>逐个安装…</p></li><li><p>新建一个openwrt目录，使用命令：<br><code>mkdir openwrt</code><br><code>sudo chmod 777 openwrt</code><br>接下来的所有命令都在/openwrt目录下运行</p></li><li><p>下载OpenWrt源码:<br><code>git clone git://git.openwrt.org/openwrt/openwrt.git</code></p></li><li><p>添加软件扩展包：<br><code>cd /home/ngmi/openwrt/openwrt/</code><br><code>cp feeds.conf.default feeds.conf</code>(将feeds.conf.default修改为feeds.conf)</p></li><li><p>更新扩展，安装扩展：<br><code>./scripts/feeds update -a</code><br><code>./scripts/feeds install -a</code></p></li><li><p>测试下编译环境，使用命令：<br><code>make defconfig</code></p></li><li><p><code>make menuconfig</code><br>如果一切正常，会出现一个配置菜单，可以选择要编译的固件平台、型号，还能选择固件中要添加的功能和组件，至此编译环境就搭建好了。</p></li></ol><h2 id="在OpenWrt的路由器上安装Wifidog应用程序"><a href="#在OpenWrt的路由器上安装Wifidog应用程序" class="headerlink" title="在OpenWrt的路由器上安装Wifidog应用程序"></a>在OpenWrt的路由器上安装Wifidog应用程序</h2><ol><li>在OpenWrt系统的源码文件下，编辑<code>feeds.conf.default</code>文件<br><br><code>vim feeds.conf.default</code><br>在其中增加一行：<br><code>src-git wifidog https://github.com/wifidog/wifidog-gateway.git</code></li><li>然后更新，再安装：<br><code>./scripts/feeds update -a</code><br><code>./scripts/feeds install -a</code></li><li>终端执行编译命令<br><code>make menuconfig</code></li><li>在<code>Network/captive portals/</code>下选择wifidog 就有选择 WiFiDog 这一项了</li></ol><hr><p>2019/07/09</p><h2 id="配置服务器中遇到的问题"><a href="#配置服务器中遇到的问题" class="headerlink" title="配置服务器中遇到的问题"></a>配置服务器中遇到的问题</h2><p><strong>问题：</strong></p><figure class="highlight plain"><figcaption><span>python3 manage.py runserver 0.0.0.0:8000</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;manage.py&quot;, line 22, in &lt;module&gt;</span><br><span class="line">    execute_from_command_line(sys.argv)</span><br><span class="line">  File &quot;/usr/local/lib/python3.5/dist-packages/django/core/management/__init__.py&quot;, line 381, in execute_from_command_line</span><br><span class="line">    utility.execute()</span><br><span class="line">  File &quot;/usr/local/lib/python3.5/dist-packages/django/core/management/__init__.py&quot;, line 375, in execute</span><br><span class="line">    self.fetch_command(subcommand).run_from_argv(self.argv)</span><br><span class="line">  File &quot;/usr/local/lib/python3.5/dist-packages/django/core/management/base.py&quot;, line 323, in run_from_argv</span><br><span class="line">    self.execute(*args, **cmd_options)</span><br><span class="line">  File &quot;/usr/local/lib/python3.5/dist-packages/django/core/management/commands/runserver.py&quot;, line 60, in execute</span><br><span class="line">    super().execute(*args, **options)</span><br><span class="line">  File &quot;/usr/local/lib/python3.5/dist-packages/django/core/management/base.py&quot;, line 364, in execute</span><br><span class="line">    output = self.handle(*args, **options)</span><br><span class="line">  File &quot;/home/ngmi/lightFreq-master/my_wifi_auth_server/django_pdb/management/commands/runserver.py&quot;, line 59, in handle</span><br><span class="line">    and middleware not in settings.MIDDLEWARE_CLASSES):</span><br><span class="line">  File &quot;/usr/local/lib/python3.5/dist-packages/django/conf/__init__.py&quot;, line 80, in __getattr__</span><br><span class="line">    val = getattr(self._wrapped, name)</span><br><span class="line">AttributeError: &apos;Settings&apos; object has no attribute &apos;MIDDLEWARE_CLASSES&apos;</span><br></pre></td></tr></table></figure><p><strong>解决方法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">middleware = <span class="string">'django_pdb.middleware.PdbMiddleware'</span></span><br><span class="line">        <span class="keyword">if</span> ((pdb_option <span class="keyword">or</span> settings.DEBUG)</span><br><span class="line">            <span class="keyword">and</span> middleware <span class="keyword">not</span> <span class="keyword">in</span> settings.MIDDLEWARE):</span><br><span class="line">            settings.MIDDLEWARE += (middleware,)</span><br></pre></td></tr></table></figure><p>由于Django版本的问题，需要将（lightFreq-master/my_wifi_auth_server/django_pdb/management/conmands/runserver.py）以上代码中原本的MIDDLEWARE_CLASSES改为MIDDLEWARE。</p><p><strong>问题：</strong></p><figure class="highlight plain"><figcaption><span>HTTP_HOST header: '0.0.0.0:8000'. You may need to add '0.0.0.0' to ALLOWED_HOSTS.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bad Request: /</span><br><span class="line">[09/Jul/2019 14:14:40] &quot;GET / HTTP/1.1&quot; 400 66219</span><br></pre></td></tr></table></figure><p>进入<a href="http://0.0.0.0:8000页面显示Invalid" target="_blank" rel="noopener">http://0.0.0.0:8000页面显示Invalid</a>…<br><br><strong>解决办法：</strong><br>将lightFreq-master/my_wifi_auth_server/Auth_server/settings.py文件中<code>ALLOWED_HOSTS = [&#39;192.168.1.162&#39;,&#39;127.0.0.1&#39;]</code>修改为<code>ALLOWED_HOSTS = [&#39;*&#39;]</code></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;基于可见光的无线网络认证&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Light Frequency Authenticate" scheme="http://yoursite.com/categories/Light-Frequency-Authenticate/"/>
    
    
      <category term="lightFre" scheme="http://yoursite.com/tags/lightFre/"/>
    
  </entry>
  
  <entry>
    <title>时间刻痕</title>
    <link href="http://yoursite.com/2019/07/03/%E6%97%B6%E9%97%B4%E5%88%BB%E7%97%95/"/>
    <id>http://yoursite.com/2019/07/03/时间刻痕/</id>
    <published>2019-07-03T11:56:50.000Z</published>
    <updated>2020-07-07T06:12:40.316Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="Writing" scheme="http://yoursite.com/categories/Writing/"/>
    
    
  </entry>
  
  <entry>
    <title>为Hexo的Next主题添加计数功能</title>
    <link href="http://yoursite.com/2019/07/03/%E4%B8%BAHexo%E7%9A%84Next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E8%AE%A1%E6%95%B0%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2019/07/03/为Hexo的Next主题添加计数功能/</id>
    <published>2019-07-03T10:22:33.000Z</published>
    <updated>2020-07-07T04:05:48.954Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">blog中添加wordcount功能</blockquote><a id="more"></a><p>1.在根目录git bash： <code>npm install hexo-wordcount --save</code></p><p>2.在主题配置文件(hexo\themes\next\config.yml)中打开wordcount功能</p><pre><code># Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcountpost_wordcount:  item_text: true  wordcount: true  min2read: true  totalcount: true  separated_meta: true</code></pre><p>3.修改 hexo\themes\next\layout\post.swig，将下面代码复制到文件中：</p><pre><code>&lt;span title=&quot;{{ __('post.wordcount') }}&quot;&gt;     {{ wordcount(post.content) }} 字&lt;/span&gt;&lt;span title=&quot;{{ __('post.min2read') }}&quot;&gt;     {{ min2read(post.content) }} 分钟&lt;/span&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;blog中添加wordcount功能&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Blogthings" scheme="http://yoursite.com/categories/Blogthings/"/>
    
    
      <category term="hexo next" scheme="http://yoursite.com/tags/hexo-next/"/>
    
  </entry>
  
</feed>
