<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>解字</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chasencenge.github.io/"/>
  <updated>2020-08-04T02:48:21.625Z</updated>
  <id>https://chasencenge.github.io/</id>
  
  <author>
    <name>CHAsencenge</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode每日刷题</title>
    <link href="https://chasencenge.github.io/2020/08/03/LeetCode%E6%AF%8F%E6%97%A5%E5%88%B7%E9%A2%98/"/>
    <id>https://chasencenge.github.io/2020/08/03/LeetCode每日刷题/</id>
    <published>2020-08-03T15:29:34.000Z</published>
    <updated>2020-08-04T02:48:21.625Z</updated>
    
    <content type="html"><![CDATA[<h4 id="415-字符串相加"><a href="#415-字符串相加" class="headerlink" title="415. 字符串相加"></a>415. 字符串相加</h4><p>实现两个字符串的数值相加，不能用类型转换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">addStrings</span><span class="hljs-params">(<span class="hljs-built_in">string</span> num1, <span class="hljs-built_in">string</span> num2)</span> </span>&#123;<br>    <span class="hljs-comment">//双指针，双指针的“指针”不一定非得是指针类型，能做flag标记就行</span><br><span class="hljs-keyword">int</span> i = num1.length() - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> j = num2.length() - <span class="hljs-number">1</span>;<br><span class="hljs-built_in">string</span> res;<br><span class="hljs-keyword">int</span> multi = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//进位</span><br><span class="hljs-keyword">int</span> add = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i &gt;= <span class="hljs-number">0</span> || j &gt;= <span class="hljs-number">0</span> || add &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> y = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">0</span>)<br>&#123;<br>            <span class="hljs-comment">//两者相减得到的是int型</span><br>x = num1[i] - <span class="hljs-string">'0'</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (j &gt;= <span class="hljs-number">0</span>)<br>&#123;<br>y = num2[j] - <span class="hljs-string">'0'</span>;<br>&#125;<br><span class="hljs-keyword">int</span> result = x + y + add;<br>res.push_back(<span class="hljs-string">'0'</span> + result % <span class="hljs-number">10</span>);<br>add = result / <span class="hljs-number">10</span>;<br>i--;<br>j--;<br>&#125;<br>    <span class="hljs-comment">//因为每次push_back是从低位到高位的，所以结果要翻转</span><br>reverse(res.begin(), res.end());<br><span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="207-课程表"><a href="#207-课程表" class="headerlink" title="207. 课程表"></a>207. 课程表</h4><p>你这个学期必须选修 numCourse 门课程，记为 0 到 numCourse-1 。</p><p>在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们：[0,1]</p><p>给定课程总量以及它们的先决条件，请你判断是否可能完成所有课程的学习？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++">输入: <span class="hljs-number">2</span>, [[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>]] <br>输出: <span class="hljs-literal">true</span><br>解释: 总共有<span class="hljs-number">2</span>门课程。学习课程<span class="hljs-number">1</span>之前，你需要完成课程<span class="hljs-number">0</span>。所以这是可能的<br><br>输入: <span class="hljs-number">2</span>, [[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]]<br>输出: <span class="hljs-literal">false</span><br>解释: 总共有<span class="hljs-number">2</span>门课程。学习课程<span class="hljs-number">1</span>之前，你需要先完成课程<span class="hljs-number">0</span>；并且学习课程<span class="hljs-number">0</span>之前，你还应先完成课程<span class="hljs-number">1</span>。这是不可能的<br></code></pre></td></tr></table></figure><p>我们就可以将本题建模成一个求拓扑排序的问题了：</p><p>我们将每一门课看成一个节点</p><p>如果想要学习课程 A之前必须完成课程 B，那么我们从B到A连接一条有向边。这样以来，在拓扑排序中，B一定出现在 A的前面</p><p><strong>思路：</strong></p><p>考虑拓扑排序中最前面的节点，该节点一定不会有任何入边，也就是它没有任何的先修课程要求。当我们将一个节点加入答案中后，我们就可以移除它的所有出边，代表着它的相邻节点少了一门先修课程的要求。如果某个相邻节点变成了「没有任何入边的节点」，那么就代表着这门课可以开始学习了。按照这样的流程，我们不断地将没有入边的节点加入答案，直到答案中包含所有的节点（得到了一种拓扑排序）或者不存在没有入边的节点（图中包含环）</p><p><strong>算法：</strong></p><p>使用一个队列来进行广度优先搜索。初始时，所有入度为 00 的节点都被放入队列中，它们就是可以作为拓扑排序最前面的节点，并且它们之间的相对顺序是无关紧要的。</p><p>在广度优先搜索的每一步中，我们取出队首的节点u：</p><p>我们将u放入答案中</p><p>我们移除 u的所有出边，也就是将u的所有相邻节点的入度减少1。如果某个相邻节点v的入度变为0，那么我们就将v放入队列中</p><p>在广度优先搜索的过程结束后。如果答案中包含了这n个节点，那么我们就找到了一种拓扑排序，否则说明图中存在环，也就不存在拓扑排序了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">canFinish</span><span class="hljs-params">(<span class="hljs-keyword">int</span> numCourses, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; prerequisites)</span> </span>&#123;<br>    <span class="hljs-comment">//入度 in degree</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; indeg;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; edges;<br>    <span class="hljs-comment">//resize内的默认初始化值为0</span><br>    indeg.resize(numCourses);<br>    edges.resize(numCourses);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span>&amp; info : prerequisites)<br>    &#123;<br>        <span class="hljs-comment">//以info[1]为起始的边，指向info[0]</span><br>        edges[info[<span class="hljs-number">1</span>]].push_back(info[<span class="hljs-number">0</span>]);<br>        <span class="hljs-comment">//info[0]的入度加一，指向它的是info[1]</span><br>        ++indeg[info[<span class="hljs-number">0</span>]];<br>    &#125;<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numCourses; i++)<br>    &#123;<br>        <span class="hljs-comment">//把最开始入度为0的点push进去</span><br>        <span class="hljs-keyword">if</span> (indeg[i] == <span class="hljs-number">0</span>)<br>        &#123;<br>            q.push(i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> visited = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!q.empty())<br>    &#123;<br>        visited++;<br>        <span class="hljs-keyword">int</span> u = q.front();<br>        q.pop();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v : edges[u])<br>        &#123;<br>            --indeg[v];<br>            <span class="hljs-comment">//如果去掉指向它的u之后，v点的入度变为0，那么push进队列</span><br>            <span class="hljs-keyword">if</span> (indeg[v] == <span class="hljs-number">0</span>)<br>            &#123;<br>                q.push(v);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> visited == numCourses;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;415-字符串相加&quot;&gt;&lt;a href=&quot;#415-字符串相加&quot; class=&quot;headerlink&quot; title=&quot;415. 字符串相加&quot;&gt;&lt;/a&gt;415. 字符串相加&lt;/h4&gt;&lt;p&gt;实现两个字符串的数值相加，不能用类型转换&lt;/p&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
    
      <category term="C++" scheme="https://chasencenge.github.io/categories/C/"/>
    
      <category term="Algorithm" scheme="https://chasencenge.github.io/categories/C/Algorithm/"/>
    
    
      <category term="C++" scheme="https://chasencenge.github.io/tags/C/"/>
    
      <category term="Algorithm" scheme="https://chasencenge.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode top100刷题</title>
    <link href="https://chasencenge.github.io/2020/08/03/LeetCode-top%E5%88%B7%E9%A2%98/"/>
    <id>https://chasencenge.github.io/2020/08/03/LeetCode-top刷题/</id>
    <published>2020-08-03T15:15:27.000Z</published>
    <updated>2020-08-04T16:36:01.715Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//暴力循环</span><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; resV&#123; <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;;<br><span class="hljs-keyword">int</span> find;<br><span class="hljs-keyword">int</span> hasFound = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.size() - <span class="hljs-number">1</span>; i++)<br>&#123;<br>resV[<span class="hljs-number">0</span>] = i;<br>find = target - nums[i];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; nums.size(); j++)<br>&#123;<br><span class="hljs-keyword">if</span> (nums[j] == find)<br>&#123;<br>resV[<span class="hljs-number">1</span>] = j;<br>hasFound = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (hasFound == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> resV;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//先排序，再利用双指针遍历，初始i放首部，j放尾部，两数之和大于target的话j--，小于target的话i++，找到对应的i和j</span><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; resV&#123; <span class="hljs-number">0</span>, <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; copyV = nums;<br>    <span class="hljs-keyword">int</span> find;<br>    <span class="hljs-keyword">int</span> hasFound = <span class="hljs-number">0</span>;<br>    sort(nums.begin(), nums.end());<br>    <span class="hljs-comment">// for(int k = 0; k &lt; nums.size(); k++)</span><br>    <span class="hljs-comment">// &#123;cout &lt;&lt; nums[k] &lt;&lt; " ";&#125;</span><br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> j = nums.size() - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i != j &amp;&amp; hasFound == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (target &gt; nums[i] + nums[j])<br>        &#123;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (target &lt; nums[i] + nums[j])<br>        &#123;<br>            j--;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-comment">//找到i和j还没结束，要根据nums[i], nums[j]找到排序前的数组中对应的原始下标</span><br>            <span class="hljs-comment">//found1防止数组中有相同的值k使得k + k = target导致只能（进入下面的if）更新resV[0]的值</span><br>            <span class="hljs-comment">//这样，如果在原数组中找到第一个k值时进入if，之后继续找到第二个k值的时候便不会再进入if重复更新resV[0]而导致resV[j]不被更新</span><br>            <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>, found1 = <span class="hljs-number">0</span>, label = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (label != <span class="hljs-number">2</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (copyV[flag] == nums[i] &amp;&amp; found1 == <span class="hljs-number">0</span>)<br>                &#123;<br>                    label++;<br>                    resV[<span class="hljs-number">0</span>] = flag;<br>                    found1 = <span class="hljs-number">1</span>;<br>                    flag++;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (copyV[flag] == nums[j])<br>                &#123;<br>                    label++;<br>                    resV[<span class="hljs-number">1</span>] = flag;<br>                    flag++;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    flag++;<br>                &#125;<br>            &#125;<br>            hasFound = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> resV;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2.两数相加"></a>2.两数相加</h4><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">输入：(<span class="hljs-number">2</span> -&gt; <span class="hljs-number">4</span> -&gt; <span class="hljs-number">3</span>) + (<span class="hljs-number">5</span> -&gt; <span class="hljs-number">6</span> -&gt; <span class="hljs-number">4</span>)<br>输出：<span class="hljs-number">7</span> -&gt; <span class="hljs-number">0</span> -&gt; <span class="hljs-number">8</span><br>原因：<span class="hljs-number">342</span> + <span class="hljs-number">465</span> = <span class="hljs-number">807</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ListNode* <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br>    <span class="hljs-comment">//结构体指针初始化的时候要new一个（创建不在栈上的对象用new）</span><br>    ListNode* res = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">-1</span>);<br>    <span class="hljs-comment">//temp用来移动，res保证最后return的时候找得到链表头部</span><br>    ListNode* temp = res;<br>    ListNode* p = l1;<br>    ListNode* q = l2;<br>    <span class="hljs-keyword">int</span> add = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-comment">//处理对称长度部分</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span> &amp;&amp; q != <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        i = (p-&gt;val + q-&gt;val + add) % <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">//每个next节点都需要new一下，确定有下一位再new下一位</span><br>        temp-&gt;next = <span class="hljs-keyword">new</span> ListNode(i);<br>        add = (p-&gt;val + q-&gt;val + add) / <span class="hljs-number">10</span>;<br>        temp = temp-&gt;next;<br>        p = p-&gt;next;<br>        q = q-&gt;next;<br>    &#125;<br>    <span class="hljs-comment">//处理不对称部分</span><br>    <span class="hljs-keyword">if</span> (p != <span class="hljs-literal">nullptr</span> &amp;&amp; q == <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            i = (p-&gt;val + add) % <span class="hljs-number">10</span>;<br>            temp-&gt;next = <span class="hljs-keyword">new</span> ListNode(i);<br>            add = (p-&gt;val + add) / <span class="hljs-number">10</span>;<br>            temp = temp-&gt;next;<br>            p = p-&gt;next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (q != <span class="hljs-literal">nullptr</span> &amp;&amp; p == <span class="hljs-literal">nullptr</span>)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (q != <span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            i = (q-&gt;val + add) % <span class="hljs-number">10</span>;<br>            temp-&gt;next = <span class="hljs-keyword">new</span> ListNode(i);<br>            add = (q-&gt;val + add) / <span class="hljs-number">10</span>;<br>            temp = temp-&gt;next;<br>            q = q-&gt;next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">//这个if是处理l1和l2长度相同的情况下，最高位的进位</span><br>        <span class="hljs-keyword">if</span> (add != <span class="hljs-number">0</span>)<br>        &#123;<br>            temp-&gt;next = <span class="hljs-keyword">new</span> ListNode(add);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//这个if是处理l1和l2长度不相同的情况下，最高位的进位，也就是在上面if或者else if跑完之后进行的判断</span><br>    <span class="hljs-keyword">if</span> (add != <span class="hljs-number">0</span>)<br>    &#123;<br>        temp-&gt;next = <span class="hljs-keyword">new</span> ListNode(add);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res-&gt;next;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-两数之和&quot;&gt;&lt;a href=&quot;#1-两数之和&quot; class=&quot;headerlink&quot; title=&quot;1. 两数之和&quot;&gt;&lt;/a&gt;1. 两数之和&lt;/h4&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
    
      <category term="C++" scheme="https://chasencenge.github.io/categories/C/"/>
    
      <category term="Algorithm" scheme="https://chasencenge.github.io/categories/C/Algorithm/"/>
    
    
      <category term="C++" scheme="https://chasencenge.github.io/tags/C/"/>
    
      <category term="Algorithm" scheme="https://chasencenge.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode200周赛</title>
    <link href="https://chasencenge.github.io/2020/08/02/LeetCode200%E5%91%A8%E8%B5%9B/"/>
    <id>https://chasencenge.github.io/2020/08/02/LeetCode200周赛/</id>
    <published>2020-08-02T14:18:15.000Z</published>
    <updated>2020-08-02T15:38:14.671Z</updated>
    
    <content type="html"><![CDATA[<p>给你一个整数数组 arr ，以及 a、b 、c 三个整数。请你统计其中好三元组的数量</p><p>如果三元组 (arr[i], arr[j], arr[k]) 满足下列全部条件，则认为它是一个 好三元组 </p><p>0 &lt;= i &lt; j &lt; k &lt; arr.length</p><p>|arr[i] - arr[j]| &lt;= a</p><p>|arr[j] - arr[k]| &lt;= b</p><p>|arr[i] - arr[k]| &lt;= c</p><p>其中 |x| 表示 x 的绝对值</p><p>返回 好三元组的数量 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">输入：arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3<br>输出：4<br>解释：一共有 4 个好三元组：[(3,0,1), (3,0,1), (3,1,1), (0,1,1)]<br><br>输入：arr = [1,1,2,2,3], a = 0, b = 0, c = 1<br>输出：0<br>解释：不存在满足所有条件的三元组<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">countGoodTriplets</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; arr, <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c)</span> </span>&#123;<br><span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.size() - <span class="hljs-number">2</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; arr.size() - <span class="hljs-number">1</span>; j++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = j + <span class="hljs-number">1</span>; k &lt; arr.size(); k++)<br>&#123;<br>                <span class="hljs-comment">//使用abs()需引用cmath头文件</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(arr[i] - arr[j]) &lt;= a &amp;&amp; <span class="hljs-built_in">abs</span>(arr[j] - arr[k]) &lt;= b &amp;&amp; <span class="hljs-built_in">abs</span>(arr[i] - arr[k]) &lt;= c)<br>&#123;<br>res++;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>给你一个由 不同 整数组成的整数数组 arr 和一个整数 k </p><p>每回合游戏都在数组的前两个元素（即 arr[0] 和 arr[1] ）之间进行。比较 arr[0] 与 arr[1] 的大小，较大的整数将会取得这一回合的胜利并保留在位置 0 ，较小的整数移至数组的末尾。当一个整数赢得 k 个连续回合时，游戏结束，该整数就是比赛的 赢家 </p><p>返回赢得比赛的整数</p><p>题目数据 保证 游戏存在赢家</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++">输入：arr = [<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>], k = <span class="hljs-number">10</span><br>输出：<span class="hljs-number">3</span><br>解释：<span class="hljs-number">3</span> 将会在前 <span class="hljs-number">10</span> 个回合中连续获胜<br>    <br>输入：arr = [<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>], k = <span class="hljs-number">7</span><br>输出：<span class="hljs-number">9</span><br>    <br>输入：arr = [<span class="hljs-number">1</span>,<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>,<span class="hljs-number">55</span>,<span class="hljs-number">66</span>,<span class="hljs-number">77</span>,<span class="hljs-number">88</span>,<span class="hljs-number">99</span>], k = <span class="hljs-number">1000000000</span><br>输出：<span class="hljs-number">99</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//vector操作</span><br>a.erase(a.begin()+<span class="hljs-number">1</span>,a.begin()+<span class="hljs-number">3</span>); <span class="hljs-comment">//包前不包后，删除第1、2个元素</span><br>a.insert(a.begin()+<span class="hljs-number">1</span>,<span class="hljs-number">5</span>); <span class="hljs-comment">//在a的第1个元素（从第0个算起）的位置插入数值5</span><br>a.insert(a.begin()+<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>); <span class="hljs-comment">//在a的第1个元素（从第0个算起）的位置插入3个数，其值都为5</span><br>a.back(); <span class="hljs-comment">//返回a的最后一个元素</span><br>a.front(); <span class="hljs-comment">//返回a的第一个元素</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//按命题逻辑操作vector，遇到超长数组同时超大K值时会超时</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getWinner</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; arr, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br><span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> res = arr[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">if</span> (k &gt; arr.size())<br>&#123;<br>k = arr.size();<br>&#125;<br><br><span class="hljs-keyword">while</span> (num &lt; k)<br>&#123;<br><span class="hljs-keyword">if</span> (arr[<span class="hljs-number">0</span>] &gt; arr[<span class="hljs-number">1</span>])<br>&#123;<br>num++;<br><span class="hljs-keyword">int</span> temp = arr[<span class="hljs-number">1</span>];<br>arr.erase(arr.begin() + <span class="hljs-number">1</span>, arr.begin() + <span class="hljs-number">2</span>);<br>arr.push_back(temp);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>num = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> temp = arr[<span class="hljs-number">0</span>];<br>res = arr[<span class="hljs-number">1</span>];<br>arr.erase(arr.begin(), arr.begin() + <span class="hljs-number">1</span>);<br>arr.push_back(temp);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//trick，不用按题述方式操作vector，从前向后遍历即可</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getWinner</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; arr, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> res = arr[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">if</span> (k &gt; arr.size())<br>    &#123;<br>    k = arr.size();<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.size(); i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(arr[i]&gt;arr[i+<span class="hljs-number">1</span>])<br>            &#123;<br>                <span class="hljs-comment">//直接修改arr[i+1]的值为arr[i]，这样继续和后面比较时仍是类似命题中的：上一组的较大者和新数值比较</span><br>                arr[i+<span class="hljs-number">1</span>] = arr[i];<br>                num++;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-comment">//当遇到前者小于后者的情况，看此时的num值是否满足大于等于k的要求，符合即作为结果返回</span><br>                <span class="hljs-keyword">if</span>(num &gt;= k)<br>                &#123;<br>                    <span class="hljs-keyword">return</span> arr[i];<br>                &#125;<br>                <span class="hljs-comment">//不符合则设置num为1，不设置为0的原因是因为已经淘汰掉上一个值，已经赢了一回合</span><br>                res = arr[i+<span class="hljs-number">1</span>];<br>                num = <span class="hljs-number">1</span>; <br>            &#125;<br>        &#125;<br>    <span class="hljs-keyword">return</span> res;<br>    &#125;<br></code></pre></td></tr></table></figure><p>给你一个 n x n 的二进制网格 grid，每一次操作中，你可以选择网格的 相邻两行 进行交换</p><p>一个符合要求的网格需要满足主对角线以上的格子全部都是 0 </p><p>请你返回使网格满足要求的最少操作次数，如果无法使网格符合要求，请你返回 -1 </p><p>主对角线指的是从 (1, 1) 到 (n, n) 的这些格子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs undefined">输入：grid = [[0,0,1],[1,1,0],[1,0,0]]<br>输出：3<br><br>输入：grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]<br>输出：-1<br>解释：所有行都是一样的，交换相邻行无法使网格符合要求<br><br>输入：grid = [[1,0,0],[1,1,0],[1,1,1]]<br>输出：0<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//贪心</span><br><span class="hljs-comment">//从第一行开始，如果该行的后缀0满足条件，那么直接跳过进入下一行（因为需要的后缀0个数是从大到小的顺序（理解这一点非常重要），所以不必担心前面的会抢后面的，自己不够用的时候放心的去抢后面的，因为当前行的需求（优先级）比后面都高）</span><br><span class="hljs-comment">//如果该行后缀0个数不满足条件，那么就往下遍历找到最先（贪心，这是最小次数）满足条件的行，一行一行换上来，记录交换的次数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">minSwaps</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; resV;<br><span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> n = grid.size();<br>    <span class="hljs-comment">//统计每行后缀0个数，存到resV中</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br><span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; grid[i].size(); j++)<br>&#123;<br><span class="hljs-keyword">if</span> (grid[i][j] == <span class="hljs-number">0</span>)<br>&#123;<br>    num++;<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br>    num = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>resV.push_back(num);<br>&#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-comment">//如果当前行的后缀0个数够用，直接往下遍历，不用担心抢了后面的，因为当前行的需求量比后面的都高</span><br>        <span class="hljs-keyword">if</span>(resV[i] &gt;= n - i - <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(resV[j] &lt; n - i - <span class="hljs-number">1</span> )<br>            &#123;<br>                j++;<br>                <span class="hljs-comment">//找到最后都没有找到满足个数的后缀0，就直接退出</span><br>                <span class="hljs-keyword">if</span>(j == n)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>            &#125;<br>            <span class="hljs-comment">//while之后到这里说明找到了一行满足当前行的后缀0的个数需求，把找到的行一行一行的往上换，换到当前行，每次swap的同时更新交换次数</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> m = j; m &gt; i; m--)<br>            &#123;<br>                swap(resV[m], resV[m - <span class="hljs-number">1</span>]);<br>                res++;<br>            &#125;    <br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给你一个整数数组 arr ，以及 a、b 、c 三个整数。请你统计其中好三元组的数量&lt;/p&gt;
&lt;p&gt;如果三元组 (arr[i], arr[j], arr[k]) 满足下列全部条件，则认为它是一个 好三元组 &lt;/p&gt;
&lt;p&gt;0 &amp;lt;= i &amp;lt; j &amp;lt; k &amp;l
      
    
    </summary>
    
    
      <category term="C++" scheme="https://chasencenge.github.io/categories/C/"/>
    
      <category term="Algorithm" scheme="https://chasencenge.github.io/categories/C/Algorithm/"/>
    
    
      <category term="C++" scheme="https://chasencenge.github.io/tags/C/"/>
    
      <category term="Algorithm" scheme="https://chasencenge.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode广度优先搜索</title>
    <link href="https://chasencenge.github.io/2020/08/01/LeetCode%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    <id>https://chasencenge.github.io/2020/08/01/LeetCode广度优先搜索/</id>
    <published>2020-08-01T10:13:29.000Z</published>
    <updated>2020-08-04T02:49:38.261Z</updated>
    
    <content type="html"><![CDATA[<h4 id="107-二叉树的层次遍历"><a href="#107-二叉树的层次遍历" class="headerlink" title="107. 二叉树的层次遍历"></a>107. 二叉树的层次遍历</h4><p>给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p><h5 id="STL-queue："><a href="#STL-queue：" class="headerlink" title="STL queue："></a>STL queue：</h5><p>原理：队尾（rear）插入，队首（front）删除</p><p>头文件： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">#include&lt;queue&gt;<br></code></pre></td></tr></table></figure><p>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined">push(): 推一个元素进队列<br>front(): 返回队首元素(栈对应的是top())<br>back(): 返回队尾元素<br>pop(): 移除队首元素<br>empty()<br>size()<br></code></pre></td></tr></table></figure><p>创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">queue&lt;string&gt; q;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**<br> * Definition for a binary tree node.<br> * struct TreeNode &#123;<br> *     int val;<br> *     TreeNode *left;<br> *     TreeNode *right;<br> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;<br> * &#125;;<br> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-title">levelOrderBottom</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; resV;<br>        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; levelNumV;<br>        TreeNode* cur = root;<br>        <span class="hljs-comment">//层次遍历借助队列实现</span><br>        <span class="hljs-built_in">queue</span>&lt;TreeNode*&gt; q;<br>        q.push(cur);<br>        <span class="hljs-comment">//跳出遍历的条件为队列为空</span><br>        <span class="hljs-keyword">while</span>(!q.empty())<br>        &#123;<br>            <span class="hljs-keyword">int</span> size = q.size();<br>            <span class="hljs-keyword">while</span>(size-- &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                cur = q.front();<br>                <span class="hljs-comment">//砍头操作</span><br>                q.pop();<br>                <span class="hljs-keyword">if</span>(cur)<br>                &#123;<br>                levelNumV.push_back(cur-&gt;val);<br>                <span class="hljs-comment">//爆菊操作</span><br>                q.push(cur-&gt;left);<br>                q.push(cur-&gt;right);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(!levelNumV.empty())<br>            &#123;<br>            <span class="hljs-comment">//输出格式不是规则的二维数组可选用vector&lt;vector&gt;，它的push_back内容为vector（不限制子vector长度）</span><br>            resV.push_back(levelNumV);<br>            levelNumV.clear();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//vector中reverse的使用</span><br>        reverse(resV.begin(), resV.end());<br>        <span class="hljs-keyword">return</span> resV;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="207-课程表"><a href="#207-课程表" class="headerlink" title="207. 课程表"></a>207. 课程表</h4><p>你这个学期必须选修 numCourse 门课程，记为 0 到 numCourse-1 。</p><p>在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们：[0,1]</p><p>给定课程总量以及它们的先决条件，请你判断是否可能完成所有课程的学习？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++">输入: <span class="hljs-number">2</span>, [[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>]] <br>输出: <span class="hljs-literal">true</span><br>解释: 总共有<span class="hljs-number">2</span>门课程。学习课程<span class="hljs-number">1</span>之前，你需要完成课程<span class="hljs-number">0</span>。所以这是可能的<br><br>输入: <span class="hljs-number">2</span>, [[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]]<br>输出: <span class="hljs-literal">false</span><br>解释: 总共有<span class="hljs-number">2</span>门课程。学习课程<span class="hljs-number">1</span>之前，你需要先完成课程<span class="hljs-number">0</span>；并且学习课程<span class="hljs-number">0</span>之前，你还应先完成课程<span class="hljs-number">1</span>。这是不可能的<br></code></pre></td></tr></table></figure><p>我们就可以将本题建模成一个求拓扑排序的问题了：</p><p>我们将每一门课看成一个节点</p><p>如果想要学习课程 A之前必须完成课程 B，那么我们从B到A连接一条有向边。这样以来，在拓扑排序中，B一定出现在 A的前面</p><p><strong>思路：</strong></p><p>考虑拓扑排序中最前面的节点，该节点一定不会有任何入边，也就是它没有任何的先修课程要求。当我们将一个节点加入答案中后，我们就可以移除它的所有出边，代表着它的相邻节点少了一门先修课程的要求。如果某个相邻节点变成了「没有任何入边的节点」，那么就代表着这门课可以开始学习了。按照这样的流程，我们不断地将没有入边的节点加入答案，直到答案中包含所有的节点（得到了一种拓扑排序）或者不存在没有入边的节点（图中包含环）</p><p><strong>算法：</strong></p><p>使用一个队列来进行广度优先搜索。初始时，所有入度为 00 的节点都被放入队列中，它们就是可以作为拓扑排序最前面的节点，并且它们之间的相对顺序是无关紧要的。</p><p>在广度优先搜索的每一步中，我们取出队首的节点u：</p><p>我们将u放入答案中</p><p>我们移除 u的所有出边，也就是将u的所有相邻节点的入度减少1。如果某个相邻节点v的入度变为0，那么我们就将v放入队列中</p><p>在广度优先搜索的过程结束后。如果答案中包含了这n个节点，那么我们就找到了一种拓扑排序，否则说明图中存在环，也就不存在拓扑排序了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">canFinish</span><span class="hljs-params">(<span class="hljs-keyword">int</span> numCourses, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; prerequisites)</span> </span>&#123;<br>    <span class="hljs-comment">//入度 in degree</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; indeg;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; edges;<br>    <span class="hljs-comment">//resize内的默认初始化值为0</span><br>    indeg.resize(numCourses);<br>    edges.resize(numCourses);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span>&amp; info : prerequisites)<br>    &#123;<br>        <span class="hljs-comment">//以info[1]为起始的边，指向info[0]</span><br>        edges[info[<span class="hljs-number">1</span>]].push_back(info[<span class="hljs-number">0</span>]);<br>        <span class="hljs-comment">//info[0]的入度加一，指向它的是info[1]</span><br>        ++indeg[info[<span class="hljs-number">0</span>]];<br>    &#125;<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numCourses; i++)<br>    &#123;<br>        <span class="hljs-comment">//把最开始入度为0的点push进去</span><br>        <span class="hljs-keyword">if</span> (indeg[i] == <span class="hljs-number">0</span>)<br>        &#123;<br>            q.push(i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">int</span> visited = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!q.empty())<br>    &#123;<br>        visited++;<br>        <span class="hljs-keyword">int</span> u = q.front();<br>        q.pop();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> v : edges[u])<br>        &#123;<br>            --indeg[v];<br>            <span class="hljs-comment">//如果去掉指向它的u之后，v点的入度变为0，那么push进队列</span><br>            <span class="hljs-keyword">if</span> (indeg[v] == <span class="hljs-number">0</span>)<br>            &#123;<br>                q.push(v);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> visited == numCourses;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;107-二叉树的层次遍历&quot;&gt;&lt;a href=&quot;#107-二叉树的层次遍历&quot; class=&quot;headerlink&quot; title=&quot;107. 二叉树的层次遍历&quot;&gt;&lt;/a&gt;107. 二叉树的层次遍历&lt;/h4&gt;&lt;p&gt;给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按
      
    
    </summary>
    
    
      <category term="C++" scheme="https://chasencenge.github.io/categories/C/"/>
    
      <category term="Algorithm" scheme="https://chasencenge.github.io/categories/C/Algorithm/"/>
    
    
      <category term="C++" scheme="https://chasencenge.github.io/tags/C/"/>
    
      <category term="Algorithm" scheme="https://chasencenge.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>字节夏令营20游戏程序笔试题</title>
    <link href="https://chasencenge.github.io/2020/08/01/%E5%AD%97%E8%8A%82%E5%A4%8F%E4%BB%A4%E8%90%A520%E6%B8%B8%E6%88%8F%E7%A8%8B%E5%BA%8F%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    <id>https://chasencenge.github.io/2020/08/01/字节夏令营20游戏程序笔试题/</id>
    <published>2020-08-01T03:42:48.000Z</published>
    <updated>2020-08-02T15:52:41.495Z</updated>
    
    <content type="html"><![CDATA[<p>给素材分类，若作品1中有素材1和素材2，则认为素材1和素材2为一类，若作品2中有素材2和素材3，那么此后认为素材1、2、3为一类</p><p>输入：第一行为作品数n，此后n行中每行第一位为该作品中的素材总数m，此后m个数字为素材名（int型）</p><p>输出：素材的分类，并且每一类素材，类内顺序由小到大，类外顺序按照类内最小值由小到大排序输出</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs undefined">输入：<br>4<br>2 1 3<br>3 0 5 6<br>3 2 3 4<br>1 7<br><br>输出：<br>0 5 6<br>1 2 3 4<br>7<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; resV;<br>    <span class="hljs-keyword">int</span> num;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; num;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; num; i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> cat;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; cat;<br>        <span class="hljs-comment">//存放该作品内所有素材的vector</span><br>        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; tempV;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; cat; j++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> mem;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; mem;<br>            tempV.push_back(mem);<br>            <span class="hljs-comment">//cout &lt;&lt; tempV[j];</span><br>        &#125;<br>        <span class="hljs-comment">//能否找到已存在的类，能找到就将tempV添加进去</span><br>        <span class="hljs-keyword">int</span> label = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; tempV.size(); k++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> out = <span class="hljs-number">0</span>; out &lt; resV.size(); out++)<br>            &#123;<br>                <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> in = <span class="hljs-number">0</span>; in &lt; resV[out].size(); in++)<br>                &#123;<br>                    <br>                    <span class="hljs-keyword">if</span> (tempV[k] == resV[out][in])<br>                    &#123;<br>                        label = <span class="hljs-number">1</span>;<br>                        flag = <span class="hljs-number">1</span>;<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> copy = <span class="hljs-number">0</span>; copy &lt; tempV.size(); copy++)<br>                        &#123;<br>                            <span class="hljs-comment">//检查重复素材，重复的素材不添加，只在已有的分类中添加还未加入的素材</span><br>                            <span class="hljs-keyword">if</span> (find(resV[out].begin(), resV[out].end(), tempV[copy]) == resV[out].end())<br>                                resV[out].push_back(tempV[copy]);<br>                        &#125;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;   <br>                &#125;<br>                <span class="hljs-comment">//不用再继续遍历后面的子vector了，添加进一个分类中就一定不会添加进另外一个分类</span><br>                <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span>)<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//是新的素材分类</span><br>        <span class="hljs-keyword">if</span> (label == <span class="hljs-number">0</span>)<br>        &#123;<br>            resV.push_back(tempV);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//子vector按最小元素排序</span><br>    sort(resV.begin(), resV.end());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; resV.size(); i++)<br>    &#123;<br>        <span class="hljs-comment">//子vector内部排序</span><br>        sort(resV[i].begin(), resV[i].end());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; resV[i].size(); j++)<br>            <span class="hljs-built_in">cout</span> &lt;&lt; resV[i][j] &lt;&lt; <span class="hljs-string">" "</span>;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>计算给出时间和格林尼治时间之间的秒数，格式：YYYY/MM/DD hh:mm:ss</p><p>需要考虑平年和闰年</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-built_in">string</span> date, time;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; date &gt;&gt; time;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> year, month, day;<br>    <span class="hljs-comment">//切分成子字符串之后再转整型，赋给年月日时分秒</span><br>    <span class="hljs-comment">//atoi()的参数是 const char* ,因此对于一个字符串str我们必须调用c_str()的方法把这个string转换成const char*类型的</span><br>    <span class="hljs-comment">//substr(pos, num)两个参数是从起始位置和pos开始取的字符个数，而不是起始位置和末尾位置</span><br>    year = atoi(date.substr(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>).c_str());<br>    month = atoi(date.substr(<span class="hljs-number">5</span>, <span class="hljs-number">2</span>).c_str());<br>    day = atoi(date.substr(<span class="hljs-number">8</span>, <span class="hljs-number">2</span>).c_str());<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> hour, minute, second;<br>    hour = atoi(time.substr(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>).c_str());<br>    minute = atoi(time.substr(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>).c_str());<br>    second = atoi(time.substr(<span class="hljs-number">6</span>, <span class="hljs-number">2</span>).c_str());<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> time1 = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//cout &lt;&lt; hour &lt;&lt; " " &lt;&lt; minute &lt;&lt; " " &lt;&lt; second;</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; year &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; month &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; day &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-comment">//cout &lt;&lt; second &lt;&lt; to_string(minute * 60) &lt;&lt; to_string(hour * 3600) &lt;&lt; second + minute * 60 + hour * 3600;</span><br>    <span class="hljs-comment">//给出的一天内的时间计算</span><br>    time1 = second + minute * <span class="hljs-number">60</span> + hour * <span class="hljs-number">3600</span>;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> time2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> run = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1970</span>; i &lt; year; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> ((i % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; i % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>) || i % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>)<br>            run++;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; run &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-comment">//给出的年月日的时间计算</span><br>    time2 += run * <span class="hljs-number">366</span> * <span class="hljs-number">3600</span> * <span class="hljs-number">24</span> + (year - <span class="hljs-number">1970</span> - run) * <span class="hljs-number">365</span> * <span class="hljs-number">3600</span> * <span class="hljs-number">24</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; time2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//最后一年单独计算，因为最后一年未满整一年</span><br>    <span class="hljs-comment">//最后一年是闰年还是平年</span><br>    <span class="hljs-keyword">if</span> ((year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>) || year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>)<br>        temp = <span class="hljs-number">29</span>;<br>    <span class="hljs-keyword">else</span><br>        temp = <span class="hljs-number">28</span>;<br>    <span class="hljs-comment">//最后一年除掉最后一个月的时间，因为最后一个月未满整一个月</span><br>    <span class="hljs-keyword">switch</span> (month)<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">01</span>:<br>        time2 += <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">02</span>:<br>        time2 += <span class="hljs-number">31</span> * <span class="hljs-number">3600</span> * <span class="hljs-number">24</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">03</span>:<br>        time2 += (<span class="hljs-number">31</span> + temp) * <span class="hljs-number">3600</span> * <span class="hljs-number">24</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">04</span>:<br>        time2 += (<span class="hljs-number">62</span> + temp) * <span class="hljs-number">3600</span> * <span class="hljs-number">24</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">05</span>:<br>        time2 += (<span class="hljs-number">92</span> + temp) * <span class="hljs-number">3600</span> * <span class="hljs-number">24</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">06</span>:<br>        time2 += (<span class="hljs-number">123</span> + temp) * <span class="hljs-number">3600</span> * <span class="hljs-number">24</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">07</span>:<br>        time2 += (<span class="hljs-number">153</span> + temp) * <span class="hljs-number">3600</span> * <span class="hljs-number">24</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-comment">//8和9特殊，编译器在识别08和09时不会自动转换成8和9，而是提示错误的八进制数</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>        time2 += (<span class="hljs-number">184</span> + temp) * <span class="hljs-number">3600</span> * <span class="hljs-number">24</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>        time2 += (<span class="hljs-number">215</span> + temp) * <span class="hljs-number">3600</span> * <span class="hljs-number">24</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>        time2 += (<span class="hljs-number">245</span> + temp) * <span class="hljs-number">3600</span> * <span class="hljs-number">24</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>        time2 += (<span class="hljs-number">276</span> + temp) * <span class="hljs-number">3600</span> * <span class="hljs-number">24</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>        time2 += (<span class="hljs-number">306</span> + temp) * <span class="hljs-number">3600</span> * <span class="hljs-number">24</span>;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-comment">//cout &lt;&lt; time2 &lt;&lt; endl;</span><br>    time2 += (day - <span class="hljs-number">1</span>) * <span class="hljs-number">24</span> * <span class="hljs-number">3600</span>;<br>    <span class="hljs-comment">//整的年月日的时间计算加上最后一日内的时分秒时间计算</span><br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> res = time1 + time2;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//1970/02/01 00:00:00</span><br>    <span class="hljs-comment">//2716/02/02 00:00:00</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给素材分类，若作品1中有素材1和素材2，则认为素材1和素材2为一类，若作品2中有素材2和素材3，那么此后认为素材1、2、3为一类&lt;/p&gt;
&lt;p&gt;输入：第一行为作品数n，此后n行中每行第一位为该作品中的素材总数m，此后m个数字为素材名（int型）&lt;/p&gt;
&lt;p&gt;输出：素材的分
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://chasencenge.github.io/categories/Algorithm/"/>
    
      <category term="C++" scheme="https://chasencenge.github.io/categories/Algorithm/C/"/>
    
    
      <category term="C++" scheme="https://chasencenge.github.io/tags/C/"/>
    
      <category term="Algorithm" scheme="https://chasencenge.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>网易20秋招Unity工程师笔试编程题</title>
    <link href="https://chasencenge.github.io/2020/07/31/%E7%BD%91%E6%98%9320%E7%A7%8B%E6%8B%9BUnity%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%AC%94%E8%AF%95%E7%BC%96%E7%A8%8B%E9%A2%98/"/>
    <id>https://chasencenge.github.io/2020/07/31/网易20秋招Unity工程师笔试编程题/</id>
    <published>2020-07-31T14:25:33.000Z</published>
    <updated>2020-07-31T16:12:44.900Z</updated>
    
    <content type="html"><![CDATA[<p>定义S(n)，表示n在十进制下的各位数字和。</p><p>现在给定一个x,请你求出最小正整数n，满足x&lt;=S(n)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-keyword">int</span> num;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; num;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; resV;<br>    <span class="hljs-built_in">string</span> a = <span class="hljs-string">"9"</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>; n &lt; num; n++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> x;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; x;<br>        <span class="hljs-comment">//long long int multi = 1;</span><br>        <span class="hljs-built_in">string</span> res;<br>        <span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">9</span>)<br>        &#123;<br>            x -= <span class="hljs-number">9</span>;<br>            res = a + res;<br>            <span class="hljs-comment">//multi *= 10;</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (x != <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-comment">//res += multi * x;</span><br>            res = to_string(x) + res;<br>        &#125;<br>        resV.push_back(res);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>; n &lt; num; n++)<br>    &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; resV[n] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>小易给定你数字A, B (A &lt; B)和系数p, q。每次操作你可以将A变成A + p或者将p变成p * q。问至少几次操作使得B &lt;= A。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-keyword">int</span> num;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; num;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span>&gt; resV;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>; n &lt; num; n++)<br>    &#123;<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> a;<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> b;<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> p;<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> q;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; p &gt;&gt; q;<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (b - a &gt; p)<br>        &#123;<br>            <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> temp = b - a;<br>            <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> multiNum = p;<br><br>            <span class="hljs-keyword">while</span> (temp &gt; multiNum)<br>            &#123;<br>                multiNum *= q;<br>                res++;<br>            &#125;<br>            res++;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            res++;<br>        &#125;<br>        resV.push_back(res);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>; n &lt; num; n++)<br>    &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; resV[n] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>小易定义一个数字序列是完美的，当且仅当对于任意2 &lt;= i &lt;= n，都满足<img src="https://www.nowcoder.com/equation?tex=%5Csum_%7B1%20%5Cleq%20j%20%3C%20i%7D%7BA_%7Bj%7D%7D%20%5Cleq%20A_%7Bi%7D" alt="img">，即每个数字都要大于等于前面所有数字的和。<br>现在给定数字序列A<del>i</del>，小易想请你从中找出最长的一段连续子序列，满足它是完美的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; resV;<br>    <span class="hljs-keyword">int</span> num;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; num;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; num; i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> tempLength = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> maxLength = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; n;<br>        <span class="hljs-keyword">int</span> serialNum;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; serialNum;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; serialNum; j++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> data;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; data;<br>            n.push_back(data);<br>        &#125;<br>        <span class="hljs-keyword">int</span> compute = n[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt; serialNum; k++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (n[k] &gt;= compute)<br>            &#123;<br>                compute += n[k];<br>                tempLength++;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                maxLength = max(maxLength, tempLength);<br>                tempLength = <span class="hljs-number">1</span>;<br>                compute = n[k];<br>            &#125;<br>        &#125;<br>        resV.push_back(maxLength);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; num; i++)<br>    &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; resV[i] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>小易的公司一共有n名员工, 第i个人每个月的薪酬是x<del>i</del>万元。<br>现在小易的老板向小易提了m次询问, 每次询问老板都会给出一个整数k, 小易要快速回答老板工资等于k的员工的数量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br><br>    <span class="hljs-keyword">int</span> people, question;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; people &gt;&gt; question;<br>    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">resV</span><span class="hljs-params">(question, <span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; salaryV;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; questionV;<br>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">size_t</span>&gt; questionMap;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; people; i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> salary;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; salary;<br>        salaryV.push_back(salary);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; question; i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> data;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; data;<br>        questionV.push_back(data);<br>        questionMap[to_string(data)];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; people; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (questionMap.find(to_string(salaryV[i])) != questionMap.end())<br>        &#123;<br>            ++questionMap[to_string(salaryV[i])];<br>        &#125;<br>    &#125;<br><br>   <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; question; i++)<br>    &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; questionMap.find(to_string(questionV[i]))-&gt;second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;定义S(n)，表示n在十进制下的各位数字和。&lt;/p&gt;
&lt;p&gt;现在给定一个x,请你求出最小正整数n，满足x&amp;lt;=S(n)。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://chasencenge.github.io/categories/Algorithm/"/>
    
      <category term="C++" scheme="https://chasencenge.github.io/categories/Algorithm/C/"/>
    
    
      <category term="C++" scheme="https://chasencenge.github.io/tags/C/"/>
    
      <category term="Algorithm" scheme="https://chasencenge.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Pyplot绘图</title>
    <link href="https://chasencenge.github.io/2020/07/27/Pyplot%E7%BB%98%E5%9B%BE/"/>
    <id>https://chasencenge.github.io/2020/07/27/Pyplot绘图/</id>
    <published>2020-07-27T12:56:31.000Z</published>
    <updated>2020-07-27T13:20:21.018Z</updated>
    
    <content type="html"><![CDATA[<h4 id="标识散点：plt-scatter-x-y"><a href="#标识散点：plt-scatter-x-y" class="headerlink" title="标识散点：plt.scatter(x, y)"></a>标识散点：plt.scatter(x, y)</h4><p>可选项s修改散点大小，color修改颜色</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.scatter(thisNodeLoc[<span class="hljs-number">0</span>], thisNodeLoc[<span class="hljs-number">1</span>], s=<span class="hljs-number">10</span>, color=<span class="hljs-string">'b'</span>)<br></code></pre></td></tr></table></figure><h4 id="连线：plt-plot-x1-y1-x2-y2"><a href="#连线：plt-plot-x1-y1-x2-y2" class="headerlink" title="连线：plt.plot([x1, y1], [x2, y2])"></a>连线：plt.plot([x1, y1], [x2, y2])</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.plot([thisNodeLoc[<span class="hljs-number">0</span>], sendToNodeLoc[<span class="hljs-number">0</span>]], [thisNodeLoc[<span class="hljs-number">1</span>], sendToNodeLoc[<span class="hljs-number">1</span>]])<br></code></pre></td></tr></table></figure><h4 id="注释文字：plt-annotate-txt-xy-xytext"><a href="#注释文字：plt-annotate-txt-xy-xytext" class="headerlink" title="注释文字：plt.annotate(txt, xy=(), xytext=())"></a>注释文字：plt.annotate(txt, xy=(), xytext=())</h4><p>xy处填注释点坐标，xytext处填文本位置，可加偏移offset</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.annotate(thisNodeLoc, xy=(thisNodeLoc[<span class="hljs-number">0</span>], thisNodeLoc[<span class="hljs-number">1</span>]), xytext=(thisNodeLoc[<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>, thisNodeLoc[<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><h4 id="限制坐标区间："><a href="#限制坐标区间：" class="headerlink" title="限制坐标区间："></a>限制坐标区间：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.xlim(<span class="hljs-number">-2200</span>,<span class="hljs-number">2200</span>)<br>plt.ylim(<span class="hljs-number">-2200</span>,<span class="hljs-number">2200</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, nodeNum):<br>    thisNodeLoc = [nodes[n].locX, nodes[n].locY]<br>    sendToNodeLoc = [nodes[n].sendTo.locX, nodes[n].sendTo.locY]<br>    plt.scatter(thisNodeLoc[<span class="hljs-number">0</span>], thisNodeLoc[<span class="hljs-number">1</span>], s=<span class="hljs-number">10</span>, color=<span class="hljs-string">'b'</span>)<br>    plt.plot([thisNodeLoc[<span class="hljs-number">0</span>], sendToNodeLoc[<span class="hljs-number">0</span>]], [thisNodeLoc[<span class="hljs-number">1</span>], sendToNodeLoc[<span class="hljs-number">1</span>]])<br>    plt.annotate(thisNodeLoc, xy=(thisNodeLoc[<span class="hljs-number">0</span>], thisNodeLoc[<span class="hljs-number">1</span>]), xytext=(thisNodeLoc[<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>, thisNodeLoc[<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>))<br><br>plt.xlim(<span class="hljs-number">-2200</span>,<span class="hljs-number">2200</span>)<br>plt.ylim(<span class="hljs-number">-2200</span>,<span class="hljs-number">2200</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p>最后记得用<code>plt.show()</code>将其显示出来</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;标识散点：plt-scatter-x-y&quot;&gt;&lt;a href=&quot;#标识散点：plt-scatter-x-y&quot; class=&quot;headerlink&quot; title=&quot;标识散点：plt.scatter(x, y)&quot;&gt;&lt;/a&gt;标识散点：plt.scatter(x, y)&lt;/
      
    
    </summary>
    
    
      <category term="Python" scheme="https://chasencenge.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chasencenge.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>百度之星2020---1003.Permutation</title>
    <link href="https://chasencenge.github.io/2020/07/26/%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F2020-1003-Permutation/"/>
    <id>https://chasencenge.github.io/2020/07/26/百度之星2020-1003-Permutation/</id>
    <published>2020-07-26T10:04:53.000Z</published>
    <updated>2020-07-26T10:28:00.105Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Problem Description</strong></p><p>一开始有 n个数，他们按 1…n的顺序排列，要求交换最多 m对数字（同一个数字可以参与多次交换），使得逆序对数目最大。</p><p>对于一个序列 A，如果存在正整数 i, j使得1≤<em>i</em>&lt;<em>j</em>≤<em>n</em> 而且 A[i] &gt; A[j]，则 &lt;<em>A</em>[<em>i</em>],<em>A</em>[<em>j</em>]&gt; 这个有序对称为 A的一个逆序对。</p><p><strong>Input</strong></p><p>第一行一个正整数test (1≤test≤100000) 表示数据组数。</p><p>对于每组数据，一行两个整数 n，m (1≤<em>n</em>≤1000000,0≤<em>m</em>≤1000000) 表示数字个数和最多可以交换的数字对数。</p><p><strong>Output</strong></p><p>对于每组数据，一行一个整数表示答案。</p><p><strong>Sample Input</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">6<br>1 1<br>2 0<br>2 1<br>3 1<br>4 1<br>4 2<br></code></pre></td></tr></table></figure><p><strong>Sample Output</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined">0<br>0<br>1<br>3<br>5<br>6<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 对每个（n, 1）结果都为：2 * n - 3</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">com</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span><br></span>&#123;<br>    <span class="hljs-keyword">int</span> com = <span class="hljs-number">2</span> * n - <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">return</span> com;<br>&#125;<br><br><span class="hljs-comment">// 把（n, m）转换为（n, 1）, (n -2, 1)...(n - 2m + 2, 1)之和的形式并利用com()计算结果</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">arr</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m)</span><br></span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>    &#123;<br>        res += com(n - <span class="hljs-number">2</span> * i);<br>        <span class="hljs-comment">//cout &lt;&lt; i &lt;&lt;" "&lt;&lt; res&lt;&lt;endl;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">compute</span><span class="hljs-params">()</span> <br></span>&#123;<br>    <br>    <span class="hljs-keyword">int</span> groupNum;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; groupNum;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; output;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; groupNum; i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> n;<br>        <span class="hljs-keyword">int</span> m;<br>        <span class="hljs-comment">//cout &lt;&lt; "choiseNum:" &lt;&lt; choiseNum &lt;&lt; endl;</span><br>        <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>            <span class="hljs-comment">//cout &lt;&lt; "b:" &lt;&lt; b &lt;&lt; endl;</span><br>        <span class="hljs-built_in">cin</span> &gt;&gt; m;<br>            <span class="hljs-comment">//cout &lt;&lt; "c:" &lt;&lt; c &lt;&lt; endl;</span><br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span> || m == <span class="hljs-number">0</span>)<br>        &#123;<br>            output.push_back(<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * m &lt; n)<br>            &#123;<br>                <span class="hljs-keyword">int</span> res = arr(n, m);<br>                output.push_back(res);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <br>            &#123;<br>                m = n / <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">int</span> res = arr(n, m);<br>                output.push_back(res);<br>            &#125;<br>        &#125;<br>        &#125;<br>    <span class="hljs-keyword">return</span> output;<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; res = compute();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; res.size(); i++)<br>    &#123;<br>        <span class="hljs-comment">//cout &lt;&lt; res[i];</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, res[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Problem Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一开始有 n个数，他们按 1…n的顺序排列，要求交换最多 m对数字（同一个数字可以参与多次交换），使得逆序对数目最大。&lt;/p&gt;
&lt;p&gt;对于一个序列 A，如果存在正整数 i, j使得1≤&lt;
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://chasencenge.github.io/categories/Algorithm/"/>
    
      <category term="C++" scheme="https://chasencenge.github.io/categories/Algorithm/C/"/>
    
    
      <category term="C++" scheme="https://chasencenge.github.io/tags/C/"/>
    
      <category term="Algorithm" scheme="https://chasencenge.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>百度之星2020---1002.Game</title>
    <link href="https://chasencenge.github.io/2020/07/26/%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F2020-1002-Game/"/>
    <id>https://chasencenge.github.io/2020/07/26/百度之星2020-1002-Game/</id>
    <published>2020-07-26T10:04:18.000Z</published>
    <updated>2020-07-26T10:27:47.180Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Problem Description</strong></p><p><em>Alice</em> 和 <em>Bob</em> 在玩游戏。</p><p>桌面上有两堆金币，少的那堆有 x 个金币，多的那堆有 2x 个金币。</p><p>假设金币可以被无限细分。<em>Alice</em> 和 <em>Bob</em> 事先都不知道 x是几，但是他们都知道 x是一个 (0, 1]之间均匀分布的随机实数。</p><p><em>Alice</em> 会等概率的被分配到其中的一堆金币，<em>Bob</em> 会得到另一堆。x的值和两堆金币的分配是相互独立的。</p><p>拿到金币以后，<em>Alice</em> 会马上数清自己拿到多少金币。然后 <em>Alice</em> 可以选择是否和 <em>Bob</em> 那堆换。</p><p>给定 <em>Alice</em> 拿到的金币数目，请问 <em>Alice</em> 要不要交换，使得她期望能得到的金币数目更多？</p><p>如果交换期望得到的金币数目多于不交换期望得到的金币数目，输出交换，否则不交换。</p><p><strong>Input</strong></p><p>第一行一个正整数test (1≤test≤200000) 表示数据组数。</p><p>接下来每行一个小数p(0&lt;p≤2)，p最多保留五位小数，表示 <em>Alice</em> 拿到的金币数目。</p><p><strong>Output</strong></p><p>对于每组数据，输出 <em>Yes</em> 表示需要交换，输出 <em>No</em> 表示不要交换。</p><p><strong>Sample Input</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">1<br>1.00000<br></code></pre></td></tr></table></figure><p><strong>Sample Output</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">Yes<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">compute</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-keyword">int</span> groupNum;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; groupNum;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; output;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; groupNum; i++)<br>    &#123;<br>        <span class="hljs-keyword">float</span> num;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; num;<br>        <span class="hljs-comment">//float exception;</span><br>        <span class="hljs-keyword">if</span> (num &gt; <span class="hljs-number">1</span>)<br>        &#123;<br>            output.push_back(<span class="hljs-string">"No"</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * num * <span class="hljs-number">0.5</span> + num / <span class="hljs-number">2</span> * <span class="hljs-number">0.5</span> &gt; num)<br>            &#123;<br>                output.push_back(<span class="hljs-string">"Yes"</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                output.push_back(<span class="hljs-string">"No"</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> output;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; res = compute();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; res.size(); i++)<br>    &#123;<br>        <span class="hljs-comment">//cout &lt;&lt; res[i];</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s\n"</span>, res[i].c_str());<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Problem Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Alice&lt;/em&gt; 和 &lt;em&gt;Bob&lt;/em&gt; 在玩游戏。&lt;/p&gt;
&lt;p&gt;桌面上有两堆金币，少的那堆有 x 个金币，多的那堆有 2x 个金币。&lt;/p&gt;
&lt;p&gt;假设金币可以被无
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://chasencenge.github.io/categories/Algorithm/"/>
    
      <category term="C++" scheme="https://chasencenge.github.io/categories/Algorithm/C/"/>
    
    
      <category term="C++" scheme="https://chasencenge.github.io/tags/C/"/>
    
      <category term="Algorithm" scheme="https://chasencenge.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>百度之星2020---1001.Discount</title>
    <link href="https://chasencenge.github.io/2020/07/26/%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F2020-1001-Discount/"/>
    <id>https://chasencenge.github.io/2020/07/26/百度之星2020-1001-Discount/</id>
    <published>2020-07-26T10:03:53.000Z</published>
    <updated>2020-07-26T10:21:02.628Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Problem Description</strong></p><p>学皇来到了一个餐馆吃饭。他觉得这家餐馆很好吃，于是就想办个会员。</p><p>一共有 n种会员充值卡套餐，假设学皇这餐饭的消费为 a元，选择第 i种套餐，需要充值 b[i] * a 的钱，这次吃饭可以打 c[i]×10 折，由充值的钱支付（即这次吃饭只需要从充值金额中扣除 a×<em>c</em>[i] 元）。以后用剩余的充值的钱吃饭不再打折。</p><p>请问学皇应该选择哪个套餐（必须选择恰好一个套餐），使得优惠的比例最大？</p><p>优惠比例的定义是把充的钱用完以后，(本来应该付的钱 - 实际付的钱) / 本来应该付的钱。在这个题目里，实际付的钱就是这次充值的花费。</p><p><strong>Input</strong></p><p>第一行一个整数 test(1≤test≤100) 表示数据组数。</p><p>对于每组数据，第一行一个正整数 n(1≤n≤100) 表示套餐的数目。</p><p>接下来 n行，每行一个正整数 b[i]和一个小数 c[i]。</p><p><strong>Output</strong></p><p>对于每组数据，输出一个五位小数表示最大的优惠比例。如果小数点后超过五位，四舍五入到五位。</p><p><strong>Sample Input</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">1<br>2<br>2 0.5<br>3 0.1<br></code></pre></td></tr></table></figure><p><strong>Sample Output</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">0.23077<br><br>样例解释<br>对于第一种套餐，优惠比例为 0.5a / (2a + 0.5a） = 0.2；<br>对于第二种套餐，优惠比例为 0.9a / (3a + 0.9a） = 9 / 39；<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">float</span>&gt; <span class="hljs-title">compute</span><span class="hljs-params">()</span> <br></span>&#123;<br>    <span class="hljs-keyword">int</span> groupNum;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; groupNum;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">float</span>&gt; output;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; groupNum; i++)<br>    &#123;<br>        <span class="hljs-keyword">float</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> choiseNum;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; choiseNum;<br>        <span class="hljs-comment">//cout &lt;&lt; "choiseNum:" &lt;&lt; choiseNum &lt;&lt; endl;</span><br>        <span class="hljs-keyword">int</span> b;<br>        <span class="hljs-keyword">float</span> c;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; choiseNum; j++)<br>        &#123;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; b;<br>            <span class="hljs-comment">//cout &lt;&lt; "b:" &lt;&lt; b &lt;&lt; endl;</span><br>            <span class="hljs-built_in">cin</span> &gt;&gt; c;<br>            <span class="hljs-comment">//cout &lt;&lt; "c:" &lt;&lt; c &lt;&lt; endl;</span><br>            <span class="hljs-keyword">float</span> temp = (<span class="hljs-number">1</span> - c) / (b + <span class="hljs-number">1</span> - c);<br>            res = max(res, temp);<br>        &#125;<br>        output.push_back(res);<br>    &#125;<br>    <span class="hljs-keyword">return</span> output;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">float</span>&gt; res = compute();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; res.size(); i++)<br>    &#123;<br>        <span class="hljs-comment">//cout &lt;&lt; res[i];</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.5f\n"</span>, res[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Problem Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;学皇来到了一个餐馆吃饭。他觉得这家餐馆很好吃，于是就想办个会员。&lt;/p&gt;
&lt;p&gt;一共有 n种会员充值卡套餐，假设学皇这餐饭的消费为 a元，选择第 i种套餐，需要充值 b[i] * a 的
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://chasencenge.github.io/categories/Algorithm/"/>
    
      <category term="C++" scheme="https://chasencenge.github.io/categories/Algorithm/C/"/>
    
    
      <category term="C++" scheme="https://chasencenge.github.io/tags/C/"/>
    
      <category term="Algorithm" scheme="https://chasencenge.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>游戏客户端面经知识点</title>
    <link href="https://chasencenge.github.io/2020/07/24/%E6%B8%B8%E6%88%8F%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%9D%A2%E7%BB%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://chasencenge.github.io/2020/07/24/游戏客户端面经知识点/</id>
    <published>2020-07-24T05:40:54.000Z</published>
    <updated>2020-07-24T05:43:25.394Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Unity" scheme="https://chasencenge.github.io/categories/Unity/"/>
    
      <category term="Unreal" scheme="https://chasencenge.github.io/categories/Unity/Unreal/"/>
    
    
      <category term="Unity" scheme="https://chasencenge.github.io/tags/Unity/"/>
    
      <category term="Unreal" scheme="https://chasencenge.github.io/tags/Unreal/"/>
    
  </entry>
  
  <entry>
    <title>Unity项目对接到Laya</title>
    <link href="https://chasencenge.github.io/2020/07/21/Unity%E9%A1%B9%E7%9B%AE%E5%AF%B9%E6%8E%A5%E5%88%B0Laya/"/>
    <id>https://chasencenge.github.io/2020/07/21/Unity项目对接到Laya/</id>
    <published>2020-07-21T09:29:24.000Z</published>
    <updated>2020-07-24T02:30:25.993Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Unity-API"><a href="#Unity-API" class="headerlink" title="Unity API"></a>Unity API</h2><h4 id="GameObject-FindWithTag"><a href="#GameObject-FindWithTag" class="headerlink" title="GameObject.FindWithTag"></a>GameObject.FindWithTag</h4><p>通过Tag名找到游戏对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c#">ring = GameObject.FindWithTag(&quot;ring&quot;)<br></code></pre></td></tr></table></figure><table><thead><tr><th><a href="https://docs.unity3d.com/cn/current/ScriptReference/GameObject.FindWithTag.html" target="_blank" rel="noopener">FindWithTag</a></th><th>返回一个标记为 tag 的活动 GameObject。如果未找到 GameObject，则返回 null。</th></tr></thead><tbody><tr><td><a href="https://docs.unity3d.com/cn/current/ScriptReference/GameObject.Find.html" target="_blank" rel="noopener">Find</a></td><td>按 name 查找 GameObject，然后返回它。</td></tr><tr><td></td><td></td></tr></tbody></table><h4 id="Rigidbody"><a href="#Rigidbody" class="headerlink" title="Rigidbody"></a><a href="https://docs.unity3d.com/cn/current/ScriptReference/Rigidbody.html" target="_blank" rel="noopener">Rigidbody</a></h4><p>Rigidbody是刚体，可以为游戏对象赋予物理属性，向对象添加 Rigidbody 组件后，其运动将受到 Unity 物理引擎的控制。即使不添加任何代码，Rigidbody 对象也受到向下的重力，并在与其他对象碰撞时作出反应（需有适当的collider）</p><table><thead><tr><th><a href="https://docs.unity3d.com/cn/current/ScriptReference/Rigidbody-position.html" target="_blank" rel="noopener">position</a></th><th>刚体的位置</th></tr></thead><tbody><tr><td><a href="https://docs.unity3d.com/cn/current/ScriptReference/Rigidbody-rotation.html" target="_blank" rel="noopener">rotation</a></td><td>刚体的旋转</td></tr><tr><td><a href="https://docs.unity3d.com/cn/current/ScriptReference/Rigidbody-useGravity.html" target="_blank" rel="noopener">useGravity</a></td><td>控制重力是否影响该刚体</td></tr><tr><td><a href="https://docs.unity3d.com/cn/current/ScriptReference/Rigidbody-angularVelocity.html" target="_blank" rel="noopener">angularVelocity</a></td><td>刚体的角速度矢量（以弧度/秒为单位）</td></tr><tr><td><a href="https://docs.unity3d.com/cn/current/ScriptReference/Rigidbody-velocity.html" target="_blank" rel="noopener">velocity</a></td><td>刚体的速度矢量</td></tr></tbody></table><table><thead><tr><th><a href="https://docs.unity3d.com/cn/current/ScriptReference/Rigidbody.AddForce.html" target="_blank" rel="noopener">AddForce</a></th><th>向 Rigidbody 添加力</th></tr></thead><tbody><tr><td><a href="https://docs.unity3d.com/cn/current/ScriptReference/Rigidbody.Sleep.html" target="_blank" rel="noopener">Sleep</a></td><td>强制刚体进入睡眠状态至少一帧</td></tr><tr><td><a href="https://docs.unity3d.com/cn/current/ScriptReference/Rigidbody.AddTorque.html" target="_blank" rel="noopener">AddTorque</a></td><td>向刚体添加扭矩</td></tr></tbody></table><h4 id="Quaternion"><a href="#Quaternion" class="headerlink" title="Quaternion"></a><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Quaternion.html" target="_blank" rel="noopener">Quaternion</a></h4><p>在API中的UnityEngine-&gt;classes，四元数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#">Vector3 dir = hoopPoint.position - ballPoint.position;<br>Quaternion wantedRotation = Quaternion.LookRotation(dir);<br></code></pre></td></tr></table></figure><p>Quaternion.LookRotation(dir)使用指定的 forward 和 upwards 方向创建旋转</p><table><thead><tr><th><a href="https://docs.unity3d.com/cn/current/ScriptReference/Quaternion.AngleAxis.html" target="_blank" rel="noopener">AngleAxis</a></th><th>创建一个围绕 axis 旋转 angle 度的旋转</th></tr></thead><tbody><tr><td><a href="https://docs.unity3d.com/cn/current/ScriptReference/Quaternion.LookRotation.html" target="_blank" rel="noopener">LookRotation</a></td><td>使用指定的 forward 和 upwards 方向创建旋转</td></tr><tr><td></td><td></td></tr></tbody></table><h4 id="GameObject-GetComponent"><a href="#GameObject-GetComponent" class="headerlink" title="GameObject.GetComponent"></a>GameObject.GetComponent</h4><p>GameObject.GetComponent<type>() 在UnityEngine-&gt;classes-&gt;GameObject</type></p><p>返回 GameObject 中类型为 type 的所有组件</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c#">void Start()<br>&#123;<br>    Component[] hingeJoints;<br>    hingeJoints = GetComponents(typeof(HingeJoint));<br><br>    foreach (HingeJoint joint in hingeJoints)<br>        joint.useSpring = false;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ForceMode"><a href="#ForceMode" class="headerlink" title="ForceMode"></a><a href="https://docs.unity3d.com/cn/current/ScriptReference/ForceMode.html" target="_blank" rel="noopener">ForceMode</a></h4><p>位于UnityEngine-&gt;Enumerations</p><p>使用 ForceMode 指定如何使用 <a href="https://docs.unity3d.com/cn/current/ScriptReference/Rigidbody.AddForce.html" target="_blank" rel="noopener">Rigidbody.AddForce</a> 来施加力。</p><p>AddForce 函数可定义自己的力矢量，以及选择如何将此力施加于 GameObject（此 GameObject 必须附加有 Rigidbody 组件），从而影响您的 GameObject 的移动方式。</p><table><thead><tr><th><a href="https://docs.unity3d.com/cn/current/ScriptReference/ForceMode.Force.html" target="_blank" rel="noopener">Force</a></th><th>向此刚体添加连续力，使用其质量</th></tr></thead><tbody><tr><td><a href="https://docs.unity3d.com/cn/current/ScriptReference/ForceMode.Acceleration.html" target="_blank" rel="noopener">Acceleration</a></td><td>向此刚体添加连续加速度，忽略其质量</td></tr><tr><td><a href="https://docs.unity3d.com/cn/current/ScriptReference/ForceMode.Impulse.html" target="_blank" rel="noopener">Impulse</a></td><td>向此刚体添加瞬时力冲击，考虑其质量</td></tr><tr><td><a href="https://docs.unity3d.com/cn/current/ScriptReference/ForceMode.VelocityChange.html" target="_blank" rel="noopener">VelocityChange</a></td><td>向此刚体添加瞬时速度变化，忽略其质量</td></tr></tbody></table><h4 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h4><p>对象的位置、旋转和缩放</p><p>每个变换都可以有一个父级，使得能够分层应用位置、旋转和缩放</p><table><thead><tr><th><a href="https://docs.unity3d.com/cn/current/ScriptReference/Transform-parent.html" target="_blank" rel="noopener">parent</a></th><th>变换的父级</th></tr></thead><tbody><tr><td><a href="https://docs.unity3d.com/cn/current/ScriptReference/Transform-position.html" target="_blank" rel="noopener">position</a></td><td>世界空间中的变换位置</td></tr><tr><td><a href="https://docs.unity3d.com/cn/current/ScriptReference/Transform-rotation.html" target="_blank" rel="noopener">rotation</a></td><td>一个四元数，用于存储变换在世界空间中的旋转</td></tr><tr><td><a href="https://docs.unity3d.com/cn/current/ScriptReference/Transform-localEulerAngles.html" target="_blank" rel="noopener">localEulerAngles</a></td><td>以欧拉角表示的相对于父变换旋转的旋转（以度为单位）</td></tr><tr><td><a href="https://docs.unity3d.com/cn/current/ScriptReference/Transform-localPosition.html" target="_blank" rel="noopener">localPosition</a></td><td>相对于父变换的变换位置</td></tr><tr><td><a href="https://docs.unity3d.com/cn/current/ScriptReference/Transform-localRotation.html" target="_blank" rel="noopener">localRotation</a></td><td>相对于父级变换旋转的变换旋转</td></tr><tr><td><a href="https://docs.unity3d.com/cn/current/ScriptReference/Transform-localScale.html" target="_blank" rel="noopener">localScale</a></td><td>相对于父对象的变换缩放</td></tr><tr><td><a href="https://docs.unity3d.com/cn/current/ScriptReference/Transform-childCount.html" target="_blank" rel="noopener">childCount</a></td><td>父变换具有的子项数</td></tr></tbody></table><h4 id="Camera-ScreenPointToRay"><a href="#Camera-ScreenPointToRay" class="headerlink" title="Camera.ScreenPointToRay"></a><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Camera.html" target="_blank" rel="noopener">Camera.ScreenPointToRay</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c#">Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);<br></code></pre></td></tr></table></figure><h4 id="Physics-Raycast"><a href="#Physics-Raycast" class="headerlink" title="Physics.Raycast"></a><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Physics.html" target="_blank" rel="noopener">Physics.Raycast</a></h4><p>参数：</p><table><thead><tr><th>origin</th><th>射线在世界坐标系中的起点</th></tr></thead><tbody><tr><td>direction</td><td>射线的方向</td></tr><tr><td>maxDistance</td><td>射线应检查碰撞的最大距离</td></tr><tr><td>layerMask</td><td>层遮罩，用于在投射射线时有选择地忽略碰撞体</td></tr><tr><td>queryTriggerInteraction</td><td>指定该查询是否应该命中触发器</td></tr></tbody></table><p><strong>bool</strong> 如果射线与任何碰撞体相交，返回 true，否则为 false。</p><h4 id="RaycastHit"><a href="#RaycastHit" class="headerlink" title="RaycastHit"></a><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/RaycastHit.html" target="_blank" rel="noopener">RaycastHit</a></h4><p>用于从射线投射获取信息的结构</p><table><thead><tr><th><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/RaycastHit-barycentricCoordinate.html" target="_blank" rel="noopener">barycentricCoordinate</a></th><th>命中的三角形的重心坐标</th></tr></thead><tbody><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/RaycastHit-collider.html" target="_blank" rel="noopener">collider</a></td><td>命中的 Collider</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/RaycastHit-distance.html" target="_blank" rel="noopener">distance</a></td><td>从射线原点到撞击点的距离</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/RaycastHit-lightmapCoord.html" target="_blank" rel="noopener">lightmapCoord</a></td><td>撞击点处的 UV 光照贴图坐标</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/RaycastHit-normal.html" target="_blank" rel="noopener">normal</a></td><td>射线命中的表面的法线</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/RaycastHit-point.html" target="_blank" rel="noopener">point</a></td><td>世界空间中射线命中碰撞体的撞击点</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/RaycastHit-rigidbody.html" target="_blank" rel="noopener">rigidbody</a></td><td>命中的碰撞体的 Rigidbody。如果该碰撞体未附加到刚体，则值为 /null/</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/RaycastHit-textureCoord.html" target="_blank" rel="noopener">textureCoord</a></td><td>碰撞位置处的 UV 纹理坐标</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/RaycastHit-textureCoord2.html" target="_blank" rel="noopener">textureCoord2</a></td><td>撞击点处的辅助 UV 纹理坐标</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/RaycastHit-transform.html" target="_blank" rel="noopener">transform</a></td><td>命中的刚体或碰撞体的 Transform</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/RaycastHit-triangleIndex.html" target="_blank" rel="noopener">triangleIndex</a></td><td>命中的三角形的索引</td></tr></tbody></table><h4 id="Collider"><a href="#Collider" class="headerlink" title="Collider"></a><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Collider.html" target="_blank" rel="noopener">Collider</a></h4><p>所有碰撞体的基类</p><p><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/BoxCollider.html" target="_blank" rel="noopener">BoxCollider</a>、<a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/SphereCollider.html" target="_blank" rel="noopener">SphereCollider</a>、<a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/CapsuleCollider.html" target="_blank" rel="noopener">CapsuleCollider</a>、<a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/MeshCollider.html" target="_blank" rel="noopener">MeshCollider</a>、<a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/PhysicMaterial.html" target="_blank" rel="noopener">PhysicMaterial</a>、<a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Rigidbody.html" target="_blank" rel="noopener">Rigidbody</a></p><p>如果在游戏过程中需要移动具有 Collider 的对象，还应将 Rigidbody 组件附加到该对象。如果不想使该对象与其他对象进行物理交互，可将 Rigidbody 设置为运动刚体</p><p>变量：</p><table><thead><tr><th><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Collider-attachedRigidbody.html" target="_blank" rel="noopener">attachedRigidbody</a></th><th>碰撞体附加到的刚体</th></tr></thead><tbody><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Collider-bounds.html" target="_blank" rel="noopener">bounds</a></td><td>碰撞体的世界空间包围体积（只读）</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Collider-contactOffset.html" target="_blank" rel="noopener">contactOffset</a></td><td>该碰撞体的接触偏移值</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Collider-enabled.html" target="_blank" rel="noopener">enabled</a></td><td>启用的 Collider 将与其他 Collider 碰撞，禁用的 Collider 不会这样</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Collider-isTrigger.html" target="_blank" rel="noopener">isTrigger</a></td><td>碰撞体是不是触发器</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Collider-material.html" target="_blank" rel="noopener">material</a></td><td>碰撞体使用的材质</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Collider-sharedMaterial.html" target="_blank" rel="noopener">sharedMaterial</a></td><td>该碰撞体的共享物理材质</td></tr></tbody></table><p>消息：</p><table><thead><tr><th><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Collider.OnCollisionEnter.html" target="_blank" rel="noopener">OnCollisionEnter</a></th><th>当该碰撞体/刚体已开始接触另一个刚体/碰撞体时，调用 OnCollisionEnter</th></tr></thead><tbody><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Collider.OnCollisionExit.html" target="_blank" rel="noopener">OnCollisionExit</a></td><td>当该碰撞体/刚体已停止接触另一个刚体/碰撞体时，调用 OnCollisionExit</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Collider.OnCollisionStay.html" target="_blank" rel="noopener">OnCollisionStay</a></td><td>对应正在接触刚体/碰撞体的每一个碰撞体/刚体，每帧调用一次 OnCollisionStay</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Collider.OnTriggerEnter.html" target="_blank" rel="noopener">OnTriggerEnter</a></td><td>当 Collider other 事件进入该触发器时调用 OnTriggerEnter</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Collider.OnTriggerExit.html" target="_blank" rel="noopener">OnTriggerExit</a></td><td>当 Collider other 已停止接触该触发器时调用 OnTriggerExit</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Collider.OnTriggerStay.html" target="_blank" rel="noopener">OnTriggerStay</a></td><td>对于正在接触该触发器的每个其他 Collider，“几乎”所有帧都调用 OnTriggerStay。此函数位于物理计时器上，因此它不必运行每个帧</td></tr></tbody></table><h5 id="继承的成员"><a href="#继承的成员" class="headerlink" title="继承的成员"></a>继承的成员</h5><p>变量：</p><table><thead><tr><th><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component-gameObject.html" target="_blank" rel="noopener">gameObject</a></th><th>此组件附加到的游戏对象。始终将组件附加到游戏对象</th></tr></thead><tbody><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component-tag.html" target="_blank" rel="noopener">tag</a></td><td>此游戏对象的标签</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component-transform.html" target="_blank" rel="noopener">transform</a></td><td>附加到此 GameObject 的 Transform</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Object-hideFlags.html" target="_blank" rel="noopener">hideFlags</a></td><td>该对象应该隐藏、随场景一起保存还是由用户修改</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Object-name.html" target="_blank" rel="noopener">name</a></td><td>对象的名称</td></tr></tbody></table><p>公共函数：</p><table><thead><tr><th><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component.BroadcastMessage.html" target="_blank" rel="noopener">BroadcastMessage</a></th><th>调用此游戏对象或其任何子项中的每个 MonoBehaviour 上名为 methodName 的方法</th></tr></thead><tbody><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component.CompareTag.html" target="_blank" rel="noopener">CompareTag</a></td><td>此游戏对象是否使用 tag 进行了标记</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component.GetComponent.html" target="_blank" rel="noopener">GetComponent</a></td><td>如果游戏对象附加了类型为 type 的组件，则将其返回，否则返回 null</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component.GetComponentInChildren.html" target="_blank" rel="noopener">GetComponentInChildren</a></td><td>使用深度首次搜索返回 GameObject 或其任何子项中类型为 type 的组件</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component.GetComponentInParent.html" target="_blank" rel="noopener">GetComponentInParent</a></td><td>返回 GameObject 或其任何父项中类型为 type 的组件</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component.GetComponents.html" target="_blank" rel="noopener">GetComponents</a></td><td>返回 GameObject 中类型为 type 的所有组件</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component.GetComponentsInChildren.html" target="_blank" rel="noopener">GetComponentsInChildren</a></td><td>返回 GameObject 或其任何子项中类型为 type 的所有组件</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component.GetComponentsInParent.html" target="_blank" rel="noopener">GetComponentsInParent</a></td><td>返回 GameObject 或其任何父项中类型为 type 的所有组件</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component.SendMessage.html" target="_blank" rel="noopener">SendMessage</a></td><td>调用此游戏对象中的每个 MonoBehaviour 上名为 methodName 的方法</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component.SendMessageUpwards.html" target="_blank" rel="noopener">SendMessageUpwards</a></td><td>调用此游戏对象中的每个 MonoBehaviour 上或此行为的每个父级上名为 methodName 的方法</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Object.GetInstanceID.html" target="_blank" rel="noopener">GetInstanceID</a></td><td>返回对象的实例 ID</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Object.ToString.html" target="_blank" rel="noopener">ToString</a></td><td>返回 GameObject 的名称</td></tr></tbody></table><p>静态函数：</p><table><thead><tr><th><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Object.Destroy.html" target="_blank" rel="noopener">Destroy</a></th><th>删除 GameObject、组件或资源</th></tr></thead><tbody><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Object.DestroyImmediate.html" target="_blank" rel="noopener">DestroyImmediate</a></td><td>立即销毁对象 /obj/。强烈建议您改用 Destroy</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Object.DontDestroyOnLoad.html" target="_blank" rel="noopener">DontDestroyOnLoad</a></td><td>在加载新的 Scene 时，请勿销毁 Object</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Object.FindObjectOfType.html" target="_blank" rel="noopener">FindObjectOfType</a></td><td>返回第一个类型为 type 的已加载的激活对象</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Object.FindObjectsOfType.html" target="_blank" rel="noopener">FindObjectsOfType</a></td><td>返回所有类型为 type 的已加载的激活对象的列表</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Object.Instantiate.html" target="_blank" rel="noopener">Instantiate</a></td><td>克隆 original 对象并返回克隆对象</td></tr></tbody></table><h2 id="C"><a href="#C" class="headerlink" title="C#"></a>C#</h2><h4 id="out"><a href="#out" class="headerlink" title="out"></a>out</h4><p>out同ref一样，都是有一级地址传递的，也就是，带有这两个修饰符的参数，如果被修改了原来的值，将以新的值作为他的值（在函数执行完毕后，该参数的值将返回给函数调用中使用的变量，有点像C++ &amp;）</p><p>在函数中使用out参数时，必须将其看成尚未赋值。也就是说调用代码可以把已赋值的变量用作out参数，但在函数执行时该变量的值会丢失，所以就算在函数外已经初始化，在函数内也要重新初始化</p><p>示例：</p><p>// 第一行hit不用初始化，参数中hit前加out，尽管Physics.Raycast返回bool，hit已在其中赋值，所以下一个if语句中hit可以调用其对象的属性方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c#">RaycastHit hit;<br>if (Physics.Raycast(ray, out hit, 1000, 1 &lt;&lt; 8))<br>   &#123;<br>if (hit.collider.gameObject.tag == &quot;Basketball&quot; &amp;&amp; !hit.collider.gameObject.GetComponent&lt;BSKBall&gt;().IsShooting())<br>&#123;<br>currentBall = hit.collider.gameObject;<br>Rigidbody r = currentBall.GetComponent&lt;Rigidbody&gt;();<br>r.isKinematic = true;<br><br>Vector3 touchPoint = Camera.main.ScreenToWorldPoint(Input.mousePosition + new Vector3(0, 0, depth));<br>touchPoint.x = Mathf.Clamp(touchPoint.x, leftEdge.transform.position.x + 0.29f, rightEdge.transform.position.x - 0.29f);<br>touchPoint.y = selectBallPosY;<br>currentBall.transform.position = touchPoint;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Unity坐标"><a href="#Unity坐标" class="headerlink" title="Unity坐标"></a>Unity坐标</h4><h5 id="四种坐标："><a href="#四种坐标：" class="headerlink" title="四种坐标："></a>四种坐标：</h5><p>世界坐标(World Space)：游戏物体在创造的世界中的坐标</p><p><strong>transfrom.position</strong>获得的是物体相对于世界坐标的位置</p><p><strong>transfrom.localPosition</strong>获得的是物体相对于父物体坐标的位置</p><!--注：模型Mesh保存的顶点坐标均为局部坐标系下的坐标--><p>屏幕坐标(Screen Space)：以像素记</p><p>视口坐标(Viewport Space)：将屏幕坐标单位化</p><h5 id="坐标转换："><a href="#坐标转换：" class="headerlink" title="坐标转换："></a>坐标转换：</h5><p>物体B相对于物体A的局部坐标：<strong>A.transform.InverseTransformPoint(B)</strong></p><p>屏幕坐标转世界坐标：<strong>Camera.main.ScreenToWorldPoint</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#">Vector3 mousePos = Input.mousePosition;<br>Vector3 screenToWorld = Camera.main.ScreenToWorldPoint(new Vector3(mousePos.x, mousePos.y, -Camera.main.transform.position.z));<br></code></pre></td></tr></table></figure><p>世界坐标转屏幕坐标：<strong>Camera.main.WorldToScreenPoint</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c#">Vector3 worldToScreen = Camera.main.WorldToScreenPoint(transform.position);<br></code></pre></td></tr></table></figure><h4 id="Mathf-Clamp"><a href="#Mathf-Clamp" class="headerlink" title="Mathf.Clamp"></a><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Mathf.html" target="_blank" rel="noopener">Mathf.Clamp</a></h4><p>在给定的最小浮点值和最大浮点值之间钳制给定值。如果在最小和最大范围内，则返回给定值</p><p>如果给定的浮点值小于最小值，则返回最小值。如果给定值大于最大值，则返回最大值。使用 Clamp 可将某个值限制为最小值和最大值定义的某个范围内</p><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><table><thead><tr><th><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component-gameObject.html" target="_blank" rel="noopener">gameObject</a></th><th>此组件附加到的游戏对象。始终将组件附加到游戏对象。</th></tr></thead><tbody><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component-tag.html" target="_blank" rel="noopener">tag</a></td><td>此游戏对象的标签。</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component-transform.html" target="_blank" rel="noopener">transform</a></td><td>附加到此 GameObject 的 Transform。</td></tr></tbody></table><h5 id="公共函数"><a href="#公共函数" class="headerlink" title="公共函数"></a>公共函数</h5><table><thead><tr><th><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component.BroadcastMessage.html" target="_blank" rel="noopener">BroadcastMessage</a></th><th>调用此游戏对象或其任何子项中的每个 MonoBehaviour 上名为 methodName 的方法。</th></tr></thead><tbody><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component.CompareTag.html" target="_blank" rel="noopener">CompareTag</a></td><td>此游戏对象是否使用 tag 进行了标记？</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component.GetComponent.html" target="_blank" rel="noopener">GetComponent</a></td><td>如果游戏对象附加了类型为 type 的组件，则将其返回，否则返回 null。</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component.GetComponentInChildren.html" target="_blank" rel="noopener">GetComponentInChildren</a></td><td>使用深度首次搜索返回 GameObject 或其任何子项中类型为 type 的组件。</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component.GetComponentInParent.html" target="_blank" rel="noopener">GetComponentInParent</a></td><td>返回 GameObject 或其任何父项中类型为 type 的组件。</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component.GetComponents.html" target="_blank" rel="noopener">GetComponents</a></td><td>返回 GameObject 中类型为 type 的所有组件。</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component.GetComponentsInChildren.html" target="_blank" rel="noopener">GetComponentsInChildren</a></td><td>返回 GameObject 或其任何子项中类型为 type 的所有组件。</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component.GetComponentsInParent.html" target="_blank" rel="noopener">GetComponentsInParent</a></td><td>返回 GameObject 或其任何父项中类型为 type 的所有组件。</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component.SendMessage.html" target="_blank" rel="noopener">SendMessage</a></td><td>调用此游戏对象中的每个 MonoBehaviour 上名为 methodName 的方法。</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component.SendMessageUpwards.html" target="_blank" rel="noopener">SendMessageUpwards</a></td><td>调用此游戏对象中的每个 MonoBehaviour 上或此行为的每个父级上名为 methodName 的方法。</td></tr></tbody></table><h5 id="继承的成员-1"><a href="#继承的成员-1" class="headerlink" title="继承的成员"></a>继承的成员</h5><h5 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h5><table><thead><tr><th><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Object-hideFlags.html" target="_blank" rel="noopener">hideFlags</a></th><th>该对象应该隐藏、随场景一起保存还是由用户修改？</th></tr></thead><tbody><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Object-name.html" target="_blank" rel="noopener">name</a></td><td>对象的名称。</td></tr></tbody></table><h5 id="公共函数-1"><a href="#公共函数-1" class="headerlink" title="公共函数"></a>公共函数</h5><table><thead><tr><th><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Object.GetInstanceID.html" target="_blank" rel="noopener">GetInstanceID</a></th><th>返回对象的实例 ID。</th></tr></thead><tbody><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Object.ToString.html" target="_blank" rel="noopener">ToString</a></td><td>返回 GameObject 的名称。</td></tr></tbody></table><h4 id="Component"><a href="#Component" class="headerlink" title="Component"></a><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Component.html" target="_blank" rel="noopener">Component</a></h4><p>附加到 <a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/GameObject.html" target="_blank" rel="noopener">GameObject</a> 的所有内容的基本类</p><p>注：代码不会直接创建 Component，而是编写脚本代码，然后将该脚本附加到GameObject</p><h4 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Resources.html" target="_blank" rel="noopener">Resources</a></h4><p>Resources 类允许您查找和访问资源等对象</p><p>在编辑器中，<a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Resources.FindObjectsOfTypeAll.html" target="_blank" rel="noopener">Resources.FindObjectsOfTypeAll</a> 可用于定位资源和场景对象</p><p>通过 <a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Resources.Load.html" target="_blank" rel="noopener">Resources.Load</a> 函数，可访问 Assets 文件夹中处于任意位置的名为“Resources”的文件夹中的所有资源。 可以存在多个“Resources”文件夹，加载对象时，将对每个文件夹进行检查</p><p><strong>注意：</strong>Assets 中的 <a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Resources.html" target="_blank" rel="noopener">Resources</a> 文件夹需要在使用前创建。创建新项目时，不会创建该文件夹</p><p>静态函数：（函数调用的结果不会访问或者修改任何对象（非static）数据成员，这样的成员声明为静态成员函数比较好）</p><table><thead><tr><th><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Resources.FindObjectsOfTypeAll.html" target="_blank" rel="noopener">FindObjectsOfTypeAll</a></th><th>返回所有类型为 type 的对象的列表。</th></tr></thead><tbody><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Resources.Load.html" target="_blank" rel="noopener">Load</a></td><td>加载存储在 Resources 文件夹中的 path 处的资源。</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Resources.LoadAll.html" target="_blank" rel="noopener">LoadAll</a></td><td>加载位于 Resources 文件夹中的 path 处的文件夹中的所有资源，或加载位于该处的文件。</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Resources.LoadAsync.html" target="_blank" rel="noopener">LoadAsync</a></td><td>异步加载存储在 Resources 文件夹中的 path 处的资源。</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Resources.UnloadAsset.html" target="_blank" rel="noopener">UnloadAsset</a></td><td>从内存中卸载 /assetToUnload/。</td></tr><tr><td><a href="https://docs.unity3d.com/cn/2018.4/ScriptReference/Resources.UnloadUnusedAssets.html" target="_blank" rel="noopener">UnloadUnusedAssets</a></td><td>卸载未使用的资源。</td></tr></tbody></table><h2 id="Laya-API"><a href="#Laya-API" class="headerlink" title="Laya API"></a>Laya API</h2><h4 id="Rigidbody3D"><a href="#Rigidbody3D" class="headerlink" title="Rigidbody3D"></a><a href="https://layaair2.ldc2.layabox.com/api2/Chinese/index.html?category=&class=_laya_d3_physics_rigidbody3d_.rigidbody3d#applytorque" target="_blank" rel="noopener">Rigidbody3D</a></h4><p>对应于Unity中<strong>Rigidbody.AddForce</strong>，<strong>Rigidbody.AddTorque</strong>， Laya提供的类为Rigidbody3D，对应的方法为<strong>Rigidbody3D.applyForce</strong>，<strong>Rigidbody3D.applyTorque</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript">applyForce(force: Vector3, localOffset?: Vector3): <span class="hljs-built_in">void</span><br><br>applyImpulse(impulse: Vector3, localOffset?: Vector3): <span class="hljs-built_in">void</span><br><br>applyTorque(torque: Vector3): <span class="hljs-built_in">void</span><br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Unity-API&quot;&gt;&lt;a href=&quot;#Unity-API&quot; class=&quot;headerlink&quot; title=&quot;Unity API&quot;&gt;&lt;/a&gt;Unity API&lt;/h2&gt;&lt;h4 id=&quot;GameObject-FindWithTag&quot;&gt;&lt;a href=&quot;#Gam
      
    
    </summary>
    
    
      <category term="Unity" scheme="https://chasencenge.github.io/categories/Unity/"/>
    
      <category term="Laya" scheme="https://chasencenge.github.io/categories/Unity/Laya/"/>
    
      <category term="C#" scheme="https://chasencenge.github.io/categories/Unity/Laya/C/"/>
    
      <category term="TypeScript" scheme="https://chasencenge.github.io/categories/Unity/Laya/C/TypeScript/"/>
    
    
      <category term="Laya" scheme="https://chasencenge.github.io/tags/Laya/"/>
    
      <category term="TypeScript" scheme="https://chasencenge.github.io/tags/TypeScript/"/>
    
      <category term="Unity" scheme="https://chasencenge.github.io/tags/Unity/"/>
    
      <category term="C#" scheme="https://chasencenge.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Python实现Lora节点拓扑自动规划</title>
    <link href="https://chasencenge.github.io/2020/07/20/Python%E5%AE%9E%E7%8E%B0Lora%E8%8A%82%E7%82%B9%E6%8B%93%E6%89%91%E8%87%AA%E5%8A%A8%E8%A7%84%E5%88%92/"/>
    <id>https://chasencenge.github.io/2020/07/20/Python实现Lora节点拓扑自动规划/</id>
    <published>2020-07-20T02:57:58.000Z</published>
    <updated>2020-07-27T19:14:15.897Z</updated>
    
    <content type="html"><![CDATA[<h3 id="NodeClass-py"><a href="#NodeClass-py" class="headerlink" title="NodeClass.py:"></a>NodeClass.py:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 小记：</span><br><span class="hljs-comment"># 先不考虑中继节点在classB模式下发Beacon的能耗</span><br><span class="hljs-comment"># 能量效率的计算公式是否有问题？只考虑发包的能耗和时间</span><br><span class="hljs-comment"># energyConsumption需统一成自己在lifetime中的能量消耗推导，不再用论文中笼统的折线图值</span><br><span class="hljs-comment"># 注意区分self.sendTo.index和一些函数中的node.index的区别，前者使用的场景在确定节点拓扑之后，后者使用在确定节点拓扑之前的一些遍历情况</span><br><br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><br><span class="hljs-comment"># python中的public、private和protected是通过变量名前的下划线标识的，保护类型一个下划线，私有类型两个下划线</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>:</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, name, locX, locY, nodeNum, _payload, _bandW, _c, _pi, _beta, _whiteNoise, _dutyCycle, _batteryE, _dataGen, _cycleT,<br> _transRadioE, _recvRadioE, _spareRadioE, _offRadioE, _onMcuE, _offMcuE, isGateway=<span class="hljs-number">0</span>, whichSet=<span class="hljs-number">0</span>, index=<span class="hljs-number">0</span>)</span>:</span> <span class="hljs-comment"># 默认缺省值isGateway=0</span><br>self.name = name<br>self.payload = _payload<br>self.bandW = _bandW<br>self.c = _c<br>self.pi = _pi<br>self.beta = _beta<br>self.whiteNoise = _whiteNoise<br>self.dutyCycle = _dutyCycle<br>self.batteryE = _batteryE<br><span class="hljs-comment"># 每确定要多为另一个节点进行中继，dataGen需要更新添加帮忙转发的数据量</span><br>self.dataGen = _dataGen<br>self.cycleT = _cycleT<br>self.transRadioE = _transRadioE<br>self.recvRadioE = _recvRadioE<br>self.spareRadioE = _spareRadioE<br>self.offRadioE = _offRadioE<br>self.onMcuE = _onMcuE<br>self.offMcuE = _offMcuE<br><span class="hljs-comment"># 注意和dataGen的区别，这个变量是节点发送给节点/网关的总数据量，带有中继数据</span><br>self.dataSend = _dataGen<br>self.lifeT = <span class="hljs-number">0.0</span><br>self.cycleE = <span class="hljs-number">0.0</span><br>self.symbleT = <span class="hljs-number">0.0</span><br>self.pktT = <span class="hljs-number">0.0</span><br>self.transT = <span class="hljs-number">0.0</span><br>self.recvT = <span class="hljs-number">0.0</span><br>self.spareT = <span class="hljs-number">0.0</span><br>self.airtime = <span class="hljs-number">0.0</span><br>self.goodput = <span class="hljs-number">0.0</span><br><span class="hljs-comment"># 用于MST中判断节点在哪个集合中,初始集合为0，MST集合为1</span><br>self.whichSet = whichSet<br><span class="hljs-comment"># 标识一个“节点”是否是网关，输入中第一个“点”为网关，坐标[0, 0]</span><br>self.isGateway = isGateway<br>self.locX = locX<br>self.locY = locY<br><span class="hljs-comment"># 给节点一个索引标识</span><br>self.index = index<br>self.relayNum = <span class="hljs-number">0</span><br><span class="hljs-comment"># 存放了此节点通往其他节点时使用的参数值</span><br>self.spreadFactor = [<span class="hljs-number">7</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(nodeNum)]<br>self.transPower = [<span class="hljs-number">13</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(nodeNum)]<br>self.channel = [<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(nodeNum)]<br>self.codingRate = [<span class="hljs-number">5</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(nodeNum)]<br>self.pdr = <span class="hljs-number">0.0</span><br><span class="hljs-comment"># 标识此节点的数据直接发送给哪个节点，为Node类型</span><br>self.sendTo = self<br><span class="hljs-comment"># 标识此节点帮助哪些节点进行数据转发</span><br>self.relayFrom = []<br><span class="hljs-comment"># 标识此节点工作在哪个class下，class会影响cycleE</span><br>self.workClass = <span class="hljs-string">'A'</span><br><br><span class="hljs-comment"># self._prop = []</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">distNode</span><span class="hljs-params">(self, node)</span>:</span><br>dist = math.pow((math.pow((self.locX - node.locX), <span class="hljs-number">2</span>) + math.pow((self.locY - node.locY), <span class="hljs-number">2</span>)), <span class="hljs-number">0.5</span>)<br><span class="hljs-comment"># print(self.locX)</span><br><span class="hljs-comment"># print(self.locY)</span><br><span class="hljs-comment"># print(node.locX)</span><br><span class="hljs-comment"># print(node.locY)</span><br><span class="hljs-comment"># print('Distance of ' + self.name + ' to ' + node.name + ' = ' + str(dist))</span><br><span class="hljs-keyword">return</span> dist<br><br><span class="hljs-comment"># 8个信道，从902.1开始每次加0.2</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">freq</span><span class="hljs-params">(self, node)</span>:</span><br>frequency = <span class="hljs-number">902.1</span> + <span class="hljs-number">0.2</span> * self.channel[node.index]<br>frequency *= math.pow(<span class="hljs-number">10</span>, <span class="hljs-number">6</span>)<br><span class="hljs-comment"># print('Frequency of channel ' + str(self.channel[node.index]) + ' = ' + str(frequency))</span><br><span class="hljs-keyword">return</span> frequency<br><br><span class="hljs-comment"># Rayleigh fading channel</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">g</span><span class="hljs-params">(self)</span>:</span><br>reyleigh = np.random.exponential(<span class="hljs-number">1.0</span>, size=<span class="hljs-literal">None</span>)<br><span class="hljs-comment"># print(self.name + ' return rayleigh fading channel g of: ' + str(reyleigh))</span><br><span class="hljs-keyword">return</span> reyleigh<br><br><br><span class="hljs-comment"># 此为论文中的折线图值观测值实现的能耗函数，现替换成计算式方式实现</span><br><span class="hljs-comment"># energy consumption, unit is mW</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">enerConsump</span><span class="hljs-params">(self, node)</span>:</span><br>energyPacket = [[<span class="hljs-number">40</span>, <span class="hljs-number">50</span>], [<span class="hljs-number">50</span>, <span class="hljs-number">67</span>], [<span class="hljs-number">65</span>, <span class="hljs-number">85</span>], [<span class="hljs-number">95</span>, <span class="hljs-number">105</span>], [<span class="hljs-number">100</span>, <span class="hljs-number">125</span>], [<span class="hljs-number">110</span>, <span class="hljs-number">135</span>]]<br>clsP = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> self.transPower[node.index] &lt;= <span class="hljs-number">15</span>:<br>cls_p = <span class="hljs-number">0</span><br><span class="hljs-keyword">else</span>:<br>cls_p = <span class="hljs-number">1</span><br>clsS = self.spreadFactor[node.index] - <span class="hljs-number">7</span><br><span class="hljs-comment"># rst = energy_packet[cls_s][cls_p] * 0.001</span><br>rst = energyPacket[clsS][clsP]<br><span class="hljs-comment"># print("ec(line 70, unit is mW):", rst)</span><br>name = self.name<br>sf = str(self.spreadFactor[node.index])<br>tp = str(self.transPower[node.index])  <span class="hljs-comment"># 只是为了下一行不超长...</span><br><span class="hljs-comment"># print('Energy Consumption of ' + name + ' with sf=' + sf + ', tp=' + tp + ' is: ' + str(rst))</span><br><span class="hljs-keyword">return</span> rst<br><br><span class="hljs-comment"># 公式计算方式求energy consumption</span><br><span class="hljs-comment"># def enerConsump(self):</span><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">th</span><span class="hljs-params">(self, si)</span>:</span><br><span class="hljs-keyword">if</span> si == <span class="hljs-number">7</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">-6</span><br><span class="hljs-keyword">elif</span> si == <span class="hljs-number">8</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">-9</span><br><span class="hljs-keyword">elif</span> si == <span class="hljs-number">9</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">-12</span><br><span class="hljs-keyword">elif</span> si == <span class="hljs-number">10</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">-15</span><br><span class="hljs-keyword">elif</span> si == <span class="hljs-number">11</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">-17.5</span><br><span class="hljs-keyword">elif</span> si == <span class="hljs-number">12</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">-20</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ss</span><span class="hljs-params">(self, si)</span>:</span><br><span class="hljs-keyword">if</span> si == <span class="hljs-number">7</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">-123</span><br><span class="hljs-keyword">elif</span> si == <span class="hljs-number">8</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">-126</span><br><span class="hljs-keyword">elif</span> si == <span class="hljs-number">9</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">-129</span><br><span class="hljs-keyword">elif</span> si == <span class="hljs-number">10</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">-132</span><br><span class="hljs-keyword">elif</span> si == <span class="hljs-number">11</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">-134.5</span><br><span class="hljs-keyword">elif</span> si == <span class="hljs-number">12</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-number">-137</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tomWatt</span><span class="hljs-params">(self, dBm)</span>:</span><br>mWatt = math.pow(<span class="hljs-number">10</span>, (dBm / <span class="hljs-number">10</span>))<br><span class="hljs-comment"># print(self.name + ' dBm to mWatt is: ' + str(mWatt))</span><br><span class="hljs-keyword">return</span> mWatt<br><br><span class="hljs-comment"># 如果有relay，EE计算为payload * pdr1 * pdr2 / (energyInTime1 + energyInTime2)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">energyEffi</span><span class="hljs-params">(self, node)</span>:</span><br>tempVar = (<span class="hljs-number">8</span> * self.payload - <span class="hljs-number">4</span> * self.spreadFactor[node.index] + <span class="hljs-number">28</span> + <span class="hljs-number">16</span>) / (<span class="hljs-number">4</span> * self.spreadFactor[node.index])<br>time = (<span class="hljs-number">20.25</span> + max(math.ceil(tempVar) * self.channel[node.index], <span class="hljs-number">0</span>)) * <span class="hljs-number">2</span> ** self.spreadFactor[node.index] / self.bandW<br>energyInTime = time * self.enerConsump(node)<br>energyEfficiency = self.payload * self.selfToNodePdr(node) / energyInTime<br><span class="hljs-comment"># print('EnergyEfficiency of ' + self.name + ' is: ' + str(energyEfficiency))</span><br><span class="hljs-keyword">return</span> energyEfficiency<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">energyIntime</span><span class="hljs-params">(self, node)</span>:</span><br>tempVar = (<span class="hljs-number">8</span> * self.payload - <span class="hljs-number">4</span> * self.spreadFactor[node.index] + <span class="hljs-number">28</span> + <span class="hljs-number">16</span>) / (<span class="hljs-number">4</span> * self.spreadFactor[node.index])<br>time = (<span class="hljs-number">20.25</span> + max(math.ceil(tempVar) * self.channel[node.index], <span class="hljs-number">0</span>)) * <span class="hljs-number">2</span> ** self.spreadFactor[<br>node.index] / self.bandW<br>energyInTime = time * self.enerConsump(node)<br><span class="hljs-keyword">return</span> energyInTime<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">energyEffiRelay</span><span class="hljs-params">(self, node1, node2)</span>:</span><br>tempVar1 = (<span class="hljs-number">8</span> * self.payload - <span class="hljs-number">4</span> * self.spreadFactor[node1.index] + <span class="hljs-number">28</span> + <span class="hljs-number">16</span>) / (<span class="hljs-number">4</span> * self.spreadFactor[node1.index])<br>time1 = (<span class="hljs-number">20.25</span> + max(math.ceil(tempVar1) * self.channel[node1.index], <span class="hljs-number">0</span>)) * <span class="hljs-number">2</span> ** self.spreadFactor[node1.index] / self.bandW<br>energyInTime1 = time1 * self.enerConsump(node1)<br>tempVar2 = (<span class="hljs-number">8</span> * node1.payload - <span class="hljs-number">4</span> * node1.spreadFactor[node2.index] + <span class="hljs-number">28</span> + <span class="hljs-number">16</span>) / (<br><span class="hljs-number">4</span> * node1.spreadFactor[node2.index])<br>time2 = (<span class="hljs-number">20.25</span> + max(math.ceil(tempVar2) * node1.channel[node2.index], <span class="hljs-number">0</span>)) * <span class="hljs-number">2</span> ** node1.spreadFactor[<br>node2.index] / node1.bandW<br>energyInTime2 = time2 * node1.enerConsump(node2)<br>energyEfficiency = self.payload * self.selfToNodePdr(node1) * node1.selfToNodePdr(node2) / (energyInTime1 + energyInTime2)<br><span class="hljs-keyword">return</span> energyEfficiency<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">relayPdr</span><span class="hljs-params">(self)</span>:</span><br><span class="hljs-keyword">if</span>(self.isGateway == <span class="hljs-number">1</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>temp = self.sendTo.relayPdr() * self.selfToNodePdr(self.sendTo)<br><span class="hljs-keyword">return</span> temp<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">relayEnergyInTime</span><span class="hljs-params">(self)</span>:</span><br><span class="hljs-keyword">if</span>(self.isGateway == <span class="hljs-number">1</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">else</span>:<br>temp = self.sendTo.relayEnergyInTime() + self.energyIntime(self.sendTo)<br><span class="hljs-keyword">return</span> temp<br><br><span class="hljs-comment"># 将设备重叠数考虑进来，重叠、channel会降低pdr</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">selfToNodePdr</span><span class="hljs-params">(self, node)</span>:</span><br><span class="hljs-comment"># tempVal1是路径损失函数</span><br>tempVar1 = (self.c / (<span class="hljs-number">4</span> * self.pi * self.freq(node) * self.distNode(node))) ** self.beta<br><span class="hljs-comment"># print('tempVar1:', tempVar1)</span><br><span class="hljs-comment"># whiteNoise对pdr的影响大</span><br>tempVar2 = (self.tomWatt(self.th(self.spreadFactor[node.index])) * self.whiteNoise + self.tomWatt(<br>self.ss(self.spreadFactor[node.index])))<br><span class="hljs-comment"># print('tempVar2:', tempVar2)</span><br><span class="hljs-comment"># 这地方还是有问题！！！！为什么是/1000/1000，对比注释行</span><br><span class="hljs-comment"># pdr = math.exp(-math.pow(tempVar2 / (self.tomWatt(self.transPower) * tempVar1), 0.5))</span><br>pdr = math.exp(-math.pow(tempVar2 / (self.transPower[node.index] * tempVar1), <span class="hljs-number">0.5</span>) / <span class="hljs-number">1000</span> / <span class="hljs-number">1000</span>)<br><span class="hljs-comment"># print('Pdr of ' + self.name + ' to ' + node.name + ' is: ' + str(pdr))</span><br><span class="hljs-keyword">return</span> pdr<br><br><span class="hljs-comment"># 主文件里先确定sendTo谁，再更新transT值</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">updateTransT</span><span class="hljs-params">(self)</span>:</span><br>self.symbleT = math.pow(<span class="hljs-number">2</span>, self.spreadFactor[self.sendTo.index]) / self.bandW<br>tempVal1 = <span class="hljs-number">8</span> * self.payload - <span class="hljs-number">4</span> * self.spreadFactor[self.sendTo.index] + <span class="hljs-number">28</span> + <span class="hljs-number">16</span><br>tempVal2 = <span class="hljs-number">20.25</span> + max(math.ceil(tempVal1 / (<span class="hljs-number">4</span> * self.spreadFactor[self.sendTo.index])) * self.codingRate[self.sendTo.index], <span class="hljs-number">0</span>)<br>self.pktT = self.symbleT * tempVal2<br><span class="hljs-comment"># 计算transT</span><br><span class="hljs-comment"># 此节点将数据（包括自己的和中转的）发给其将要发至的节点时的pdr</span><br>pdr = self.selfToNodePdr(self.sendTo)<br><span class="hljs-keyword">if</span> pdr != <span class="hljs-number">0</span>:<br><span class="hljs-keyword">if</span> self.relayFrom:<br><span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> self.relayFrom:<br><span class="hljs-comment"># 根据中继了哪些节点来更新dataSend的数据量，dataSend是此节点总共发送的数据量</span><br><span class="hljs-comment"># 若此节点非中继节点，则dataSend == dataGen</span><br>self.dataSend += child.dataGen<br>self.transT = self.pktT * self.cycleT / self.dataSend / pdr<br><span class="hljs-keyword">else</span>:<br>self.transT = <span class="hljs-number">10000</span><br><span class="hljs-keyword">return</span> self.transT<br><br><span class="hljs-comment"># 确定在self.relayFrom中添加完所有的远端节点后再进行更新</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">updateRecvT</span><span class="hljs-params">(self)</span>:</span><br><span class="hljs-comment"># 计算recvT，此时间包括自身发送时的class A模式的部分和中继时class B模式的recv time</span><br><span class="hljs-comment"># 没考虑作为发送端时的recvT，因为发送时工作在classA，只在发送数据的时候顺便开一个窗口接收数据，暂时不知道窗口总时长if self.relayFrom:</span><br><span class="hljs-keyword">if</span> self.relayFrom:<br><span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> self.relayFrom:<br>self.recvT += child.transT<br>print(<span class="hljs-string">'Update transT of '</span> + self.name + <span class="hljs-string">' to: '</span> + str(self.recvT))<br><span class="hljs-keyword">return</span> self.recvT<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lifetime</span><span class="hljs-params">(self)</span>:</span><br><span class="hljs-comment"># 设置transRadioE级别（87和120）</span><br><span class="hljs-keyword">if</span> self.transPower[self.sendTo.index] &lt; <span class="hljs-number">15</span>:<br>self.transRadioE = <span class="hljs-number">3.3</span> * <span class="hljs-number">87e-3</span><br>self.spareT = self.dutyCycle * self.cycleT - self.transT - self.recvT<br>radioOnE = self.transT * self.transRadioE + self.recvT * self.recvRadioE + self.spareT * self.spareRadioE<br>radioOffE = (<span class="hljs-number">1</span> - self.dutyCycle) * self.cycleT * self.offRadioE<br>mcuE = self.cycleT * self.dutyCycle * self.onMcuE + self.cycleT * (<span class="hljs-number">1</span> - self.dutyCycle) * self.offMcuE<br>self.cycleE = radioOnE + radioOffE + mcuE<br>self.lifeT = self.cycleT * self.batteryE / self.cycleE / <span class="hljs-number">3600</span> / <span class="hljs-number">24</span><br>print(<span class="hljs-string">'Lifetime of '</span> + self.name + <span class="hljs-string">' is: '</span> + str(self.lifeT))<br><span class="hljs-keyword">return</span> self.lifeT<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">goodput</span><span class="hljs-params">(self)</span>:</span><br><span class="hljs-comment"># 注意：goodput中计算的数据量用的是dataGen，而不是dataSend</span><br>goodput = self.cycleT / self.dataGen * self.payload / self.transT<br>print(<span class="hljs-string">'Goodput of '</span> + self.name + <span class="hljs-string">' is: '</span> + goodput)<br><span class="hljs-keyword">return</span> goodput<br></code></pre></td></tr></table></figure><h3 id="TopoWithMST-py"><a href="#TopoWithMST-py" class="headerlink" title="TopoWithMST.py:"></a>TopoWithMST.py:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> MST.Node.NodeClass <span class="hljs-keyword">import</span> Node<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> scipy <span class="hljs-keyword">as</span> sy<br><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats<br><span class="hljs-keyword">import</span> xlsxwriter<br><br><span class="hljs-comment"># 添加node要修改三个地方，node初始化，nodes列表添加该node，nodeNum值</span><br><br><span class="hljs-comment">#  常量，全局变量均以“_”开头命名</span><br><span class="hljs-comment"># _nodeNum = 6  # device number</span><br>_payload = <span class="hljs-number">4</span>  <span class="hljs-comment"># payload size of a packet, need to be modified</span><br>_bandW = <span class="hljs-number">125000</span><br>_c = <span class="hljs-number">3</span> * <span class="hljs-number">10</span> ** <span class="hljs-number">8</span><br>_pi = <span class="hljs-number">3.1415926</span><br>_beta = <span class="hljs-number">3</span>  <span class="hljs-comment"># path loss exponent, maybe a list, need to be init</span><br>_whiteNoise = random.random()   <span class="hljs-comment"># gauss white noise</span><br>_dutyCycle = <span class="hljs-number">0.02</span><br>_batteryE = <span class="hljs-number">3.7</span> * <span class="hljs-number">2</span> * <span class="hljs-number">3600</span><br>_dataGen = <span class="hljs-number">2000</span><br><br><span class="hljs-comment"># Radio耗电常量</span><br>_cycleT = <span class="hljs-number">3600</span> * <span class="hljs-number">12</span><br>_transRadioE = <span class="hljs-number">3.3</span> * <span class="hljs-number">120e-3</span>  <span class="hljs-comment"># 29, 87, 120</span><br>_recvRadioE = <span class="hljs-number">3.3</span> * <span class="hljs-number">11.5e-3</span><br>_spareRadioE = <span class="hljs-number">3.3</span> * <span class="hljs-number">1.6e-3</span><br>_offRadioE = <span class="hljs-number">3.3</span> * <span class="hljs-number">1.5e-6</span><br><br><span class="hljs-comment"># Known and Unknown... P10  MCU耗电情况</span><br>_onMcuE = <span class="hljs-number">23.48e-4</span><br>_offMcuE = <span class="hljs-number">174.65e-7</span><br><br>sfRange = [<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>]<br>tpRange = [<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>]<br>chRange = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]<br>crRange = [<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]<br><br>nodeNum = <span class="hljs-number">18</span><br><br><br><span class="hljs-comment"># _node0是网关，所以isGateway=1, whichSet=1</span><br>_node0 = Node(<span class="hljs-string">'_node0'</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, nodeNum, _payload,  _bandW, _c, _pi, _beta, _whiteNoise, _dutyCycle, _batteryE, _dataGen,<br>              _cycleT, _transRadioE, _recvRadioE, _spareRadioE, _offRadioE, _onMcuE, _offMcuE, isGateway=<span class="hljs-number">1</span>, whichSet=<span class="hljs-number">1</span>)<br>_node1 = Node(<span class="hljs-string">'_node1'</span>, <span class="hljs-number">-2800</span>, <span class="hljs-number">-500</span>, nodeNum, _payload,  _bandW, _c, _pi, _beta, _whiteNoise, _dutyCycle, _batteryE,<br>              _dataGen, _cycleT, _transRadioE, _recvRadioE, _spareRadioE, _offRadioE, _onMcuE, _offMcuE, index=<span class="hljs-number">1</span>)<br>_node2 = Node(<span class="hljs-string">'_node2'</span>, <span class="hljs-number">2500</span>, <span class="hljs-number">2700</span>, nodeNum, _payload,  _bandW, _c, _pi, _beta, _whiteNoise, _dutyCycle, _batteryE,<br>              _dataGen, _cycleT, _transRadioE, _recvRadioE, _spareRadioE, _offRadioE, _onMcuE, _offMcuE, index=<span class="hljs-number">2</span>)<br>_node3 = Node(<span class="hljs-string">'_node3'</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">800</span>, nodeNum, _payload,  _bandW, _c, _pi, _beta, _whiteNoise, _dutyCycle, _batteryE,<br>              _dataGen, _cycleT, _transRadioE, _recvRadioE, _spareRadioE, _offRadioE, _onMcuE, _offMcuE, index=<span class="hljs-number">3</span>)<br>_node4 = Node(<span class="hljs-string">'_node4'</span>, <span class="hljs-number">2500</span>, <span class="hljs-number">0</span>, nodeNum, _payload,  _bandW, _c, _pi, _beta, _whiteNoise, _dutyCycle, _batteryE,<br>              _dataGen, _cycleT, _transRadioE, _recvRadioE, _spareRadioE, _offRadioE, _onMcuE, _offMcuE, index=<span class="hljs-number">4</span>)<br>_node5 = Node(<span class="hljs-string">'_node5'</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">0</span>, nodeNum, _payload,  _bandW, _c, _pi, _beta, _whiteNoise, _dutyCycle, _batteryE,<br>              _dataGen, _cycleT, _transRadioE, _recvRadioE, _spareRadioE, _offRadioE, _onMcuE, _offMcuE, index=<span class="hljs-number">5</span>)<br>_node6 = Node(<span class="hljs-string">'_node6'</span>, <span class="hljs-number">1500</span>, <span class="hljs-number">2000</span>, nodeNum, _payload,  _bandW, _c, _pi, _beta, _whiteNoise, _dutyCycle, _batteryE,<br>              _dataGen, _cycleT, _transRadioE, _recvRadioE, _spareRadioE, _offRadioE, _onMcuE, _offMcuE, index=<span class="hljs-number">6</span>)<br>_node7 = Node(<span class="hljs-string">'_node7'</span>, <span class="hljs-number">-800</span>, <span class="hljs-number">700</span>, nodeNum, _payload,  _bandW, _c, _pi, _beta, _whiteNoise, _dutyCycle, _batteryE,<br>              _dataGen, _cycleT, _transRadioE, _recvRadioE, _spareRadioE, _offRadioE, _onMcuE, _offMcuE, index=<span class="hljs-number">7</span>)<br>_node8 = Node(<span class="hljs-string">'_node8'</span>, <span class="hljs-number">-600</span>, <span class="hljs-number">-400</span>, nodeNum, _payload,  _bandW, _c, _pi, _beta, _whiteNoise, _dutyCycle, _batteryE,<br>              _dataGen, _cycleT, _transRadioE, _recvRadioE, _spareRadioE, _offRadioE, _onMcuE, _offMcuE, index=<span class="hljs-number">8</span>)<br>_node9 = Node(<span class="hljs-string">'_node9'</span>, <span class="hljs-number">-1000</span>, <span class="hljs-number">-1200</span>, nodeNum, _payload,  _bandW, _c, _pi, _beta, _whiteNoise, _dutyCycle, _batteryE,<br>              _dataGen, _cycleT, _transRadioE, _recvRadioE, _spareRadioE, _offRadioE, _onMcuE, _offMcuE, index=<span class="hljs-number">9</span>)<br>_node10 = Node(<span class="hljs-string">'_node10'</span>, <span class="hljs-number">-1800</span>, <span class="hljs-number">-2000</span>, nodeNum, _payload,  _bandW, _c, _pi, _beta, _whiteNoise, _dutyCycle, _batteryE,<br>               _dataGen, _cycleT, _transRadioE, _recvRadioE, _spareRadioE, _offRadioE, _onMcuE, _offMcuE, index=<span class="hljs-number">10</span>)<br>_node11 = Node(<span class="hljs-string">'_node11'</span>, <span class="hljs-number">-2000</span>, <span class="hljs-number">1800</span>, nodeNum, _payload,  _bandW, _c, _pi, _beta, _whiteNoise, _dutyCycle, _batteryE,<br>               _dataGen, _cycleT, _transRadioE, _recvRadioE, _spareRadioE, _offRadioE, _onMcuE, _offMcuE, index=<span class="hljs-number">11</span>)<br>_node12 = Node(<span class="hljs-string">'_node12'</span>, <span class="hljs-number">1500</span>, <span class="hljs-number">-2000</span>, nodeNum, _payload,  _bandW, _c, _pi, _beta, _whiteNoise, _dutyCycle, _batteryE,<br>               _dataGen, _cycleT, _transRadioE, _recvRadioE, _spareRadioE, _offRadioE, _onMcuE, _offMcuE, index=<span class="hljs-number">12</span>)<br>_node13 = Node(<span class="hljs-string">'_node13'</span>, <span class="hljs-number">500</span>, <span class="hljs-number">-500</span>, nodeNum, _payload,  _bandW, _c, _pi, _beta, _whiteNoise, _dutyCycle, _batteryE,<br>               _dataGen, _cycleT, _transRadioE, _recvRadioE, _spareRadioE, _offRadioE, _onMcuE, _offMcuE, index=<span class="hljs-number">13</span>)<br>_node14 = Node(<span class="hljs-string">'_node14'</span>, <span class="hljs-number">1200</span>, <span class="hljs-number">-1200</span>, nodeNum, _payload,  _bandW, _c, _pi, _beta, _whiteNoise, _dutyCycle, _batteryE,<br>               _dataGen, _cycleT, _transRadioE, _recvRadioE, _spareRadioE, _offRadioE, _onMcuE, _offMcuE, index=<span class="hljs-number">14</span>)<br>_node15 = Node(<span class="hljs-string">'_node15'</span>, <span class="hljs-number">2000</span>, <span class="hljs-number">-2500</span>, nodeNum, _payload,  _bandW, _c, _pi, _beta, _whiteNoise, _dutyCycle, _batteryE,<br>               _dataGen, _cycleT, _transRadioE, _recvRadioE, _spareRadioE, _offRadioE, _onMcuE, _offMcuE, index=<span class="hljs-number">15</span>)<br>_node16 = Node(<span class="hljs-string">'_node16'</span>, <span class="hljs-number">-2500</span>, <span class="hljs-number">-2000</span>, nodeNum, _payload,  _bandW, _c, _pi, _beta, _whiteNoise, _dutyCycle, _batteryE,<br>               _dataGen, _cycleT, _transRadioE, _recvRadioE, _spareRadioE, _offRadioE, _onMcuE, _offMcuE, index=<span class="hljs-number">16</span>)<br>_node17 = Node(<span class="hljs-string">'_node17'</span>, <span class="hljs-number">2500</span>, <span class="hljs-number">1000</span>, nodeNum, _payload,  _bandW, _c, _pi, _beta, _whiteNoise, _dutyCycle, _batteryE,<br>               _dataGen, _cycleT, _transRadioE, _recvRadioE, _spareRadioE, _offRadioE, _onMcuE, _offMcuE, index=<span class="hljs-number">17</span>)<br><br><br><span class="hljs-comment"># 先求所有的边权（取所有sf，tp，cr选择中代价最小的）存储，再用MST连线（每次连线需根据isGateway确定代价是否叠加）划分集合，直到原本集合为空</span><br>indexes= [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(nodeNum)]<br><span class="hljs-comment"># print(indexes)</span><br>nodes = [_node0, _node1, _node2, _node3, _node4, _node5, _node6, _node7, _node8, _node9, _node10, _node11, _node12,<br>         _node13, _node14, _node15, _node16, _node17]<br><span class="hljs-comment"># 初始化代价矩阵</span><br>costMatrix = [[<span class="hljs-number">0.0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(nodeNum)] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(nodeNum)]<br><span class="hljs-comment"># 注意python中不可用 energyEffiMatrix = costMatrix形式给矩阵赋值</span><br><span class="hljs-comment"># 否则energyEffiMatrix的值会随costMatrix的变化而变化</span><br><br>energyEffiMatrix = [[<span class="hljs-number">0.0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(nodeNum)] <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> range(nodeNum)]<br><br><br><span class="hljs-comment"># 计算每条边的代价，存入代价矩阵（不过记得后面MST时代价会根据是否relay确定是否进行叠加）</span><br><span class="hljs-comment"># 求每条边的代价实际上是先做预处理求最小代价，即遍历了可选的sf、tp、cr、</span><br><span class="hljs-comment"># 需要考虑sf和ch相同导致的重叠,暂未添加</span><br><span class="hljs-comment"># zip的使用</span><br><span class="hljs-keyword">for</span> rowIndex, node <span class="hljs-keyword">in</span> zip(indexes, nodes):<br>    <span class="hljs-keyword">for</span> colIndex, coloum <span class="hljs-keyword">in</span> zip(indexes, nodes):<br>        <span class="hljs-keyword">if</span> node <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> coloum:<br>            <span class="hljs-comment"># 针对某一条边求cheapest代价</span><br>            maxEE = <span class="hljs-number">0</span><br>            setSpreadFactor = <span class="hljs-number">7</span><br>            setTransPower = <span class="hljs-number">13</span><br>            setChannel = <span class="hljs-number">1</span><br>            setCodingRate =<span class="hljs-number">5</span><br>            <span class="hljs-keyword">for</span> sf <span class="hljs-keyword">in</span> sfRange:<br>                <span class="hljs-keyword">for</span> tp <span class="hljs-keyword">in</span> tpRange:<br>                    <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> chRange:<br>                        <span class="hljs-keyword">for</span> cr <span class="hljs-keyword">in</span> crRange:<br>                            node.spreadFactor[coloum.index] = sf<br>                            node.transPower[coloum.index] = tp<br>                            node.channel[coloum.index] = ch<br>                            node.codingRate[coloum.index] = cr<br>                            tempEE = node.energyEffi(coloum)<br>                            <span class="hljs-keyword">if</span>(maxEE &lt; tempEE):<br>                                maxEE = tempEE<br>                                setSpreadFactor = sf<br>                                setTransPower = tp<br>                                setChannel = ch<br>                                setCodingRate = cr<br>            node.spreadFactor[coloum.index] = setSpreadFactor<br>            node.transPower[coloum.index] = setTransPower<br>            node.channel[coloum.index] = setChannel<br>            node.codingRate[coloum.index] = setCodingRate<br>            costMatrix[rowIndex][colIndex] = maxEE<br>        <span class="hljs-keyword">else</span>:<br>            costMatrix[rowIndex][colIndex] = <span class="hljs-number">0.1</span><br><br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> range(nodeNum):<br>    <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> range(nodeNum):<br>        energyEffiMatrix[row][col] = costMatrix[row][col]<br><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, nodeNum):<br>    print(costMatrix[n])<br><br><br><span class="hljs-comment"># 代价是能量效率的倒数</span><br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> range(nodeNum):<br>    <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> range(nodeNum):<br>        costMatrix[row][col] = <span class="hljs-number">1</span> / costMatrix[row][col]<br><br>print(<span class="hljs-string">'cost statistic:'</span>)<br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, nodeNum):<br>    print(costMatrix[n])<br><span class="hljs-comment"># print(_node1.spreadFactor)</span><br><span class="hljs-comment"># print(_node1.transPower)</span><br><span class="hljs-comment"># print(_node1.channel)</span><br><span class="hljs-comment"># print(_node1.codingRate)</span><br><span class="hljs-comment"># 此部分仍有问题，需核对pdr和代价（能量效率EE）计算中各个参数对energy efficiency的影响</span><br><br>toWhichIndexes= [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(nodeNum)]<br><span class="hljs-comment"># u集合中的节点数</span><br>uNodeNum = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span>(uNodeNum != nodeNum):<br>    minCost = <span class="hljs-number">9999</span><br>    addRelay = nodes[<span class="hljs-number">0</span>]<br>    ifRelay = <span class="hljs-literal">False</span><br>    nodeToUSet = nodes[<span class="hljs-number">0</span>]<br>    backTrack = nodes[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> nodeIndex <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, nodeNum):<br>        <span class="hljs-comment"># minCost = 9999</span><br>        <span class="hljs-comment"># toWhichIndex为当前查看的v集合中的节点的index，可通过nodes列表反索引到相应的node</span><br>        <span class="hljs-comment"># thisLineCost为单条边的cost，我们需要的是实际的cost（即带relay）</span><br>        <span class="hljs-comment"># relay是在MST的过程中产生的</span><br>        <span class="hljs-comment"># 网关初始应在u集合，对应的whichSet=1</span><br><br>        <span class="hljs-comment"># addRelay = nodes[0]</span><br>        <span class="hljs-comment"># ifRelay = False</span><br>        <span class="hljs-comment"># nodeToUSet = nodes[0]</span><br>        <span class="hljs-keyword">for</span> toWhichIndex, thisLineCost <span class="hljs-keyword">in</span> zip(toWhichIndexes, costMatrix[nodeIndex]):<br>            <span class="hljs-comment"># 一个节点属于u集合，一个节点属于v集合，才进行处理，否则不符合MST要求，进行下轮循环</span><br>            <span class="hljs-comment"># addRelay = nodes[0]</span><br>            <span class="hljs-comment"># ifRelay = False</span><br>            <span class="hljs-comment"># nodeToUSet = nodes[0]</span><br>            <span class="hljs-keyword">if</span> (nodes[nodeIndex].whichSet == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> nodes[toWhichIndex].whichSet == <span class="hljs-number">0</span>):<br>            <span class="hljs-comment"># if ((nodes[nodeIndex].whichSet == 1 and nodes[toWhichIndex].whichSet == 0) or</span><br>            <span class="hljs-comment">#         (nodes[nodeIndex].whichSet == 0 and nodes[toWhichIndex].whichSet == 1)):</span><br>                <span class="hljs-comment"># 其中有一个是网关的话，说明与网关直接相连，thisLineCost即为realCost</span><br>                <span class="hljs-keyword">if</span> (nodes[nodeIndex].isGateway == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> nodes[toWhichIndex].isGateway == <span class="hljs-number">1</span>):<br>                    realCost = thisLineCost<br>                    <span class="hljs-keyword">if</span> realCost &lt; minCost:<br>                        print(<span class="hljs-string">'node:'</span>, nodes[nodeIndex].name, <span class="hljs-string">' nodeTo:'</span>, nodes[toWhichIndex].name)<br>                        backTrack = nodes[nodeIndex]<br>                        ifRelay = <span class="hljs-literal">False</span><br>                        minCost = realCost<br>                        nodeToUSet = nodes[toWhichIndex]<br><br>                <span class="hljs-comment"># 所检索的边不是与网关直接相连，需要中继</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-comment"># print(nodes[nodeIndex].name, nodes[toWhichIndex].name, thisLineCost, costMatrix[toWhichIndex][0], minCost)</span><br>                    <span class="hljs-comment"># 需要中继的，先把代价求倒数转换成EE，两段EE相加之后再求倒数得到整段的代价</span><br>                    <span class="hljs-comment"># [0]代表中继节点到网关的代价，因为网关为矩阵的第一列</span><br><br>                    <span class="hljs-comment"># cost计算方式1</span><br>                    <span class="hljs-comment"># realCost = thisLineCost + costMatrix[nodeIndex][0]</span><br><br>                    <span class="hljs-comment"># cost计算方式2，见NodeClass中EE计算函数注释</span><br>                    <span class="hljs-comment"># 这里energyEffiiRelay的实现实际应该是有递归，比如如果有两次relay，则</span><br>                    <span class="hljs-comment"># payload * pdr1 * pdr2 * pdr3 / (energyInTime1 + energyInTime2 + energyInTime3)，怎么实现?</span><br>                    <span class="hljs-comment"># 分别实现一个pdr的递归和一个energyInTime的递归</span><br>                    energyEffiRelay = nodes[toWhichIndex].payload * nodes[toWhichIndex].selfToNodePdr(nodes[nodeIndex]) * nodes[nodeIndex].relayPdr() / (nodes[toWhichIndex].energyIntime(nodes[nodeIndex]) + nodes[nodeIndex].relayEnergyInTime())<br>                    realCost = <span class="hljs-number">1</span> / energyEffiRelay<br>                    <span class="hljs-keyword">if</span> realCost &lt; minCost:<br>                        <span class="hljs-comment"># 如果12-0代价大于12-14-0，修改cost矩阵，将costMatrix[12][0]修改为12-14-0（经14中继）的代价</span><br>                        costMatrix[toWhichIndex][<span class="hljs-number">0</span>] = realCost<br>                        <span class="hljs-comment"># print(minCost)</span><br>                        print(<span class="hljs-string">'node:'</span>, nodes[nodeIndex].name, <span class="hljs-string">' nodeTo:'</span>, nodes[toWhichIndex].name)<br>                        print(<span class="hljs-number">1</span> / thisLineCost)<br>                        print(<span class="hljs-number">1</span> / costMatrix[nodeIndex][<span class="hljs-number">0</span>])<br>                        print(realCost)<br>                        backTrack = nodes[nodeIndex]<br>                        addRelay = nodes[toWhichIndex]  <span class="hljs-comment"># node类型</span><br>                        ifRelay = <span class="hljs-literal">True</span><br>                        minCost = realCost<br>                        nodeToUSet = nodes[toWhichIndex]<br><br>        <span class="hljs-comment"># 如果有中继的拓扑选择，为中继点修改relayNum, relayFrom信息</span><br>    <span class="hljs-keyword">if</span> (ifRelay == <span class="hljs-literal">True</span> <span class="hljs-keyword">and</span> addRelay):<br>        <span class="hljs-comment"># addRelay.relayNum += 1</span><br>        <span class="hljs-comment"># addRelay.relayFrom.append(backTrack.name)</span><br>        backTrack.relayNum += <span class="hljs-number">1</span><br>        backTrack.relayFrom.append(addRelay.name)<br>                <span class="hljs-comment"># 把新选择的节点添加到U集合</span><br>    nodeToUSet.whichSet = <span class="hljs-number">1</span><br>                <span class="hljs-comment"># 注意生成树的方向</span><br>                <span class="hljs-comment"># 到最后应该_node0(网关)的sendTo没什么用</span><br>    nodeToUSet.sendTo = backTrack<br>    uNodeNum += <span class="hljs-number">1</span><br>    print(<span class="hljs-string">'one loop.'</span>)<br><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, nodeNum):<br>    print(energyEffiMatrix[n])<br>    print(costMatrix[n])<br><br><span class="hljs-comment"># 测试结果</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, nodeNum):<br>    print(costMatrix[n])<br><br><span class="hljs-comment"># 检查拓扑</span><br>print(<span class="hljs-string">'Topo statistic:'</span>)<br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, nodeNum):<br>    print(nodes[n].name + <span class="hljs-string">' send to '</span> + nodes[n].sendTo.name)<br><br><br>print(<span class="hljs-string">'nodes belong to which set:'</span>)<br><span class="hljs-comment"># 检查集合</span><br>setList = []<br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, nodeNum):<br>    <span class="hljs-comment"># print(nodes[n].whichSet)</span><br>    setList.append(nodes[n].whichSet)<br>print(setList)<br><br><span class="hljs-comment"># 检查每个节点的relayNum</span><br><span class="hljs-comment"># relayNum技术规则还有问题</span><br>print(<span class="hljs-string">' relay number statistic: '</span>)<br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, nodeNum):<br>    print(nodes[n].name + <span class="hljs-string">' relay number: '</span> + str(nodes[n].relayNum))<br><br>print(<span class="hljs-string">'params choise:'</span>)<br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, nodeNum):<br>    <span class="hljs-comment"># 现有结果表明优先增大tp，增到最大才开始增加sf，即增大sf带来的代价远超增大tp</span><br>    print(nodes[n].name + <span class="hljs-string">' sf: '</span> + str(nodes[n].spreadFactor) + <span class="hljs-string">' tp:'</span> + str(nodes[n].transPower) + <span class="hljs-string">' cr:'</span> + str(nodes[n].codingRate))<br><br>print(<span class="hljs-string">'relay:'</span>)<br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, nodeNum):<br>    print(nodes[n].name , <span class="hljs-string">'relay:'</span>, nodes[n].relayFrom)<br><br><span class="hljs-comment"># 检查EE</span><br>print(<span class="hljs-string">'EE origin:'</span>)<br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, nodeNum):<br>    print(nodes[n].name, <span class="hljs-string">' EE origin:'</span>, energyEffiMatrix[n][<span class="hljs-number">0</span>])<br>print(<span class="hljs-string">'EE final:'</span>)<br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, nodeNum):<br>    print(nodes[n].name, <span class="hljs-string">' EE final:'</span>, <span class="hljs-number">1</span> / costMatrix[n][<span class="hljs-number">0</span>])<br><br><br><span class="hljs-comment"># 绘图</span><br>plt.subplot(<span class="hljs-number">121</span>)<br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, nodeNum):<br>    thisNodeLoc = [nodes[n].locX, nodes[n].locY]<br>    sendToNodeLoc = [nodes[n].sendTo.locX, nodes[n].sendTo.locY]<br>    plt.scatter(thisNodeLoc[<span class="hljs-number">0</span>], thisNodeLoc[<span class="hljs-number">1</span>], s=<span class="hljs-number">10</span>, color=<span class="hljs-string">'b'</span>)<br>    plt.plot([thisNodeLoc[<span class="hljs-number">0</span>], sendToNodeLoc[<span class="hljs-number">0</span>]], [thisNodeLoc[<span class="hljs-number">1</span>], sendToNodeLoc[<span class="hljs-number">1</span>]])<br>    plt.annotate(thisNodeLoc, xy=(thisNodeLoc[<span class="hljs-number">0</span>], thisNodeLoc[<span class="hljs-number">1</span>]), xytext=(thisNodeLoc[<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>, thisNodeLoc[<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>))<br>plt.xlim(<span class="hljs-number">-2800</span>,<span class="hljs-number">2800</span>)<br>plt.ylim(<span class="hljs-number">-2800</span>,<span class="hljs-number">2800</span>)<br><br><br><span class="hljs-comment"># 绘EE柱状图</span><br><span class="hljs-comment"># subplot绘制子图</span><br>plt.subplot(<span class="hljs-number">122</span>)<br>nodeNameList = []<br>nodeEEOriginList = []<br>nodeEEFinalList = []<br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, nodeNum):<br>    nodeNameList.append(str(n))<br>    nodeEEOriginList.append(energyEffiMatrix[n][<span class="hljs-number">0</span>])<br>    nodeEEFinalList.append(<span class="hljs-number">1</span> / costMatrix[n][<span class="hljs-number">0</span>])<br>total_width, n = <span class="hljs-number">0.8</span>, <span class="hljs-number">2</span><br>width = total_width / n<br>plt.bar(indexes, nodeEEOriginList, width=width, label=<span class="hljs-string">'1'</span>, fc=<span class="hljs-string">'b'</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(indexes)):<br>    indexes[i] += width<br>plt.bar(indexes, nodeEEFinalList, width=width, label=<span class="hljs-string">'2'</span>, tick_label=nodeNameList, fc=<span class="hljs-string">'g'</span>)<br>plt.legend()<br><br><br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="/2020/07/20/Python实现Lora节点拓扑自动规划/pyplot.png" alt="pyplot"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;NodeClass-py&quot;&gt;&lt;a href=&quot;#NodeClass-py&quot; class=&quot;headerlink&quot; title=&quot;NodeClass.py:&quot;&gt;&lt;/a&gt;NodeClass.py:&lt;/h3&gt;&lt;figure class=&quot;highlight python
      
    
    </summary>
    
    
      <category term="Python" scheme="https://chasencenge.github.io/categories/Python/"/>
    
      <category term="Lora" scheme="https://chasencenge.github.io/categories/Python/Lora/"/>
    
    
      <category term="Python" scheme="https://chasencenge.github.io/tags/Python/"/>
    
      <category term="Lora" scheme="https://chasencenge.github.io/tags/Lora/"/>
    
  </entry>
  
  <entry>
    <title>hexo更换flex-block主题</title>
    <link href="https://chasencenge.github.io/2020/07/17/hexo%E6%9B%B4%E6%8D%A2flex-block%E4%B8%BB%E9%A2%98/"/>
    <id>https://chasencenge.github.io/2020/07/17/hexo更换flex-block主题/</id>
    <published>2020-07-17T03:00:22.000Z</published>
    <updated>2020-08-02T15:54:20.119Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h4><p>hexo/_config.yml文件中：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">theme: flex-block<br></code></pre></td></tr></table></figure><p>为了能够正常显示图片，在hexo/_config.yml：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"># Writing<br>post_asset_folder: true<br></code></pre></td></tr></table></figure><p>这样每次创建新文件时会生成一个asset文件夹，用到的图片素材均放在此同名文件夹中进行调用</p><p>还需安装相应插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install https://github.com/CodeFalling/hexo-asset-image --save<br></code></pre></td></tr></table></figure><p>在相应的.md文件中调用图片资源时，<strong>切记！！！！</strong>💊💊💊</p><p>调用图片资源的路径直接写图片文件名，默认路径已经切到相应同名文件夹下，不可使用绝对路径名！！！！</p><h4 id="修改新建文件时给出的默认Front-Matter"><a href="#修改新建文件时给出的默认Front-Matter" class="headerlink" title="修改新建文件时给出的默认Front-Matter"></a>修改新建文件时给出的默认Front-Matter</h4><p><a href="https://hexo.io/zh-cn/docs/front-matter" target="_blank" rel="noopener">Front-Matter说明</a></p><p>修改hexo/scaffolds下的：</p><p>draft.md, page.md, post.md</p><p>修改方式见：<a href="https://github.com/miiiku/flex-block" target="_blank" rel="noopener">https://github.com/miiiku/flex-block</a></p><h4 id="添加代码高亮"><a href="#添加代码高亮" class="headerlink" title="添加代码高亮"></a>添加代码高亮</h4><p><a href="https://highlightjs.org/" target="_blank" rel="noopener">https://highlightjs.org/</a></p><p>下载依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install highlight.js<br></code></pre></td></tr></table></figure><p>hexo/_config.yml:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">highlight:<br>  enable: true<br>  line_number: true<br>  auto_detect: false<br>  tab_replace:<br>  hljs: true<br>  # theme: railscasts<br>  theme: pojoaque<br></code></pre></td></tr></table></figure><h4 id="添加社交平台链接"><a href="#添加社交平台链接" class="headerlink" title="添加社交平台链接"></a>添加社交平台链接</h4><p>hexo/themes/flex-block/_config.yml:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json">social_icon:<br>  header_enable: true<br>  footer_enable: true<br>  icons:<br>    - &#123; type: email,      value: 958198376@qq.com&#125;<br>    - &#123; type: github,     value: https://github.com/CHAsencenge&#125;<br>    - &#123; type: google+,    value: &#125;<br>    - &#123; type: ins,        value: &#125;<br>    - &#123; type: twitter,    value: &#125;<br>    - &#123; type: youtube,    value: &#125;<br>    - &#123; type: weibo,      value: https://weibo.com/u/5701921017&#125;<br>    - &#123; type: cloudmusic, value: https://music.163.com/#/user/home?id=92407481&#125;<br>    - &#123; type: zhihu,      value: &#125;<br></code></pre></td></tr></table></figure><h4 id="修改主页标签显示（英文-gt-中文）"><a href="#修改主页标签显示（英文-gt-中文）" class="headerlink" title="修改主页标签显示（英文-&gt;中文）"></a>修改主页标签显示（英文-&gt;中文）</h4><p>hexo/themes/flex-block/_config.yml:</p><p>修改其中的<code>menu:</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">menu:<br>  主页: /<br>  关于: /about<br>  友链: /links<br>  标签: /tags<br>  分类: /categories<br></code></pre></td></tr></table></figure><h4 id="添加友链页面并顺手放些要用的图片资源"><a href="#添加友链页面并顺手放些要用的图片资源" class="headerlink" title="添加友链页面并顺手放些要用的图片资源"></a>添加友链页面并顺手放些要用的图片资源</h4><p>添加友链页面：(顺口一提，hexo new page 会生成与_post同级的文件夹)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new page links<br></code></pre></td></tr></table></figure><p>在links/index.md中修改Front-matter，添加：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">type: links<br></code></pre></td></tr></table></figure><p>确认hexo/themes/flex-block/_config.yml中是否有(左侧为标签显示，不重要，重要的是是否写了右侧的/links目录)：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">links: /links<br></code></pre></td></tr></table></figure><h4 id="存放友链数据"><a href="#存放友链数据" class="headerlink" title="存放友链数据"></a>存放友链数据</h4><p>在source目录下(与_post同级) ， 创建:</p><p>_data文件夹</p><p>在source/_data下新建links.yml</p><p>一行一条友链数据，格式如下(现在links文件夹下创建Asset文件夹，存放相应的图片资源，并push到仓库，因为cover参数需要url，不能是本地路径，所以将资源推到仓库同时从仓库的对应url取图片资源作为cover)：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json">- &#123; "name" : "tianzixiao", "describe" : "测试", "link" : "Asset/tianzixiao.png", "cover" : "https://chasencenge.github.io/links/Asset/tianzixiao.png" &#125;<br>- &#123; "name" : "cover1", "describe" : "测试", "link" : "Asset/cover1.jpg", "cover" : "https://chasencenge.github.io/links/Asset/cover1.jpg" &#125;<br>- &#123; "name" : "cover2", "describe" : "测试", "link" : "Asset/cover2.jpg", "cover" : "https://chasencenge.github.io/links/Asset/cover2.jpg" &#125;<br>- &#123; "name" : "cover3", "describe" : "测试", "link" : "Asset/cover3.jpg", "cover" : "https://chasencenge.github.io/links/Asset/cover3.jpg" &#125;<br>- &#123; "name" : "cover4", "describe" : "测试", "link" : "Asset/cover4.jpg", "cover" : "https://chasencenge.github.io/links/Asset/cover4.jpg" &#125;<br>- &#123; "name" : "cover5", "describe" : "测试", "link" : "Asset/cover5.jpg", "cover" : "https://chasencenge.github.io/links/Asset/cover5.jpg" &#125;<br>- &#123; "name" : "cover6", "describe" : "测试", "link" : "Asset/cover6.jpg", "cover" : "https://chasencenge.github.io/links/Asset/cover6.jpg" &#125;<br>- &#123; "name" : "cover7", "describe" : "测试", "link" : "Asset/cover7.jpg", "cover" : "https://chasencenge.github.io/links/Asset/cover7.jpg" &#125;<br>- &#123; "name" : "cover8", "describe" : "测试", "link" : "Asset/cover8.jpg", "cover" : "https://chasencenge.github.io/links/Asset/cover8.jpg" &#125;<br>- &#123; "name" : "cover9", "describe" : "测试", "link" : "Asset/cover9.jpg", "cover" : "https://chasencenge.github.io/links/Asset/cover9.jpg" &#125;<br>- &#123; "name" : "cover10", "describe" : "测试", "link" : "Asset/cover10.jpg", "cover" : "https://chasencenge.github.io/links/Asset/cover10.jpg" &#125;<br>- &#123; "name" : "cover11", "describe" : "测试", "link" : "Asset/cover11.jpg", "cover" : "https://chasencenge.github.io/links/Asset/cover11.jpg" &#125;<br>- &#123; "name" : "cover12", "describe" : "测试", "link" : "Asset/cover12.jpg", "cover" : "https://chasencenge.github.io/links/Asset/cover12.jpg" &#125;<br>- &#123; "name" : "cover13", "describe" : "测试", "link" : "Asset/cover13.jpg", "cover" : "https://chasencenge.github.io/links/Asset/cover13.jpg" &#125;<br>- &#123; "name" : "cover14", "describe" : "测试", "link" : "Asset/cover14.jpg", "cover" : "https://chasencenge.github.io/links/Asset/cover14.jpg" &#125;<br>- &#123; "name" : "cover15", "describe" : "测试", "link" : "Asset/cover15.jpg", "cover" : "https://chasencenge.github.io/links/Asset/cover15.jpg" &#125;<br>- &#123; "name" : "cover16", "describe" : "测试", "link" : "Asset/cover16.jpg", "cover" : "https://chasencenge.github.io/links/Asset/cover16.jpg" &#125;<br>- &#123; "name" : "cover17", "describe" : "测试", "link" : "Asset/cover17.jpg", "cover" : "https://chasencenge.github.io/links/Asset/cover17.jpg" &#125;<br>- &#123; "name" : "cover18", "describe" : "测试", "link" : "Asset/cover18.jpg", "cover" : "https://chasencenge.github.io/links/Asset/cover18.jpg" &#125;<br>- &#123; "name" : "cover19", "describe" : "测试", "link" : "Asset/cover19.jpg", "cover" : "https://chasencenge.github.io/links/Asset/cover19.jpg" &#125;<br></code></pre></td></tr></table></figure><h4 id="修改主页banner"><a href="#修改主页banner" class="headerlink" title="修改主页banner"></a>修改主页banner</h4><p>hexo/themes/flex-block/_config.yml:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">banner: https://chasencenge.github.io/links/Asset/cover19.jpg<br></code></pre></td></tr></table></figure><h4 id="关于card无法显示cover图片的问题"><a href="#关于card无法显示cover图片的问题" class="headerlink" title="关于card无法显示cover图片的问题"></a>关于card无法显示cover图片的问题</h4><p>在主页按F12查看页面bug，发现无法找到cover.jpg，对比其他文章页面，无error，说明主页card的图片寻径和文章页的cover寻径不同</p><p>在F12调试工具中-&gt;Application，对比主页和文章页查看，发现各自的image加载是在各自的index.html同级目录下，故将用到的所有文件资源复制到hexo/public目录下，但是此目录仅支持主页正常显示，翻页时会进入page2，page3等等，所以将所用到的card资源同样放置在hexo/public/page/2、hexo/public/page/3等目录下</p><p><img src="/2020/07/17/hexo更换flex-block主题/homeImageSave.png" alt="homeImageSave"></p><p>btw，为了保证主页card显示的图片不冲突，以上目录下的图片不可重名，又由于以上目录的图片名需与hexo/source/_post中的每一篇的cover同名，故每个文章的asset-folder中的cover命名不要重名，文章front-matter同理</p><h6 id="asset-folder的cover命名："><a href="#asset-folder的cover命名：" class="headerlink" title="asset-folder的cover命名："></a>asset-folder的cover命名：</h6><p><img src="/2020/07/17/hexo更换flex-block主题/postFolderImageName.png" alt="postFolderImageName"></p><h6 id="front-matter的cover命名保证与asset-folder一致，并与hexo-public中的资源名称一致："><a href="#front-matter的cover命名保证与asset-folder一致，并与hexo-public中的资源名称一致：" class="headerlink" title="front-matter的cover命名保证与asset-folder一致，并与hexo/public中的资源名称一致："></a>front-matter的cover命名保证与asset-folder一致，并与hexo/public中的资源名称一致：</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">cover: cover22.jpg<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;基础配置&quot;&gt;&lt;a href=&quot;#基础配置&quot; class=&quot;headerlink&quot; title=&quot;基础配置&quot;&gt;&lt;/a&gt;基础配置&lt;/h4&gt;&lt;p&gt;hexo/_config.yml文件中：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
    
      <category term="Hexo" scheme="https://chasencenge.github.io/categories/Hexo/"/>
    
      <category term="Environment" scheme="https://chasencenge.github.io/categories/Hexo/Environment/"/>
    
    
      <category term="Hexo" scheme="https://chasencenge.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Laya Basketball小游戏踩坑历程</title>
    <link href="https://chasencenge.github.io/2020/07/17/Laya-Basketball%E5%B0%8F%E6%B8%B8%E6%88%8F%E8%B8%A9%E5%9D%91%E5%8E%86%E7%A8%8B/"/>
    <id>https://chasencenge.github.io/2020/07/17/Laya-Basketball小游戏踩坑历程/</id>
    <published>2020-07-17T01:39:43.000Z</published>
    <updated>2020-07-24T09:06:45.280Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">Laya3D小项目中的踩坑历程</blockquote><a id="more"></a><h4 id="lh-or-ls"><a href="#lh-or-ls" class="headerlink" title=".lh or .ls"></a>.lh or .ls</h4><p>测试Unity导出的Scene（仅包含3D球架）在导入Laya后的显示，发现若导出.lh文件，在Laya创建的Scene中挂载脚本运行时会报“cannot read ‘_addCamera’ of undefined”错误，解决此问题时选择重新导出.ls文件</p><p>相应脚本：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; ui &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"./../ui/layaMaxUI"</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> SmallScene <span class="hljs-keyword">extends</span> Laya.Script &#123;    <br>    <span class="hljs-keyword">constructor</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">super</span>(); &#125;<br>    <br>    onEnable(): <span class="hljs-built_in">void</span> &#123;<br>        Laya3D.init(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        Laya.Stat.show();<br>        Laya.stage.scaleMode = Laya.Stage.SCALE_FULL;<br>        Laya.stage.screenMode = Laya.Stage.SCREEN_NONE;<br>        Laya.Scene3D.load(<span class="hljs-string">"res/Loading/LayaScene_SmallScene/Conventional/SmallScene.ls"</span>, Laya.Handler.create(<span class="hljs-literal">null</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">scene:Laya.Scene3D</span>):<span class="hljs-title">void</span> </span>&#123;<br>            Laya.stage.addChild(scene) <span class="hljs-keyword">as</span> Laya.Scene3D;<br>        &#125;));<br>    &#125;<br><br>    onDisable(): <span class="hljs-built_in">void</span> &#123;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">new</span> SmallScene;<br></code></pre></td></tr></table></figure><h5 id="导出文件说明："><a href="#导出文件说明：" class="headerlink" title="导出文件说明："></a>导出文件说明：</h5><p>ls     —   场景文件： Json文件，包含场景中所有节点的数据信息，包含光照贴图信息<br>lh    —   层级文件： Json文件，包含场景中所有节点的数据信息，不包含光照贴图信息<br>lt     —   地形文件： Json文件，包含地形中的数据信息<br>lm    —   网格文件： 二进制文件，包含模型所有顶点的数据信息<br>lmat  —   材质文件： Json文件，包含光照，贴图，渲染模式等基本材质信息<br>lsani  —   蒙皮动画文件：二进制文件，包含骨骼动画帧率信息<br>lrani  —   刚体动画文件：二进制文件，包含刚体动画帧率信息<br>lav    —   新版动画节点文件：Json文件，只包含Animator组件下节点的数据信息<br>lani   —   新版动画文件：二进制文件，包含Animator动画帧率信息</p><h4 id="Mesh-Collider-和-Box-Collider的选择："><a href="#Mesh-Collider-和-Box-Collider的选择：" class="headerlink" title="Mesh Collider 和 Box Collider的选择："></a>Mesh Collider 和 Box Collider的选择：</h4><p>篮筐处有两个Trigger，一个在篮筐一个在篮网，篮筐环附近用Box Collider（元碰撞器），篮网用Mesh Collider（网格），后者渲染时消耗资源比前者大很多</p><h4 id="如何进一步操作导入的Scene中的子对象？"><a href="#如何进一步操作导入的Scene中的子对象？" class="headerlink" title="如何进一步操作导入的Scene中的子对象？"></a>如何进一步操作导入的Scene中的子对象？</h4><p><a href="http://layaair2.ldc2.layabox.com/api/?category=Core&class=laya.display.Node#numChildren" target="_blank" rel="noopener">laya.display.Node</a></p><p>测试时在Laya.Scene3D.load的call中添加：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"scene.numChildren:"</span>, scene.numChildren);<br></code></pre></td></tr></table></figure><p>可在运行时查看scene中的子对象个数</p><p>其他类似操作代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript">Laya.Scene3D.load(<span class="hljs-string">"res/Loading/LayaScene_SmallScene/Conventional/SmallScene.ls"</span>, Laya.Handler.create(<span class="hljs-literal">null</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">scene:Laya.Scene3D</span>):<span class="hljs-title">void</span> </span>&#123;<br>            <span class="hljs-comment">//myScene = scene;</span><br>            Laya.stage.addChild(scene) <span class="hljs-keyword">as</span> Laya.Scene3D;<br>            <span class="hljs-comment">//var camera = new Laya.Camera(0, 3, 10);</span><br>            <span class="hljs-comment">//scene.addChild(camera);</span><br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"scene.numChildren:"</span>, scene.numChildren);<br>            <span class="hljs-keyword">let</span> sprite:Laya.Sprite3D = <span class="hljs-keyword">new</span> Laya.Sprite3D();<br>            scene.addChildAt(sprite, <span class="hljs-number">5</span>);<br>            <span class="hljs-built_in">console</span>.log(scene.getChildAt(<span class="hljs-number">3</span>).name);<br>            <span class="hljs-built_in">console</span>.log(scene.getChildAt(<span class="hljs-number">4</span>).name);<br>            <span class="hljs-built_in">console</span>.log(scene.getChildAt(<span class="hljs-number">5</span>).name);<br>        &#125;));<br></code></pre></td></tr></table></figure><p><img src="/2020/07/17/Laya-Basketball小游戏踩坑历程/getChildName.png" alt="getChildName"></p><h4 id="关于Laya-Handler-create"><a href="#关于Laya-Handler-create" class="headerlink" title="关于Laya.Handler.create"></a>关于Laya.Handler.create</h4><p>Handler是事件处理器类</p><p><a href="http://layaair2.ldc2.layabox.com/api/?category=Core&class=laya.utils.Handler#caller" target="_blank" rel="noopener">laya.utils.Handler</a></p><p>create(caller:*, method:Fuction, args:Array = null, once:Boolean = true): Handler</p><p>caller:*  -执行域(this)</p><p>method:Function   -回调方法</p><p>args:Array   -携带的参数</p><p>once:Boolean   -是否只执行一次，默认为true</p><p>注意once后或者Handler.recover()后不要再使用此对象</p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>GolbalDataScene -&gt; StartScene -&gt; LoadingScene -&gt; GameScene</p><p>GolbalDataScene/GameStaticController/ConfigController中控制加载Assets/Resources/Config中的BallsData和StageData</p><h4 id="一些说明"><a href="#一些说明" class="headerlink" title="一些说明"></a>一些说明</h4><p>每个Scene中的UIController是用相同的BSK Manager脚本，即，所有场景能用到的UI相关的管理控制都放在这个脚本，其他通用的Cotorller也如此</p><p>reset球的函数在BSKGameController -&gt; resetBalls，设置了篮球的初始化位置，Rotation，layer，放到balls列表（但是没有设置其物理属性如重力、碰撞）</p><p>给篮球（balls）获取BSKBall组件、添加刚体、并且siKinematic = true使物理影响刚体在BSKShooter中的Update函数中（Update每一帧都调用）</p><p>在Laya中创建的对应脚本的类型的选择要考虑Unity中对应脚本是否有Update等逐帧刷新的功能</p><p>对Unity中具有Update等逐帧刷新的Component（Monobehavior），在Laya中创建对应脚本所选类型要考虑是否有相同逐帧刷新的内置函数</p><p>BSKBall -&gt; Start函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c#">gameObject.GetComponent&lt;Renderer&gt;().material = BSKGameConfig.s_Instance.GetBallMaterial();<br></code></pre></td></tr></table></figure><p>篮球资源是如何加载进去的：在BSKGameController声明一个GameObject对象-BallPrefab，然后在Unity的Inspector中可以直接选取需要的“lanqiu”资源</p><p>将Unity中的Scene导入Laya时，games_bg不能导入，因为不支持Sprite Renderer </p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;Laya3D小项目中的踩坑历程&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Laya" scheme="https://chasencenge.github.io/categories/Laya/"/>
    
    
      <category term="Laya" scheme="https://chasencenge.github.io/tags/Laya/"/>
    
      <category term="TypeScript" scheme="https://chasencenge.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>LoRa的三种class</title>
    <link href="https://chasencenge.github.io/2020/07/14/LoRa%E7%9A%84%E4%B8%89%E7%A7%8Dclass/"/>
    <id>https://chasencenge.github.io/2020/07/14/LoRa的三种class/</id>
    <published>2020-07-14T14:30:06.000Z</published>
    <updated>2020-07-20T02:36:29.406Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">LoRa class A, class B, class C三种工作模式</blockquote><a id="more"></a><h4 id="class-A"><a href="#class-A" class="headerlink" title="class A"></a>class A</h4><p>Class A 是 LoRaWAN 强制要求所有 LoRa 终端设备必须支持的通信模式。在Class A中，终端设备只在有数据需要处理或发送的时候才从休眠模式中醒来，并且一切通信都只能由发送终端设备主动发起，网关一直处于侦听模式。当发送终端设备进行一次发送（TX）之后，会等待时间T(RX_DELAY1)之后初始化一个接收窗口RX1，若RX1内发送终端设备未收到任何数据，则会在T_(RX_DELAY2)时间后再初始化一个接收窗口RX2，继续等待接收数据，窗口关闭后则进入睡眠模式。网关可在此窗口时间内向终端设备发送数据</p><p>接收窗口RX1一般是在上行后1秒开始，接收窗口RX2是在上行后2秒开始</p><p>终端有数据了，就上报，顺便收一下服务器下发的指令。终端没数据的时候，服务器下发不了指令</p><h4 id="class-B"><a href="#class-B" class="headerlink" title="class B"></a>class B</h4><p>Class B 为需要双向交互的应用设计。在 Class A 的基础上增加了可以由网关主动唤醒发送终端设备的机制，网关每隔 T_Beacon 时间会发送一个 Beacon 来主动唤醒终端设备，在两个 Beacon 之间，终端设备的通信模式和 Class A 相同。通过 Class B 主动唤醒节点的方式，网关可以定期开启终端设备的下载和上传功能。相比 Class A，Class B 降低了数据的传输时延，但也增加了终端设备的能耗</p><p>有一个同步时隙beacon，还有一个固定周期的接收窗口ping时隙。(隔几十秒收一个数据。其他时候都在休眠)</p><p>终端和基站约定一个时间下发数据，终端和基站依靠beacon信号校对时间，确保约定的时间不会错位</p><p>ClassB的目的是使得节点具有在预定时间打开接收窗口（称之为ping slot）的能力。一个支持ClassB的网络，所有的网关都必须同步发送beacon</p><h4 id="class-C"><a href="#class-C" class="headerlink" title="class C"></a>class C</h4><p>Class C 用于时延要求高的应用，发送终端设备再发送完成之后会立即初始化接收窗口，若未收到任何数据，则会一直开启随后的RX2窗口持续侦听信道，用于接收网关返回的数据</p><p>在class A的基础上，在class A休眠期间，一直打开接收窗口RX2（几乎随时可以接收数据）</p><h4 id="Beacon"><a href="#Beacon" class="headerlink" title="Beacon"></a>Beacon</h4><p>LoRa一旦约定好了时间，基站就默认设备一定会在那个时间点接收，所以需要严格的时间同步。Beacon则是时间同步的最关键的地方</p><p>节点由ClassA切换到ClassB之前必须收到beacon，进入ClassB之后还需要周期搜索/接收beacon，从而同步时钟。Class B节点可能临时收不到beacon，此时节点要逐渐加宽beacon和ping的接收窗。如果收到beacon后2小时收不到新的beacon，节点需使用内部时钟保持同步</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;LoRa class A, class B, class C三种工作模式&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="LoRa" scheme="https://chasencenge.github.io/categories/LoRa/"/>
    
    
      <category term="LoRa" scheme="https://chasencenge.github.io/tags/LoRa/"/>
    
  </entry>
  
  <entry>
    <title>C++.h和.cpp</title>
    <link href="https://chasencenge.github.io/2020/07/13/C-h%E5%92%8C-cpp/"/>
    <id>https://chasencenge.github.io/2020/07/13/C-h和-cpp/</id>
    <published>2020-07-13T03:04:52.000Z</published>
    <updated>2020-07-20T02:27:33.402Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">C++的.h文件和.cpp文件各应该包含什么内容</blockquote><a id="more"></a><h4 id="h文件"><a href="#h文件" class="headerlink" title=".h文件"></a>.h文件</h4><p>类的声明，成员函数声明…</p><p>记得在头部添加：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> XXXX_H <span class="hljs-comment">//这里如果头文件名为LoraNode.h, 则写为LORANODE_H</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> XXXX_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once <span class="hljs-comment">//这个一般在创建头文件的时候会自动添加</span></span><br></code></pre></td></tr></table></figure><p>尾部添加：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>目的是为了防止重复编译而报错</p><h4 id="cpp文件"><a href="#cpp文件" class="headerlink" title=".cpp文件"></a>.cpp文件</h4><p>填写类成员函数的定义</p><p>首先引用头文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"xxxx.h"</span></span><br></code></pre></td></tr></table></figure><p>注：不用再重写class Name{}，否则会报错为class重定义，直接使用::进行外部定义类成员函数即可</p><p>例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">LoraNode::th</span><span class="hljs-params">(si)</span></span>&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;C++的.h文件和.cpp文件各应该包含什么内容&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://chasencenge.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://chasencenge.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>将Unity场景导入到LayaAir</title>
    <link href="https://chasencenge.github.io/2020/07/09/%E5%B0%86Unity%E5%9C%BA%E6%99%AF%E5%AF%BC%E5%85%A5%E5%88%B0LayaAir/"/>
    <id>https://chasencenge.github.io/2020/07/09/将Unity场景导入到LayaAir/</id>
    <published>2020-07-09T01:02:46.000Z</published>
    <updated>2020-07-20T02:40:39.069Z</updated>
    
    <content type="html"><![CDATA[<p>将U3D插件拖拽到Unity项目的Assets目录下，会自动在项目中import LayaAir3D选项</p><p>LayaAir3d-&gt;Export Tool中可以导出Unity Scene</p><p>导出到laya工程下的bin-&gt;res文件夹</p><p>LayaAir3D-&gt;Help-&gt;Tutorial可看哪些是能够兼容的</p><h4 id="骨骼动画："><a href="#骨骼动画：" class="headerlink" title="骨骼动画："></a>骨骼动画：</h4><ol><li>spine骨骼动画工具</li></ol><p>骨骼动画: 把动画打散, 通过工具，调骨骼的运动等来形成动画<br>spine是一个非常流行的2D骨骼动画制作工具<br>spine 动画美术人员导出3个文件:<br>  (1) .png文件:动画的”骨骼”的图片集;<br>  (2).atlas文件: 每个骨骼在图片集里面位置，大小;<br>  (3).json文件: 骨骼动画的anim控制文件,以及骨骼位置等信息;<br>骨骼动画导入: 直接把三个文件拷贝到项目的资源目录下即可;<br>使用骨骼动画 2种方式:<br>  (1) 直接拖动到场景;<br>  (2) 创建一个节点来添加sp.Skeleton组件;</p><h4 id="Unity的骨骼动画："><a href="#Unity的骨骼动画：" class="headerlink" title="Unity的骨骼动画："></a>Unity的骨骼动画：</h4><p>Unity导入骨骼动画时需要的源文件也是spine导出的：</p><p>.atlas   .json   .png三个文件，不过需要将.atlas重命名为.atlas.txt</p><h4 id="Laya的骨骼动画："><a href="#Laya的骨骼动画：" class="headerlink" title="Laya的骨骼动画："></a>Laya的骨骼动画：</h4><p>Laya的骨骼动画在导入的时候是直接对接Spine导出的骨骼动画格式的，即.atlas   .json   .png三个文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;将U3D插件拖拽到Unity项目的Assets目录下，会自动在项目中import LayaAir3D选项&lt;/p&gt;
&lt;p&gt;LayaAir3d-&amp;gt;Export Tool中可以导出Unity Scene&lt;/p&gt;
&lt;p&gt;导出到laya工程下的bin-&amp;gt;res文件夹&lt;/p
      
    
    </summary>
    
    
      <category term="Laya" scheme="https://chasencenge.github.io/categories/Laya/"/>
    
      <category term="Environment" scheme="https://chasencenge.github.io/categories/Laya/Environment/"/>
    
    
      <category term="Laya" scheme="https://chasencenge.github.io/tags/Laya/"/>
    
      <category term="Environment" scheme="https://chasencenge.github.io/tags/Environment/"/>
    
  </entry>
  
  <entry>
    <title>为Sublime添加TypeScript高亮支持</title>
    <link href="https://chasencenge.github.io/2020/07/09/%E4%B8%BASublime%E6%B7%BB%E5%8A%A0TypeScript%E9%AB%98%E4%BA%AE%E6%94%AF%E6%8C%81/"/>
    <id>https://chasencenge.github.io/2020/07/09/为Sublime添加TypeScript高亮支持/</id>
    <published>2020-07-09T00:50:23.000Z</published>
    <updated>2020-07-20T02:43:30.256Z</updated>
    
    <content type="html"><![CDATA[<h4 id="首先在cmd或者Git-CMD安装typescript编译支持："><a href="#首先在cmd或者Git-CMD安装typescript编译支持：" class="headerlink" title="首先在cmd或者Git CMD安装typescript编译支持："></a>首先在cmd或者Git CMD安装typescript编译支持：</h4><p><code>npm install -g typescript</code></p><p>若出现<code>npm ERR! code EINTEGRITY</code>报错：</p><p><code>npm cache verify</code></p><h4 id="打开sublime安装package-control："><a href="#打开sublime安装package-control：" class="headerlink" title="打开sublime安装package control："></a>打开sublime安装package control：</h4><p>在sublime中ctrl+shift+p打开命令面板</p><p>输入ip查找Package Control: Installl Package</p><h4 id="打开package-control安装TypeScript："><a href="#打开package-control安装TypeScript：" class="headerlink" title="打开package control安装TypeScript："></a>打开package control安装TypeScript：</h4><p>打开preference-&gt;package control，然后继续查找TypeScript进行安装</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;首先在cmd或者Git-CMD安装typescript编译支持：&quot;&gt;&lt;a href=&quot;#首先在cmd或者Git-CMD安装typescript编译支持：&quot; class=&quot;headerlink&quot; title=&quot;首先在cmd或者Git CMD安装typescript编
      
    
    </summary>
    
    
      <category term="Laya" scheme="https://chasencenge.github.io/categories/Laya/"/>
    
    
      <category term="Environment" scheme="https://chasencenge.github.io/tags/Environment/"/>
    
  </entry>
  
  <entry>
    <title>命局·墨敛粲星大纲</title>
    <link href="https://chasencenge.github.io/2020/07/08/%E5%91%BD%E5%B1%80%C2%B7%E5%A2%A8%E6%95%9B%E7%B2%B2%E6%98%9F%E5%A4%A7%E7%BA%B2/"/>
    <id>https://chasencenge.github.io/2020/07/08/命局·墨敛粲星大纲/</id>
    <published>2020-07-08T07:22:24.000Z</published>
    <updated>2020-07-20T02:42:24.651Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX1+Ys/dpxPTagc3uZxR+MfLt2CrlAqFSGlOprRTMNlHfo4B4tF0FLkTvVM859Q8NYGfv17csijHW4Zuhlq0MG8JaK/Lz98asOG2ouDQsuLJtu3EmG57fyDStC7A1PZrNCx+isttGQ27I3ouGLpMDlH9r+cQaVtV0H8xutPVseH9uBrG5+tC9Fwvc2OuppH4JOdNlUuNJ0TFNnb93nzGgJZBkXebwndSZ3QXH4qwgQQtG6KbqOHNFd8Z2ICyMreq3d9N8ytwKaW6qMc8ZNHOa1dq6kN0msMeWJDaeasYmwB9hRfYvAKtncWdUAcvwRy1WVjOt/Q2kzkA6eTQdwtCMdCFouR1mWiyATUL44PUcKfstd/F5cUs9NvKsoOT9mWtWfB4HKgZMJGCkPCOaplfrd3CXC3SwnZXUm6fCqlJf+Wv9WkXoN+RBhpLLCNWLiO+exKTCCGj3QXNZuONVhBGJ4cWndiBx+kFAxKAdPnMlU5LvkGJq4KSKOCiiWpaz5YqSInuTDV/l2BPEQ+t+dbGbgHjiAGHXABBBfyxdkVU+Po4T4mCr2tnx1DebnYv+Dya4U+Tub48KgNHx8CJ+jIYLUr6vokWXrj2hSMIoCB968zA9BgEjSQJ0wzCZ6CGlkbgtcWFKqZjKhHiv6PYEKnbhHkMII/n0MxReZl+Or8XBMOzRuKW8MKpYRaeyxD33nKewHtjq0OhgvOzGWeoX9k6QL8/O0p2vNK0IX9NoGsMAkDnHY1UHpzMkr+Qdj6gRr693k2+8J33w63uzXh+cXQhKWaw+Ob9Lb5NmfPFoQ/A7J1Wo0iK5GLScH6POYPNDjee4+HkUcR2qCWiofzhveE40zAjCNR5mQmfDAJ5wQH6tdycbC2qkouR0Ww6qVMG8VA1PeCkEWmAjeIvRIMLqas4pcHQunJSPuSkXBMPPUM4yPonqGfLH5VltTN9o++0rASDncVTY7rcuvdsF7JL1zgVmtoPGoSi/81L0IE24ZdU4npFDbaeqWMC9eangutH2ix2ugB0NAtsy2lwb1ewieuKjXSlu25oSk4QK6Bq4pP0xUqrq3UQVqkfGP6CWG3YL08TbjckXhhwutpqhDPx7pDFbWqB3bdUhXRUKWcwciTzdjfHDxfdkuT4AqoFGGdINTYhl+vfA2jZ6ZGofI599NKaGJIQ6u5gXkZkKFZChAYt9vDdyaPrbqy3Ckxu8mhNncZtBw7PpptB8QohUrBF7LOd644tDqPzZJ/ir1CNsmmxjU5Ys18XaFQyFmvwvn3sTMh7EoXDikZUGatV2NBZLzujQZX/WQTB0ZmRV64Y7L+BhSyXkb5ihtlhkGodQqzf3r7xwJXVAm645MqL3YteFkryFEUNPFXfRTpL3b6YoKAXccYgtUJzchyoXt2HjrmNDAEr5lCj8Wi/4EQgtQlXqqzUAY8Omo/3SEYdTJ6qvVwwH45hR7wgXmvNNBeEwKTvldndIdwrG+Wc4ZQhQpKdtGz7UJu67CLgaOWwQ5BJYTc6R5gSVqSMeYV0kjxJwMiBh/FhRCNm07c1OHuqhvheq/M0Ad/rjCDQbJLhKxzqPL3mp/f246EN8w+NrxRLTpkeYTuHh6RMIiFXvCruosuhTLk/Gtixzsp4dd9ofvw6EL3gPxH/9uIM1yi2EL0oRoMKO5af5tjQbB/jYDsN5DvFknN0ZCdXNFHgQLgY4rtxrLpHw8SvcTPGY94SPOmufP8RN7WmuYFAAW4uiZy43km+fnQfBlBOQY0wQ6V2Y8tEFsCZgP4M5ZJ7c6s9I9l3zLIff/avXlX2bXdRyTjdA5qcsFlP0SC3l1m7aPg66p7lChQvt+/NfEfZx1o9IyhT4W7a08GrtpOZC4y0i+RgRP5bAADeWL/6Qw/s2Z9dNPoSmI/kK3AWB/sWnx1dyQZEgudWeqzQ/ezHfc2E7TLnO75bUEcKcwkj3nC0pe2NqDukBKiQ+mn/vNANPUnc6mIkbdo54P6Xdn82FrySLa9BS0a8TexZncE7GlxFbgVbtoQ70VhVmoyP+APdwzc7Vak9oxxtV7p6Anu4GLm29LCSElbNybu0L/8zar3rz7tqhR4GAkYwLyYHPLkwnTRpRf4XGD+OwdQUI+SHabYyDRvrWcuUOEaJJhnnwgVuvOVILUkJCsM+54S0epVBf+/eVBbX2M3KtmWcPG0Jm+qIkQA7iQfZcS8wW/3Tl8IfCVYXgS/k5DD9Bjp1StQJ3cwQicYE4TdhyJ4ZP89X5WfJc/NuJqbeJZdTrCg4cFoeu5Kn6rm57fVZq2CccFf3l285FAd1umzWuLJxrFrJKmRef51P9qrm+fwdnzYwjBt4bUO4BwtPDCe7YdC7c3xArlS6UlEGYHIxxlivzASjT312K0dH5ZCKqa45wXobmyNbmK5UbhlxEWu/K6Q14jGIpo4pHVS285cVLr2o0JPpQd+uzfmGGvnF6ceAagtpowTrvgOyybywe76QAIwTnNWP6suJoMYmaGU6KPxWVRmziFfU5jdMt8adFI0A5bQjKwbJDsCkT+eFdamdzeg3J+iXHqtNGIRt1U8YuNml+iZkwvOiKXN47q+keWDLc1mus5cnpQ2X59czcl0EAAGWq+eM+YN8xTrNoxniXIjwUxoCgB5FE0wocwwa8uDWgwPHpqmP6q6ZgF9yOFTcTSlavpgEf9s7KQ5bmbz7xLAt4/akMlxfMm7dqcE3yS3+LtyTNeUCgP94GC5kdh8MMoFVWammpGWOXIdClY/gKJaGcKKpakiiOF/689Q7byUnG+Gg+RIjmzY223NR7YNwaUJYhEGccdN1ufEM8LJPb1Iwzigdw+CNV9W+KoVBPfGgBu5g94z/o920GHrauZUK5n4nSsJtsRuyBPib35FSinv1awRgLsfsx4oojrRRa7g2Gmx3YKHVh4TP+pjrv0PWd4Xf8CmFVXHCugdvZLvJ08W112HKIJ0D4kxljwNIlkkwiFCr3Pl2oR21/jLkB79pTWLmq+k8GclrAApkmU41nmJeY7pVY120wDMDbSV+DCbWGiw3hHwl10Mv+Hqz3gqhRwXMnFjeH6pls+V3Z9Fsic447ftu7BX1fRVL6zhYMvM73i5s7Yw4NCL15ONJKxZAHQwX4Ly/gI8LxqgnjmbvmgGcyQ7N0VHoAArKIxpsJcc3Q18ryb236q98q9btHU7Q0/DJCOBGYcOla9N3iCSZa/NO8fH2ulO2DwVDsP0aoYROhkGt2V6MuKmaUiXTabCsUmcdlqlHfD94RSrBw+2JuGgkFTfcMZa3p9XmUbccyjc2EyJqRw6a0VphUPMsItoD/LYw3CDrv5iEf3e+l9tjnARRKdbUnd/Yr0TAj1Da617Oo1hq7BANCgqDiXMnxjHxk5ETuB4XAj/jfIn+xAF1t6QLhnNtnXMHECLCuuUOL6p5LNgpailB/9WKOwntY1/kZSwTTGsw04Udxi/+cDBmw8utk0H4SCkVUA68EUD4sQrWE9JNxxWhQWGBBm0NNC6fZ3qwd2zj4pVYKxHc5jSwSg+Uy80g9+IKK0EzuL9IK5UjBngRzRAuWFPTn6D7yXiET3fhkVoX0DL4r/WcKjA0cNw4dqWxgxOGY3Ubdp1zf1SR4Uhy7X0ke/V8rJaS1v8j5XNLLj40acR/+LjZWnCKpdemXm5fIipJ4B48AxMioNxCdTZ0zg1zZ4lyQ7LmB8R1XRzqTzlqPDwswAypQ2d2FJcF69w+QcPL0qlKosi3kj7BKN8pxovFcFzhhdwAK8fADJ8yg/2RzsWZp69wC5Gwj7OIaG7Dr8NW13XZtzPuPOBaLlt8m7FP7Eqnghem6OPDlrJk4N955PjQFnTYc0hZZHeNFcGSoMxQlYXuoYekFQgi/q+nbSs9ugsyIc/ZJj86FnMnm18pY2c3bVfOog8ZgvWLu9xiUwgYe+VoLfX5NyZkJUHmr3oBs/CHOapUHWjU7tGnh5+/1/AWr1DjN0ouLAOtpwfMHvuj1HE4g0grgiuMAq2agb9tfTKMWOud2Dr+GBtBcETvQ+3b8ed790b/7f5TSobhCrEjnavr/WkUDPYolyaNbvf8/syB7761FozuHQEAr7Jv4kOCmm45M9RGD+d0rfAWDE9Vb59USCJFYYabJIriNeBW4YQzoe/GvbYmAw9B2kXxKmWjLWS5jsHYpCJ37VJYHjA1FE9g4nOzS/4yFkSEAQL4kVBUYYlneL8wAx6bHwoU/IsBfjTGw87rj6VPxnz2IoZABCrk+B/ooyanHi0fy+VY1TAFXVseg9Mei2mk9TdBjCdG7R9arSvEmIQRjy/+bn0v+I9EYr4ikyoMm+M0MKmJ58ESvv/IWft+ooGLk/JkPtlIaW4kXBI6/t+MFCYjOn0xQEJuIyyzCHgudkTUbtMS/9VSJ75oNdPuHVCOkIJ0ASvL5+OX7EknDooqZlA+IpdK1td2gMACkbeGwa931rKyGMeWGcUhB8W2Dco41MU66m9eCCYi0l1Enl10bjrC63RHriqgdbwMf+e6x13a8IIyo/qAMGGIlfk3cR58JkPKrJc+pPwptyLgDFXxBoSK9fQOnFYAl+CyUu+HEmOqynQad19YGpCEw+PNIX1yGjShqvFAAIhpmw9ZtUJ7JqQxp/6cDl8FudYmRM8Lltp7ZBi5QsRh+QT+8008+Er274n5NxgUBywFvEVbAhucpubnMcZgfIzCj/kNCzO8dtKEll/tGDQLTsW2At/gyI5259a+M0rUNrrypdGHRxDvtTrC8Pn6pNWP2pgrqTEMDRR0jclM5Id0OMUj3V/6o6Hpfc2FK3vbNRNjmIyAZ29J9FMCB2+rsgqzJFvJ+b2l3VjW/gwwTIBdQCTEbB2KNpPX+LG5Cx8Z2ncji37LgfOvbUzoxZ8R77dHpWC6srhyGa63bFiGGJ+t6/MJX6AVJ4g8CS2veK0T3YwmtO1jATKgBmOWThELjKIa0Fe+UVxRGyB9QLs8gD8Au5fcYpQ34Y8P/uajEsZJVLIW8rEnZlcDK5vKhb19lnlpnmBiMKjmdWUQ2LI592SQyZuvrCax7JL8f/HToSwvIXnQp1ICxD0D25aAyLQh+OfJ2cx+HVezsDm+qwDUURgb/LOsGTAsRwVUXUoL6INxnfuCY55XlAfxyQiVXu5UQqpfx5Y775TL7qROJj2umr/xcGm96NccI2KliH1h5A9RXF6F5Thb2cJW5vSqYwCq4oNUpRUBbl++kBC+O+D3JmpJEmN1/5zyOtn1HqolARvXNksV8B+Kw+v0eIVcqTI+km60X8FtCyo8Dqk8uA/uXI+ZWvF/RZQKYdkCgHpcWLpIO2fp1+TuPVLk4uxUZO7Elq9tcrdUcl7ja+6n/RQrzvez19bbP/+StodJ9IkPLv2ARITCtG5tZTvy9FzXmHQiVdTPRdaQf7Fq9XiY9xYJUDVYxm4wF9Dul2yZr14h5Rt5RPh9igpcEhera2sg0dW1lOpNvTWbnxZgArd/IHFQ3ATYvhkfRL4K2Kqp8vVaaUCkGEy2NIqBIxBHEePZHTuQ5ozOKAf4gnerOKke5wsFO9SkKIpzrh0jmFMTwghA442DSeV9P//Os9d+hCRwgWKr3Zk5p1iAAjKAPOV8YaXfBaLznuuLvI/h2fZ2w59I2CcewvSJt2DRdwUECXP9owvbfcMR0eZCMOFlSAOdiWhPWH6RhoGSEDzMRrmzEgAZki2yY86uJ5PaJRjrhlD13IPjowHV0RMqjhUnhh9GLW5SSOy3H33EcH1AdiFHK+kLq/iM62vz2A3JjO9VSKshRe1Gd4f9vYwuFw4stNVHku1Y5m2vmhN0FuRwgfPNtObHelYr3PkoBTFsc8GfD4JcYCs98CzGrOrkGg0FOu3f1ujow7e/UilJclon85jsxbxx5mDTBIx6N7XTgLSwP9VdDAxnPM40GxqNZqXnOq7boBO+/njJ6dl2L2dKYWpHdNpg2QLHcQNHtQ4OoUOLkpQsLo7GMbeCzwnxRr7u2sKeUwY2raiMhKo92hLwT00FQ8jbreJhnrLBLEdDl2qyrm2dzmAVbF70bYhZ+mv18PqmYIpqbZSryMfXQ5KMEPfHC9pjeLL8aPWQ+/aHsgZYxp0AsDrSk+QmWqhX2YC+6WXg8yccbbXbiTU6OeZ1aq6Hvn1ZSvbpSg8hIlba2CoG0EX462g6UaGH69zFPbG45Iibo0+WXNkAPhF3ymi6GyvcAxdyCH46NJES9S0JuKh+tyr55GUMdAUWulDADLFtYFc9vfZH97YY+f/Vo1xUZ10nbEGKFexS/JxZrcJTRCZ2nOHiHcJytT4x15o6TubBzP5Umi4E57hJQiUByb9w9YitILbdKjjPqgVQbdjpz0Oq945y39vYQp+SlpLpl0H0GYbId8gPGc6uCesGBIwKCf40kqrmEH97OfqAznxVp2HlebMKeQJ2k+89Z3ID25Rp+vByNIKj6ohsejZVjpcxR68tCgzbLIO/0AOBVTDpx9VgkkBKBH6+XAgn1uT2ILODfG8y18Dq7PdVnseuxG1Sj66DjSkBBerIffFFdAPIN08U8lhdjHEOcUSGw323GS4fnhnY1neuT8XRJHLI0xe3frHUifrapzT3Fc59ZqNsZ5t31rHHQdwYmrmzUbcYzsHCmcmQd2wUf6pGUN6+re4pilLSN6rFaud1qoa5NLZF0I8xo8nwULBJ4d5BQu8iidOp/adt+w1Tj647TVDqU/QGyznPlGg/iQfFW0cT7EkwrM1CIJ9brMmyOmObzH03w339k1nnvnPzTLorILfCbsydPAXl6qxmLfN3k1Onet71PJqH+qMmIenDYolJ/caYxdL1zw/tfY3rpxlyly+0ryHNPtBwcIKhA6TyzFO01Tmp0yAZUwv3Q7B1DoGw2cQIL4wZPcK2STr8nDO2J42dYunDmLL4ujs22PRtKDsB/f1vXXlmD1a8wzwXTNEO+vdP5ghtZwsJnoGUHymBUZTLPqhbYDK/6/jjy07imsp4C3umUBZVUARZiVSVUL5sAXsOlQKXPg21N0qRkbZXNXsqRwjDDs11moxECG4pgPrwCVYA3IhAy5E+vKCSeqCYDqHWk2vm7X1AqCbtiZF9UCSIvfq9aqysBCENodukyewYnAQUWTDSX/YpArtA7cfhX1m9vWFl6LD4LsG2XD6CicFe0uuYFz5OvsaO5ZJc5nnf5BDCyJc7+fPviTi2cjEbpqkqJER4s6zG2YKI+POvNSKpf0PfHuizOVvCk8rxc2tYTKyNLloEeh4NzkS8jxlkr7dAch/Mr4SDuPitgvJhRMhZiJesb8BRhZ1kib+JfMBwwST5+gdu1vUDB6q2gMOIQUnNolxL7PbRkpgO1Ise5BKQOcWHwUTpyuiIeKUYhWgtJATdMpY8PuAUX/g/jliWO5Bkjv3THZrcRUWx4xgGuuw+gAmx7lNtWEPtCWlPW43Ri3AJRnTJxKnsaA+/F52dg6AjNoarGEeOIdfPubwgwW4wlOF2/+G9fU7RShVYPxW0UXl4kvZKtWe5UGj4GyGtLmW+sBzNe3ZhEUFsD8OQtP66WOGU8oNxqVH5Qhpf3kQzLVS+CIUPBr4aHN2y8zDafF456SqPge58E6Yk7DNnV7/4ucCC8e2jRyz2qRvETyrUeZbGGaXalTXmwg+bNPfhJtUR4LskraxQDcChOKS9xczh1jRCLoVCZclZ/5rqes/e/O8q+bS4GeXSsLLrBnV+v/u+vsNRCp9yuKqUafCI9aZIKQMjM58yBOKDxaWUWSBcI2xVOoPBvzP3il2Bg5nLDtGqZTEiBjjueI7vYUFyG1NLnbjzCJOaQdQyaF8Ad4rgYfW7/W/K6ld2BGcess7Pi8TBRcYMazF36e6w9ary3XmVGPtW95uEhvZDTMcHmn0GFM2oHYokZC3K9+/RRsod9+ksgcnWGWyNgoft9c9zrIHCrWI+zLK5tAnFYYxAKIa5yKPtMmTmtwEoXZ/UqtulAkQe9oXR3OogdLgrZz2XXUk3E5xQ4VLRC7hhglkGHgn15Vi32iGlN+b+kxlJhcXV/QLUgIvrjqYg4+iSxGKXnNoTys4+bVyIvf/WdMCKFGvjGGG3wLD2OkA/rVh6ad/r37AIuXVg/WVVPV4aon0vKj+MkTWbnDYmcBOMC0ZdccmuKesqO/4FDwZ739GsVZ2xuVKcPFJx80mSidkkSaDkbRZYDqVPYHkbZFS+XRlqcMtchhQJhThR/t7LrAZJVsSFLxUpCk2zcRkqN35kRNc4ska1dMY3yuGbF7WhqCbqkUhHf3jeV5TC0aS+CEA6Fi+iMa3cknxgkBGSdiBFKwKgCmofE+1wfz5aqtYOLW/ZnosiFIhi5CitMATSEkR8PBGzp0Ax1zLu/aHxHUxybAiIHMzoVvo7vwYjLbYkVVneyz8OUkNjQ4jZcRKqKmW2GkgPQ3rtG403sb+TWEnmSCqkVBBvWwFSsK5UQhlG2MREC3xQ5Z1DZaOJ2zoeaMUhPjec9sNygP3VnqIp38ia+SXkzq82O+gdIAxDxzxjM8ovtBiEi0HLSY0NPNLvcqJn95Nv4wWBlnqS/jkcIOdilRRrHAui0wfxftfXPAAJYKCRJikBz6n6WYFngAPxeyOJydrvfsA3Up7AFEl7Jg7RZiSDaIZRdooDKfrmAh2mD9yvDEu988n52S4ERV8QboeMu9Su/Da7M0cnnjity9+lk+RVGX4wwH36nFOiNLexG79Ea8ZQHRK4wUaZKrr9ECk/dQFcqDRelZS8e3qvBj6JBmCzN7LDQ2DWJ+5Fdjvx8cbHBJdNvWjhn78tc7laOvdY1/L7C0+P0vOot/ThP3/GadlOz39Zm3DTqVvOwOLWMp1L2gyw3mjFflj9GaRgbo+0HJZdfwfsucnun562udblT41x5XgoMJoLSjhkv2xU8Y9VHsKBEENAU73K0uYS/jZmKY4TCDw2rVLdfLTnF0Dr7YK6JJrhZnp04FvKc1/2c3QznnlVeV4lqaZwRLIjrkLBy/+7WmHjBdv5Asq38CbE4Fg2JweGLQtZe4a1YK01eaIZBoWqV9CKmCE6rmdc3KHGwzIzcvrEkfDNcIVsd1FDn5hP5tyyu2vGRqwji+gp2jOBVWgxTbVx4eKgf337NlnkihUCe7OWwfSTnfXmQl57l1flSHPcOlM/stLYMYGjJZ4kQ8/TqHamIGZXvcvWhhKJOgrfJBB9ZnIEI4yLwuOxD9OCIqjjQTYH907QS38mpG1QI3g/8FtX4fVvsE7s/dOOa37wvN2PghYgNCGCm191SC2Y/kNLaNoxMXlFblRwY2C7k0fY2UDzFPU3sjTdR1dS/f1VbIiwgjnQkr5OWy2bnG+59V8ir27NYyB5Qkil4Lb2cOFcyfDwHlj0e84xRjTc9wjjRjGbLtJhjcGTHoJ/Z32DOa3ZVetUUTc1BFEKNkj2siyAZvLRtWP1Jd0rJS4ScAezYliV1r/bFJKNoCe0yFGvE5NRPaKRWo27xyNUUudTvuJMcLSFuD9vWnxEpP65FqUCvtPz8leVyRnmaYBwbVeHPTBiF7yBhxFeAdbgiTDEaaFMOvcQ9rDMRf4NA1m3+4YXQ/llGPLOAKRnf6LZRznSi2gs7y9QcpCbp6fun5V8xPlL0Q6PkTfhK6AjUFNDmSpuZfVRKh/oBCjgKEcirRrFWAfi2mkm5lQ5fA9IGfCJPuqm85C7E/N9J9Dp0tYLKCJDOQf7qYTNXK3StRIFkukkEnfp2i69PT86ga9MeCPu6Who7c/MNmxUL8VH4uBWJWEOaZfjCL6InK1WGfHlXTcng6YdGizScDZL37w2ePcSBz5DAc/ctt0cK+KOX5Eme8eVvkP3ZzlwhKzI0MTX0RmXZdcq4jFRtf9jRJQvFi7R1/N5EjEFWKoaQ574S190rMQIXGca+ZlXH7ug9bJ5qO1yf/F+s5BzQCNmigiEpoZl6ZTKNrJI2g4UDqrpWabKqvMCbyWH+sUDpjijXY2VjS4uGXCs1rQvcGh4sXEpHEuPsvVnhdy3qGDLccshVIqrQhLB5EHTbWrUfGk2Dimrh9GTNt4GPWkgbOkGf7FHfK5GXJdaixxfX/ciOBSr8khrS46eLssB/PKzFVlajcK/CjHtRfxNyyK0IJ8jLierIyeLKltZcJZv/+/VK+9CjU5tHIV9AuTqhqk9QE5ZDRya5tW6bior4DAK58sIHg+yVqq7pkfOBtZQFZvrpJiBZEFSuQDwkeoBLUvr8sfb+ky2gcvYJ1aumjHVZNsYaCRQ9RATikkepFtoXuynIlx8omEDZC3op2fHQrF8ljc7T+4Xc5hUKvIjcQ0LSyrplg6tQQbRh+rMoPfmfu6uQa5t5Bjlg53S8SV7im31uENoqBSPUl5PUYgUEUr5e710HRhjWF9J72iEcmnK14CSyjqLrdUWkgD+ftc/sQyxTeTobAtZl9zy2b3uUoELgEcNDx5qd3IHqAQksFXCXZL22mOIH5my8oaGwQV1aFT4vqMp9wlrsZsZeWDv1vRSxR0pvvEMXet8RfMaKRtrIt7cDCTC+eBqMW98zNxOpcEvf5xqU6fgI7TapJsBdMzQTgUzJaGdKtL5U4ftcMKTwBT5slJo5skcIV5Jf6W+YpnrYngnlsfUuG9/6QaPbjrrtTwT+dVuEiXfIbNn/V43JLCtagmbU+xzvgsy34AJhigHKPpnKAkMBbrwt5i0zVbO5cWoRzeXCzeSLYIVHPsdg70xokOu9dfUTghR23XiUuqmt+Hl7h6OmA2HiFK530A4Cg+ah0SkwuCQ1BE1fxaohh0oT7arZeHGSpB8kUhKdmbG/3HNdc7NFO4fzfyPQI9jGaQ8yfc09ofqvnnu8MwQIrOiFpbK3MTAlHEGPbPvPU7ewfyP8BTplirRp5aHnvXDzZUp/Dx8dhC4AJgG5dASMHWET6bueHs5GnlcCkXHsaR/+rbfq78wkZGFjeIhzr9O21f7h7IXazqRSawW0l2vAKnPGL9dEZgLtW7F7CDGVqhSZqJF3+3DkD9YdxiDhKxvILH3RoVhBaMpRcm6DIzUy0PJHa3loskry6KtVFOCRUOUrpVm7Mf6yWeRoE5HAM0RnqYB2i9gfR7RRUS03DLT1gRlCbW3bC8a47jKTaxPLupOpJZ7+wST4ElvnsU0+qepGj+cxoyCm7Cmm/gp4SirdtEAAm0tD0dzapdo5pC/YH+JQq5kEQliRdykOlEgg/16AWuEM06z1sHhHJKLHAxsz8WTudGUlBGwH4P+CMszYW5/N2eZ8M80+9LCjGuxan/Bhpo8lX5FAA7P9oidhOyiG1FUMgy7jhIF2CErQuSLzmTiALkXCWbTCjT6IoyJj3PRVMIDxge8Wd1lzy4ihC2UArP/y2MUTt43IxUYckMuxjfUb7o7vejZ7ebjlEUn4qYF0+N7n5GOy9W6B9z+svuwqY9M7msBJHc2+yHK0JUHPSAQoyiocIqqnE6nWWghYTPuAzlRgcLLATPFKJ8Klwho/eR5Pl6Avp3e9EDQ18mfAYHosYxJ86maZuCvgtMtmCWfvYeowULQbH/LUeOoI0WUjcbtTVYdCHSgVbyFj+kH1nV3HhXOUTzEq1lYHFRktovu/AyVpVoQ4ucaAThZJY1cl9o+F+Y2vJG/FnAkx4ZwJZLMf19jZS9OrsNlPXnbCgcedIJ9yqKZkaCMWEBM6H8TghiY3L755dyR/SYfN2ZE5b0Zglx6HoTvRkE5kJu7bmvV+rVm9BZYkcPsXKyhNIDztBC5shuU9Ne5aP6Uok+aWkwXE8EnkszY90f2nMqxiGeSjWuq59h75JJwsebhzkI57H1+2PLH3ydDKLOa/KC35wUNufDuvGRPmEr+h+OGfpxHF79hIsFaTzqI2Ffu3zA799nq7Yrw/RB/oiCR0zq82+VplMu42IaQlFhVFiVE7dH6/lYIdwoDI4hVrSIA2Gp7WhuDCjKyXc1euAhjWSmOeojfqk0aSrS/S8kmyuVrezXe8PmEdNTEw0gN1CpwwRiS+2S3zlqN+i30/VqVWFOuNxXBNEnF8TLYcDfyb3xBT4RuKBZ/Xj6zHyY+TS4BjfPFF+EP6ikiRFcrDRVYuweJcZMw0yGhcENKU+IRyh/+CtEQXo6MuWirSiedRQPUHFL8wKJYWelN2ys6CylWRgcsX9/OB176TvuxW3/CiLUXIJKJAgm3j5kYerRwRLuDxbE3t6oVOdpPXVQHQHrtg2n/WDU13DNNOsJcsJJUxJLxKQpfpErsK7w6vXqIOHLpU/c8GN/EuwxUcoVZ9luKNhg5BazhdHbdF+kvHEWt5mTusuYaUAKukc4BpHlt5zBhGPUrhjZ2BvC3sr3qjJjvCaL3GyvbDXz94kShiMCOXYXgXmdVvTqSkDTiEedmSLhvi0kXOJuDukspYgJaeX2/3AdSKNIQzfnuoFveJHXpTxn7ispB674dhmo0X/TpOrHHs+n+XOaH270Q5DIFs7wNpdlzkTTbBFFL+Scd4iXjDZqncNfAHI6qXdOzAG5I90dryYtzEeOykkx+4EcxqIzwOdNYHZktmSakO1rIoE1N6SVtmrUvKqlUE6X0pfHnHFsr9GwJracKRCXOxhuvsvvGwsFVFNg34OpvaH1Hh6Y49HZLqXtU3RyEORJxiHpC6gBFkxXhX6LMsKCgMAXtpXITYlnuesC0OY5Dqng9XXP+Rkg95DOH1GwcRU/QH1YlDz3j9H3HMgDNuJm3CdVw9/F+b+/1uv5BZl0RfGpIxr1Sjl2bx2MsUoYdFTYS43XeFP8qdGjv7A3NX3pBrxh1UPXWXZitM7LUkxbJJpTAtNzgu5IkEircemel77eKUlt6bXQMvPHEHX17O0L8h83/HDnP7L9+0MlFr2RY+H46ZzB37M4/VBsQSrnYDFMwMHXf3yo1cSBevxX7XKh3h9l/TxA5NKJwo7qrgLrGh+q+ZILZBBgf/nf8Sq0C91XmTQtlnBEryCpndYZWyhHaI+unuhphGpqNUKwBCGR/ntkbO8HcurQa4gzWRaXD+4INqCkAdxYkzcBLfMZ9sgXeUdcIv9Ub+j12OPa78d/hOfFWafMldplhDjcEITM/37wo3l5kYCJJjgS2OEuG/35GvTjGUoj5HJ44sZV1gMCYwmvAriWwxU59Py8ZTfbUNrGeJsVvhqklaCS8/3hbCzY5y584yomWRjakLHEBilunyofqFbXY1nOzYb6NiVbAE16yFuMWSle4gMQAEg8DOJmzPiqo09dc2jisFFEdgKfQfD79bnbYUAFw6VvRy0bjmsnEF1VWkm1hZK6sCunuqV47tbqGDYZ92Hy8d6Oxf3sLeRWo8rxgZoegQ7y0lcrLNvYV1MTXGv1EmUt9pebqoR01LEfXtCIUJBxRZkg8qeZxarXWoV1xkd8Ecu7+UPI1iez4XW8QdS0gDV/+Na/4+QiEU0OA0hVs38dgGSAnEW3RdXH6SgmCvb42xfhWKUe6wGJR2KgO6iAmlxDKEVGIWU3sMHGFUY6qocUeKceywkcielPZa47jl/yZQDPdqAXbd7FuQ2leDenwEAW+U0ucBZUIJeQAtSAqS7HVf18Tdww4aiFZ/fCYMklkoXqueX8x9XWkiWsorRJFbjPeSaaTYEOSyfg15sdWv8Js1Qe7qJt66n8KG/gASBkIlNOYoKL2vhrWxgwdKSTiSsVfC871vT7uVKkfamsbqJ3sLOemKVSe2QmWgSHQDDRA8pSmnqD29RIaaN1zaelKgVqcV5qTFtnnQeh0Y5F0TCNFiOh1BKRlOQ+UVf+Xcf47edi3EAKugls30MtmaWZxM+Ttxy/m4+SJxrGZJQTRpdoXr/lA7LXNBgm02rGKumv2rewf5wxFL6qc/GOJnVZlxeQxKdxIXT/tYB2ig73eQAMgTekOU+CwkEoL8s94mN6zikAxE8raI3NYQbEFFcNvNzhfBh9fcehftUvbJtnXtMLHC+FPlwrIAOv5B2UdROXygcBLqYyUNhxKEKgN2Bs4y1HqJ5eyJ4aH1y455rmJkesuR3A+E/WrebKcKtcK1ugYDJFpd7AA40QpKGqZXUmub5zRiD7w3fA8yx1wXA1rGLvjyCJCB5KhkYXpVGBocgwvzplf2pYihPhopJSOlB+6XA76nRnwf5A3QRxWfEh4mzCpfDnnqfb7S5dsa72yLh59T2k1nZhb4r4JQHbM9OXz7BE1zlZ9c7F1ByVxTUYJC51B/vcheB09ZCrr+qW3pqyWUc+rpsAUxS1jFG0tcDk7+VnKJ6ffIh7ImU3iYc5ljjTYhc9a/4jvH05duGZsYTyUvKBq/+I1gL1v/1X9TkzWf35aLX+TVEdjvtevaxMeat9gkl4ln4ojCBWJq1sBXR57ZKtyCA+c45hX/h+ekzx/Sgn23i0UKcOjTubI8j+seq9su0dGVj4rmfcw6Yjy5Ko7AOaJ+cpapxFazjL1lcCJmNreLR6y/68NE6QDyxXniO87FKoJmJGmDZs47hUTVrMCeQfxkMrPo5bCTYAZIHN6jrxULo2SEVjpYKkEBFFSm0HoxWWVrzzb3PqI36cgd4XiIdbGE5ih0g1HMj/EZ9MuB79Wea38p6CGzeYo4LmdtwmijI65k9OcrKoIXjy70xL9D1GH1Awgu96xW3Zt9R/k2WwlWWqhcp9Ow7tcJu+3IdFEZLEvoQM0y/3dp3ZuUhNpvbOmqOyKgt/AaYgtlPZTyIjcDrJA3ZK8k87+lOXDYDO3XkedLoak+Y7W12PTbPsBd+BwHW6/MrM73C5+JJsIabYKa6NGrhjv5MpBIIiIbMlXDN/YAiYT+Z3j2Gjn7Z9kB42KPCcDAJuitE2eyEhVUMpdaN4dycDOM/rleuXweH6RIKpOtF587ruKbVhIMtFtmfzis/wxkDrLMje+s5zAPw+rMYI9QPUtrbtjZbZksfZj/oQkHExWDNikEVRrLx2IWIBXQvswvM54nTi5jjVVpl2NFqcnBd3pdRCznPJ1cM/Fbz1Cpy4xl0bBnV+kBp2wMN3g+RfjSuamkViNlFdjqIerg6j+T/+olmOkbJUsBj9CT4/nQVH9K6D5H0zlR6b4cyc5vzkRnz+oIu2B1FOHHChG8jHVCx3fhkD0WbB8d4mWoXcT1sCaonKvtex89UmYx4wX1jwcPqP8+wfOchjYO0cUs04tguDwQtW5qdpEcOrshnIXHNz+8m5qLimoUtxLGxOKgCxh3Wy/3fQmbNMlM02Y6PpR0KKivYiNjWYiETq+85erMJ3gO83tCJNj8f6oz7Kaigpltm7lB4kFZQHzsyQ2i5Pw7suKrTYtSd3kd8OQsfsyRO+W8DTz4oapq2Mv8QymmhXQ2PjtO0sedZW9+HxsQae6MtCRQbUZAef0JBULb6bhkHVkwexksW1OlnIhYAZuJCKvGdlLGsEKfJ6ln98VOztUkmk4W5cJmykmO586VYpMkh8XsyRWSOkOX/vLj8Sd6xHKRJrWiVRAJYy+FAr/OMwVRmQDfD91jCcRbKPEs2s/xfrGG1KmpSQxEiH1It+kuT5sGliwq9tGnUKiOvU7oKYbSU6HC7Cjyqt4BycOkbCFNWMm2o8ABMKWbjGTeVjRMXIfJI0BEtiH7+Obwi4p/CCRwU+J2y04DiNfpjtwnlZjTqzWu1eAIadXk7NqePLRXn3UwWrmKVfbIeU/xvaoHCw7hctO/uAYKxPVTAKKMjeeexHc8QtENjlb6i8/7nhSyFrAO5g2XmaRLU221XPBhFsrAYrEgYBJwaiuL37iwYqGai5ZrkLlLg1MI/ZbkHMTyhgWLw2cpDuxCjqC/VAzIKCzBgEdhmtaSAnyZc7cRv+DtW5uFm4p21MaYpIq5nWW8mTeNB/WtboPaLY4ZiW2iCEUKjO4LVqQuOjMnFj/OVhYa8LtTqGJaqNoD+djF/Pn7sWhSsLWVZtgpgEmKX2HbbUQWP+790HzeGbvt8Moyiho4HsM6UW7x7rr+atiH5ga87DrdiVSbpSWrJ+lykqgTN5IPhQpVvEOdhF9xe++k5PzfdTVmcYl0Vv6aA4EOG8yhhXP55hF9lkwF59dwTFX81LzSDsuy/ueVXlR5OV0QSm+H3tHgyByWncMO9xBNYVxTsMjXShpMSkLlHZskuBvJ7zeWozgZ3iRVI3OSoJyGtnIH8/CV+D1aZr/hJzAuMDEIMe4FhgwB+Rof1IbuoGWenEROcKd23xeh5/2sHppdSPcf9CwAhevkwFEnzzoUYUpCLGQjjElA0D0tzIwpxXhshUknK4CIrp00H5owr0uJUQ6/r4ds7u8mk5m+RhcXFjL1/C0HNAvrNtSDzsGrxQ2AT39NHzZnYXjG4820d+i923rjjoUA1Meklem5oYhKkqV3WUQ0jr4d9NvJoeXvNofvUzXLZjraQWkzHtUMILm05epkbDJKx8o6gGnpneFa6AE6pyt6PiQe4p01liUt6ArL2w4q4SX844h6WR46vY3CuWMXL0uJYCshlS9vq4WnXANyxvvmSeO7hEEtF0mwmNX2iwoydcfGc78fpA1ij8PEC1WETUo835FnAFykq6dKb/XFeAz8tKQ10LB3qEEeoBO/n4u/LhURnE3vfPverz9110tC1F+SO+TomUSekGML94IUFQzxYmrvOWrNHovFP5CrVyQELM9F39gk4VGSXmQSV7YMYAzFaGq6INXDyTW9I/P8kdkpcpoYGAVaSk/RYHinuYBCwknjsDj+NbGJzoY6MpfSCrnz9NInk4cf0pelBdhE/UPYWnd2lFgdeXOCWPiqwSb8FYXP2ClmgGvmDrI6Ek6tAhzBi8u/FtVttyb9QW8UXABmBAVEtjXR+HwQBuG2i02EDFXuXd2roPGHjT/FKWtJ1e4/Ke4CO5448pG5pRtZluENQ5SceoEj7w/roOY/kjTVwV7TKHusY6+Zq0Fr5rKqWPssv3Eu0XhrPGsfbFi8D7jAXeT0SFoHIYioQDItyDlI/HwchfyJ9xBtCHcLVcMlmalOZ6b6U6wZ8P3fUdBpoj1VqGNPaNBdlVZz2b6CusU187s5x+w/5HVaGdqTHytGw5bkpCHedAzr4fagXdsNvzIchMjuqPXdDiIopWyLX2AcBW3Qc1Vvr5Fl4SNj5QSTh6om5KVk3hc2hUJlyo1K9kX0pFd2ixHKmihEgqTKHwj2T9HKM4KQliOza85lVEHCSNngtQlWfE7uvW+qiAoNlq0kYY1EGWhzcSXiyBqoh0U02OvRqDd8dtdNalbC8fsMi/zAxElkwZvSie+iiMul/gB8UzplK3ebZH++/L+tND1pmodRuYWMVy7c2lqHi+q1TCkFFzaHOufdKR/c4QJQSx3c7rzdeICapWp0U56NCpVLbJ1eT1+gg+rEWqFAp2xs2wky+KcJqLPB24o/D4qLxdnfubh3prHjkZk+NNF8/pGRqutChaXBEhJTfh5ZAngBa+c5fkZkBdkSyC2u6MUufVT3TF1FnbN0b/25UW/nGITuHD0Cd5nVesSSwLhL1UmrsnI9+4TvDt2rYDPFprg1qGqqjiBrmhq0m7TCyIS3SVjrKluK63jGxUjWm6byA6rLyfU5pUVjjf79bclbmo8OWCWPGU98gcfhKPOTt0PjsPtZVdQpWPMWQM6M5Ix3KAA+o7oFS+Dhe91/CHNaJgCHwC93YkByCFgo6+gOd4wZoKrGCCh+DRovH7QvZXp9hQ2JjuLh3dTkUYXNdDpMxKJdsLEnbgVBwdf9ZKWg7glYAWAzi5MGngtL2a+21bYRyzypx0DDaJxqPqDnLJqLOckLDjKzlYeMWHTOEM6035+L43imS4miQ99n14ons5j9N+3mpD9VmPee7Exi38OhirW18yXVux29XmrNIBtmjspCeXtyU9IhjKV2FklFNhmphc+7yooz6QozLKXhZLui65b4C0v5hJH6+lN47uZuGS9ARvfndzJC8mNMP+5PdFrbvJQSAO0KkDAfMw1pk2rcuGMulYv6+rUopnNa5G+fzKXWxrnPqnpxGuanUSih9YhhuF5Tct8yne6gvWrSwTwR4IXQFquvf7ihHtnfiCuuUdGBycNj/YHVCxOGELZJYmyokiS9JjQY5O1YOlHRjlzesMA5IGAKDnUoHDivB3CqOHiRMSC6/jnWe0QEq2BsfRMjM3H0dDdLjwlGF8wWL4nGsYnZlfcwnC0J8FNJxI9qxNqdH9UwNv3Fi0ANoGevCcRu7Ea1MmRxvTCKzqwNCebClmbls1vrw08eZ8jS+ErlHHiki7kS2RorpCNdDWdmvBtkVYlhkl6YB0O6bRq4AOiwmJQNeeevnRh3VPNbuPsV5+mkeqiC/dn2lu6fkzHuKYjLtyeoFeQrBDSsZIwK62xeA5A/xbAggbShJHNxTV26slGPMv0uOZNHELels7rbQyj/898n5XFdoDypNFboMJisJxxUwwHoj0E/3kwGwji0101yzJzNuXedZGIwmLdsih4FBGgXED1FMp659hc5wJvwLxNrCEVbYGav45cgYh2WODs2Z/noYjSSlIQvRtcZlrdKgOoH7TwUm09NwQ8ZD7wSy6ZciBTx0b8KgNNzfxx03UHCzQ6+dlIllRjyzsXgFKoKTGh+X8fC9eUwS1ljSpOGYO7akdb1Vmqg3VJU+nsQE6QukQaEPLGN3Q/XHZtK/4anJaAIWdSBKp612c419qZea6++AIbQ5uQe5Zm3aRb8ogYTwdeVQxzvMaIXAyghMhO+imjkEPhynF0SQ53lb7PvIX7sJWy2MsiOuhM721sjU+4uTdj3KVta8v2yD43B+PzlKW8T5yTP4OpoyNcZwdfGiWf7E8/dqjV6spjaE8oixdJ9SZsDLzYlJpnzNTvEha9XBeUNAJs6ugveCGn73C94NAKeNVa6OHD9qy2f5eehQSOuad33iBBiHD47sZuzaP1o33bFqKYuGv2a6p7VunR+WdyrqjIJ5AEj5pnsHRU438nwFCtY0hbcTPBvIOtPF8A0gDdtgckVmXMlrOLwQvK4060fdIxdu13U3XjZW2y8quAOJI45/PnkfS9VjC6emuB9qAOBoxaS+mDj1Arf9l7GztExod+c4grxv9kFhkcvmslpIne31aaqpLA1i3Lm0kkQu89ztvtNjyS6NlocKEtno4ESeYscm7k6qFB5WmlBURyR99lcW6vOG3S7xaDZ7t3L2k0YsbB7LS8r/q6j+333t8HVmpkJChIgh1bf94wGcCvLAUO5gxKj9Cm6Q68TCquQzl1ee9p5s4RsQWxvxydEH/6etQmraBmD2DkQRF7/ktG08j7yrFEZFX1AtTVWVAbz7fW0QZgvi1T2VNKehzwZdvUMJFGPp2SH95WO9BPxfQfNegdrTFahjOgz2FTrAQYrxorVi1UrLxTOaDIn28YpAnRFBfmQppBEE2bDMo4pIsT3lOnsqOG6rcJKbPXWT6o7hDH6E9DEvwO0fVSWjbRjpKpXuqRLZZhtMG3ZNxNKndZgFtlLZQNkP8HkARjAQztIwgDt86D0EGPkT0q6JjZMcnW7EkamsWnVv6oIudPR+JSB4YylCKpzuyOZ0lT1wITTy96EPqe2U07aByb31osAf9MS9Abuxzqy6D+WtSVYDZtpIWQ/ADN/7MKUNSU3lvlwTYpzmFBVT7QzSR12Pf+13XsD4fYE/5Ao1kG4g8BfbrMyN+eNfa2rehfLp1AQtR9vck4fMYB7z2C39PQWY5HGrctTtBvVOTrG2sI8e4MISAjRXhRQx98IR3RACLlIBFHPnc3kb7+G7uvpiHNQ9MmLCit/4RcMZ95X85SsdLTj7EvhZ77E+v6IgiT2Y4KM23qrYmMcWrkcwW8UXkyVTzR9B8hOie6yyIRXbvmV0nwOwv1ngHTyNnBiaHaNmwwNg0HDA0h3n0SI09ePkZY6+xCbz9WDvZffdI0FVoXg+Gio7Wphg7fjI33TynqSzkkVn7u5HjkHylbysUAJ1/uFxPtJGosZIW5bAi1Z5AymPxT96hSG1M6rbOm/Y7wlvaNNfrKLiRZ682U1l+yJTWQH24rVEIp26MIT4Y4xzIQXP7Zt0WCtS4mlLzbzKkpGcEvsDE1i5yz6jQYJk4MtMH21ton/fjqAzWC37QnonODMqO3NHZQMA7LojR8N4RbDDRNVP9B7O3i4v5FKjxRec1gNXm4k7YpuH7DHLY9qdeIvCbi63fv5HcE0t2wpY6kSrB3hBSK905dYgdyEUZokb0uhJK3XTwhigL9bgbDVf8ldkLlyfz0/4nwMkrBmpA674X2uGY/Zo0hgnrUosp4k8ry+UBhT/jdLJRgMUl0fwEB9FOZe+50bA6qD7q08OrvSttNmk5QsQ4sKUe0vzBxlvK3+FEI/7En/9k2UCKPhhIJT5RFDmDIywy+EhvFss36FD6y5CQhrlEEfzwGQ2C+YJKc2nywmjwKE1yhUrqZ4GsOhJicoOM6ct/lcYXWUMqZl20Tqe/X0x+LdVaLygBNu5iqGUlScC5ev6Ru+l/b9oimyDbdNGblTNldfuKgLfm645w0G55+Wuz6QLHGD0exWx7HbO5GNbbrA1zvwz8EsVNkDTw7bklSR8iwu/BybP6Tl60VaBluLZyIhgoccZwU8CAbszKhxNy8e4IeER34h9EqNmZWRd0Rt7NLDAQd6Zwyf9BKJ7LL58bE+u1LaKuNRsa+JHZ6x9Q+rU/thM0rNxoy8r8SPSVUctXrxoIbY5pcycR47LAJKbv6rxe5AdcL3fuwrKIERUOyK3XDDpAHx8CExXKHMnuQTFYD1TsZTm5XA+26E3opdZ98W/OEG8KE1o7vRBnzH63zNPaDwz7o/zpwss4OOqJzOy29eByKmGqAaEmNnJuvFufMX8FLVB9cfMM5um2q4G8ywy6Cp7Anho1XN4+tqL7cdfZcIjMKYGcxIT/wDxPeVED2hWhDtMEOitxU8Im6Lz3/C/brHrt4DTXvrgkb5uJGA+KGNzDiuimWRlx5ajW71tK363TCqW+3P2991lRzx1PqsqYa7QxaA9+iGfQs24Kh8RV4Pfqm+MYGrWcB+fe6xKPNvKx8T2L18OLRHQmi3HsEIF2TKk8ZuvR29HwwJYua9d1CBcDNasfqyJOnpvW2A0v3iNaJ7nfQV7+ov//j20VPzkLcVvG8slXN9SK+4NaCzeC9mKBYmLgfo/ZalDuDdm6UWLvTJ5ZAQZIHeWIQSn4mxpNhRC5AY9btbPLM25WcBfeRN4LbCWzgWbj9vHgVgUYXmpuwkO45P00U6NB0A1iiAcl/hMp7rH6RMiEuozy4IOncNB5ZdCAig/rtriwe7RCAqjLXpzTm8KkFSQ8DodnxJIG0+jDDRTX6sDqb1Xpkm4szkToQ5hOCJXb2cKhUqCtvbxmX937pv+0O27YBJwrCkSHtyKe/ZcNly9Pf/eAnSLSxmrxWYb8LNBUIHCJCvTex81RzfHFcANI52fMbZqWO3plVrCb7rCm+gPPUIVqXuSV1c2RL+Z/n0VPXgqazNDxNl/8sPC3uoxxby7SwNFrx/NOJxpwOa4xtllSMnqDcheWF9OTl6Ipl1jS8VqcAUgLFq2VLHmdEYrl8leV6PSN9bhJV/8aip0R0ID0Ebk7av0AAAG9CfrFMVVJ2JWLZowzNLqcOr9a5z4Sn1yPp90MGOm+KtUNfg5TEyCQPoRUufmRxFt6kBiXAsi22PNk/r9xq/b6XfEEJ0fNV/V9+Zf5w+yitSdj0yOXvYCrjyRcwCoXKSfJ+wDRNmQmN6khYEXEplN1IR2yJLvLJpU3urp0AZJfz+GhwwX08q1a6ICahMOhni4eR0h5e+I1rHkg6UlOUfMMbSHNwu2CbMipk4FRnRC59f9iIifTP5SR/oOthA5sKzTIc6pA8oZ0RzazYZS+62dJi3EqqipQaSRY3tlTrsTWA/CiPtVMhY+dz03+y9eqsu/aeLXGyxBL3aqSlwdu5c1J+UJE2NVURIsFgWCI4d6a5r6OqKABh/JhbZoUp+yjKv6UzQg7cYID9R0qVAlmkZ702Ye1HqZwDzF7CzEXmdvm0GFMIQlgkqYRQHxmaVVFppCA3McnVhjCaBh7Amp9YlKVtt6tE/L/4uBh3U88roqGFuIeMjp27Cls+LtilnZHJRAK9gef6Hx754dhrbjo6vjGbUSGuaIM8tcPy+S89PtrToWw2SIBSnNua5+cone8TFBBgXwZDCmUU7eWqRZNrjVxiNeybJpSqYCIJL6U/4jVvgwmJv5K/5mXw5NZ2zMFrpCzuj5VhRlQNRCbHgsQdgHUiUsJOmpAWRikMC2QyMpPlzUW3biXNTPE8Buon1y/DR4rmTb3XwCsY/NxXCCtivB8s/G3HJ27R8e06PK9SnhvKctA9+TZ+WvJYLZA6Q0+hqPqEVozhYd1nQiszc9v0YN3NBXSRFvXhUCJrGa79lPHE5CgVPBdcd42+/8H2Oubg318HCq35pBISga0mSweBWj19XEpsYyldzwF5H1NsoM1wm+PWeeisbrvbUAvzFLb2CiyUA6TxTJefxsCjNT2h1uTFDo/8TtK3r6PIkpLAsf3jZke2o0aCmMA0E31sP3unaDQODPFfUFvupP4oX6hstRjPla6vObBwHbDYvSeynl/G95PZcqvPpK9m/X/NUexnYwzb6RHAyagfntgOmfsRQ3vGBZHxADr9rrtCyiP7GOQoKfi/dlrK/Qwl8Ti/OKkQkaX4J1tCIVlKhPgjJzDQbb4/LmMcoNxHqwHxHTb4Cn+w1kN6v+sf0/B339NnBowzp96nbN5/CPwewozbR0nx5NCx5txzP0AdcyvTWa9mbwepDcIn739u/zbe9DEZASxdAVnB4RYmZ1MYsmYErt4FdklktoNqWtsEnU1yTafho24dOmKV7+6dm24XaxizGOJWujPdlqr+9h1QZ/KbGq7Ckv7QX7QO9hXdo3ZCTl6SD+LpkNXfe/UvJyy1Hnt1Fp4FqB1jtfmPsN8Y3ek13AQfkkPev6qis2NOB41iftHVj/edtR8Y2FQHKcrNxcP6VlvjRmgx+P4ln/pRKOfIyh/l/xFV4BR5vjlbp2OfFYTs+xhLBy9nZWfn8wzXWNK4uBiKnTLC31BEBV3Lb7/ajrjdMd6tgr8ST0cMq+b9Bs5tEyCL5bCxXDstnAQ3RsIzegvrC+Rqc0KzVipBGfwHpdO10adLAL1AsXLcvXKY/wnILG1NWY0fLoPXqqIdQwPse16hwoAyPqj7mfI7Uq7iqi4u8iA7jzP+Paaug7zK+BtjQhDHRTimFAFpZOauFH3Za2Y5j72SSapjqXvOwKphY3GsDgQgAcReat8XwlTTmKOxWS/0FAWSDD2/31PN3TfSDW7hJ4wkfnmctnZ/DucVF61FTsnWzlpdIVgRPj1PtL88RoaCY+uBhxpeE9frV1NZK+NHjZuvxsUAKIPTHiVut+nwGMwE0d2X8z1j96Jl5xMQOBqHaBtXlEZBeW7IPb1nPkhZo/FkxCDO7lUfW2O3UWqXNQXRJaTi+FZTDqQBP6Bd+B2QJOURs2fNMeDsN0RzsbQFyvjEoJGMAV13Wd0DSVwGg/af7VkC0ASWWbl2IRXV4zIwRIbuMk+w9ifzSe8Duked8UOoqOZ5N6JMaVmjWQbwDa8I50uqPKkR51gXi8Xu6v0Qkz+SBwKDZrHvpu9eIKHBnewybt+RZTZIZIGsciMlylTtwafnuMpZO9+C3yWl5W1GvGDlikb0G+JrTsUIb+YjZPA27zsJfTxGtOqw+KXQHeVX5jEofUcfJPWqwwY8vAe21c5oA9lqKilo+wC4BFeVEeWiugJ27/v5Hm9Cwtv3RPf99vML/CJlwtAylcSdVbSXFX4gUPUFajPdjrZjGmEi90juQ5az0F6oTbSUZsZa/9eTx7kj/39oOUmVhYBcrqYkbccrb0iny3XaNsGSqZCCt+/g7xz9qWMeLGqD2tTBpp9JYBmVZKos3ttsgaMl0JDpKg9Ww2dYmjhGa54tRIRCVbakE5Oxpoq1Mmh+M/6kOfJdUzt4sJxaW1vCQ9DqyYLLET/LOA+osgYPrs7DlWAw9/f0xHKPx3NUYyqmO3b/qtPn2d2ref2pqzzC7sl+PTjH+r0xXXlnHeO1Yh883hcB3ZypWjOjjnGOENgGSRBy2lpsS/2KGeCrT1imL3qwjrpvEFRoJl0WO8V/FXGcsh8dgqzP2BF9VYh47jHDp9dIt+j0aYRfGGuCvRX0cpvGVbYwqf6EpW5iMqy/Ow+fSWnUAQgmJ2TSqOcVe54GgC+dRrk9KSp6CYA4zuBD9gxZZ4shZscXk12S3l+TApRIHT9gDzKDwxHGhLrx1qhj1ToJ4o6MPviNS7QfBFnsU2pi+bdgn+rzXfTX7YQpFI7yr2aWqAFZCYmL7sK7oHLsa+9kv3HRQT5X4eiP/fUMz4p+5pC9cn2VKz+ddR8qyq1K7gZoCWdyrnpGxk+H+R30H1DlhPB9bsWMWmCoMXGO1QNV0iEQLA9rgoeoa5dDluV6dd7Jepn645mAakWVE7zZOc5hJMCr8IXoGnJBRfdR0OZ20F3Em/DjbPPTKndwc9Z/tX0JYSlQ9hqSvDRPSXRTclUxU31NpQCeyU2QMgJYohLY3I6whjAZO7w6H7DkmsJXiDfwUkWulhBiCUeApHIjt7mF8yVWsDJIdorWPV5Yvff8f+knjuZmQ9AqewsjwVJKe2Oc6B5xY/4ilXI7pu5ONwk/jpB04MUIL8qamfvPDP4SE0NiNqSdMpym+LPK3M8aAIY3pEK1bKmxyPxHMIbjs+irIOTHa7pIG112Vd945PhfQvOXI2umaykgFaYRwF+Yv3KZxbfkz3lDj2NUqUTzruAZnUP6D6s0zS12AkALJ2zX6dSCNgt1ck41aS8InotpgQbtf0ypqSxAk7SzcDIezAp1JjsPs4iljvX/oHvGkXU6cIQtXIHmYS/DjjkXxf6/WBLL7njAByT3sG0O46VsEiOVcxmnpmTEVh7fyEkkGoZR9GkP4KKVBGo94aTe13aA8UYgpqwUBCrs2+eJcXBrpiM9YTP5sy3DtLxrQv25/Xed/VKhauY4oNnmXOxmi8IOQDC9JHWvBOZFx/zXGKS+j5xev1HHEV0q87FWuzHdUqqNCNkPxL4/kl1IgJajkY/eEVPOWFV3i1BO8KhVYSSc1/zfwv20p7aqWU9xto0TNqnUEgGxLrvSBtJ9sKX4JgRVC6uiakZLR5MRnWFkbXxPz8aVeBH2km1sGcOUQ0aGii4QQVva0i1uO0yv91wN0DVWj5b61taWfNbHHxMcIchjii3lDzwHqjt40FbpXlKikqyV3sMtkAsUIUETSHPOE2z//irWn+FBHkuN5OS0OuPonWY90U8cY/cOXAm1df5smvUzFrZVYkqtaFL91mo4Au1Q69hpfJ7nFwaa2a7Bo80nJEEk+X/+69JBGXcq8h4o7FnutgqDzA4+yo84bl094rHoReZB2jS76uX85OSK5myVjC09twz3QtpPwpt+3oIjGso2Px1t3cO4uXmB2q2+pbikzPbB71J57AQZ4FTthfWtX+ckcZ4ZuFQpGQrxC5q5PjrOuVMro//3ly45gobjbXSyPWfRRhSUNv0cG1+P1C7wNEybVKeq5jsdcqjpYHqAHYxirJto2NVOiXpzTvoidJ+K6QncOs6DnYvhA8WUK/QZasQfG3UsB0RQPffJlWTFeVr7E8c6qc/tdle4QMBtiS8GMjJueXIeSc88ODf+Oj1/W8+2JIIhupn6m2TXXRIaDGvx/jejL5TJhD2nb9I2Hd65kNvHA6LYt628ouGZ7+JiwvlJKG6Fe1GesJSirTBXGOkx+J3661ekjDmm1HWQraRtiJihFE24YXdq+76wguhSUCaRF8i2JcutMce0sehJu+TVjxUUbMD149CSScUWO12RuRHvfulTbeu4wSLJVRXXluX5PGFsKDdLUjIwU1aPuaSoOZUPm7rqeFe+70S9ZEpk2c5S7/JLo22zh5rUyp42PcF26DwBDaMOGowqwIEX4YL0jdIqwq6BbH/aYagesJ1eiMYzjuQQwZkZK7uRfmsWRDNzsgnQ+zkYOZR75qu5P2eQwkKS/mD+edfZfnUfYNjCATnrrsrRQIEcuiFOyOOJj2YrYUMYYMFeKRyaMI8samkCtD3OKkEnAi2NS9wNX0PQylgfIV+V7wIlHryBL3PNedFrq7wuJFgsPtE+wfKnH9pej90zbIJyEHmpsu9htyzHswVCCEvkcWhDR+6wJpxuAYuL4Cv5LQuFXxyPS7rimhIMjIhySS4IQAgabE7+IptDm9H4SKayl+tGmu2lgCbQcmIIlMNEH8DCAZ7As1QySNxWThNDcsYRAsL2Me5Csv+6hxO/mrOw6Of3zbFkWToyV1bHPLiv0M0RfqdMjczUVeiol1Fs1oTy5/XtoQ1OAnrE40Z0pnVebVBlExpYwAHH2zo8jgowouKaWNNS1Bk1d2xLvXUh1+kkSY10lOTqCanekaFGAv9x2B5XqclmzCMnj7pK7H2s6amLdUY7XNaCB0mSX6851XsV/FfxWegZdao1gzCKHCHHgVdKavLLmZvsvxqqrgeAzAxW4W/oAIvprZbZ6Fp6XsBaxThPGvGjh0hM7sm9DsXob+SQ5dn1lL/iqr9DPD4eCJ4gFByctgbzKxMz23dd19DHC7Swa9EZxRncNuyIZDEP+cPbaq1S2WBbsG5v7PIGtjDwTmU/YNPnAy2z5rGZSTVdJH7FWpr52DptudN7TTS/sjWGQEQz6qgL85nAQLLMohBbIo1Pq9EzCDc51eofZNY/5Tt3hV+ROB9fKJsIWBVAQf5SSJzUWZ/aM2OZ6eOlDXd38INgUaGCfC4pNq82fhEjYLjn39Yn05JhsAeZAXhamwsCsOcZgjSdxJXaYh5zEQD8TstnYdggu1/oZ/Q1HjvexSVUU+E2tmSdGC6nKXLNzs4eAxwMkNsvC6jLawvfm2Zg052HmOjf6U5IBB23BUy3+4IocstKPALWLaMWFFOlq2Gb5S/2tTtLZEgRTPUSg0TLW3kQGCWGfbXprvB7TaE8QOqKe9UkajPAXEd3k59oZPcY1p0AiplsjB1GLpLuFDKPXrmlv/rHgsIk2nfwl3zli+lW4icAdeHRKVez+YrOPGqQJn+na1GnL5TPQdwQu8/7vcwHWdo9ZJRW0h9C+G6yGKC4PyTZ9EVzSv5CGB2oSmp1N6ho1lhueuGD7ZOpRJlWMpSkHhbtgW9Qh9dSkKinRkvyVIgHn+2Tsc0hB1iNI/vehKCd7F4ZXROEl4XutaTNf93cxJZtJ8TibG3xx+eafEpCw26yEd0knwgFgHQPSCxd07usikONLGG9LWESmZhGUut0laDW7PnKgUOm0SNnd32pUe3HhdDblwlge7Ue3iMHdP3Q88hpo3Q+VAZ9QqdKegzga2Z39xRIGHdSW935C3ppDlHIPSd3x5ah3k4qyU8URenttZK5xN3GH8edQ5dPgWXDizzVFCT+v/BDEIKwkmXyXrIDksK9f6xLcsol22jFmt4n8IFsWzPLkYVpzhVJektrd51A+ETpZebNYH6YQUBbOYt0oWolb6PjXKx09uaNKTQ6tgwk8Lrj6UW/LkzD4fTTEjONu7690VHfI0fQxprjqjdj59zjJmUNfbrREQ6Sb0j5vbPxK9bu9BuoRsotMh1pcjjRlKnSN4IFHhu1qg9BY9RUWGuyWumd0BJmryL+4mKcDO0QZF+q2/7ceAp3lDygUB/1cx8zPvbchofb5j0iYKF1nNyqqhyc/fU8Ww+tsiwoZ7Vpb6sfTz1SCOEUbxtz6RxxKkmSAoxAEs9DEQxIvyK7RVk8GPpRWbNrgZar5EiEeSpGPQJawGWPCiDsEWtCi2KoxWwZ4tOd98L3wK1NYgHW9Y5MdsZjYMp+lu/WSWIpZA28jb2IM1KLXkFNz2s/y407eAbxQbOJK44nB2ikRjbXKTDWp/zSzfj0KT0wdKSfBU7/sSWNpBbE1Z7akt6j5efvzMaBfLAqbc24/ujyijXcPU7/3Y6SAYQDhrC93YfVWkHRhzZc8lGlq3HJOATQ2nCwoEV1Dl2YA8yoOEiEr2jm08iAa3uFf5QhSNx/+EPLkmB6V/5M/MRFfYc2QodZxHqJ8ijKq/VGuSHjqWy4bayrP7N12uKHPTc8nM0mEVzCcyYvE0G2617Yg5p+l+mkU41JRBILYjEYjyAQpR6T/jIImddItmSQYlRm5SLMrw1izVmrQORQJhg+pD+rL9Qc7wrSPzGeSJFtVNkkhCe6dT3R95KO8+T8dqJhGOZuxemO/9TIVLzoIs+wUot0KrLRZrjGS+TtMCDHLqEhVkB2ez91NTssUJOUXnP0X8/kqtYP8hy8Cj8RtpMmssxSPY8zRfbI13MIbTYbsqAcuB0noagNz6tJpT3eJxVfiPwyRJ6pPlC9ePT0+jQUntv46ivWsrAzuLoCB4QZY3SW3M8nqiidXpuDoj3XbCk9QVe/cBb5Cv5UBhWg50mSFANpfHyY9NKSOENXiymkopW/NM+520xMEI/QVeK4mo3P99xjIiUh9rXAGa1AKiGket0VgmIKH9wcF014PoEVzIUqylrC9b0u2mKGc9iGFDWmcFRdPibdX6U2JUhqQ1iSpNP/GGmYNz5+akzJ/Lr/WblxV/t0xZ9FyAsbEqb+fZTtsNFSutww3vywxYjNZIIVJseULgZuclZx4jzGkiznLSPDaPNE4B5sMSqriNTVo3W8MFjyJtqGTHElLnOBvYAqyN3GYtaEi3vV38kfp5LJya3btTQzA/whCwMeV/wcgyQtfMYJASFMlwQd8vA7yBsr/r/Yn5Q3LnOdPcjGOzRQIuqI0mhRWBB1zX84YASCoQKveXsFha7XDBoQE+KFoKnhDWQoCg92ltjz59wcgR5yyIX1P8yhnE+6+zx1PaynIPhoWf9elSGmBeuSBOy3xcV7SFn/GVYqGSn/MYStpph9/v/Pn6dD/6ljViM0DUO8aMNaHld/cv1As4rn/0CQgegvYZxe0hFlPNJ/lF5j5X4XSRdDYmPN30bZRyyYcm3FBeJQWdih6x+7vXFoObHts/ee5Z1l0DFA2gYTGED3LwjmxheX+Y5p4V/g5J0Z/G5LCnYxyzadBZWHo0qpkGp4tG5toa8X6S4dVhC0VV2I6T13hI7wO9Nu6V2VQtv0kLvX1qtjCNtXbAm714Nm5dphGzx6N1z3gbGafw1Zp2Ozmthw8B0UJlNLx0posdZItpi0YyWCI1f8nOdvoUnDbj3UByg/upbLj+ATpPGiXxej9crug7g5GbAmeGdNsxypr7ngwFa29kY/OPXKIQSPbOErR95+SsJM42itSUx7bwvIK88/7coC+YJi4dgNBL2LU2XK3US/DHzmEIWNSPhxJtL9HCx1F0+v1AjAO07ZOsYoCgDmqoIPn+jgsDJP3EXuGalMhEvuMa/B7twzIL4HiQZp8L1fDCbkglQDCVE0g5IgwR1kk+TgSpVE2KoS3AM6cUBHZqkQvQ5Ng2IuGDmundN7S3Hs7UItNqZClMgv/omkWsUaJpKYEEzByB3eTaK4Scj5sxGew+DSxxFCAiACyrJijrK1YUiMda6R3FAeh1Pz/VNMQBDJ66ELJEyqTRm5FmECxJ28TnjTSq98JuViwTxd/qbKeW044Ve/R8/0DHUL53cEf03A78QFlHJciLKalZUkRd2sY4DTye7vpyOV9Oq1eAgTxg5yTm9krX1G8p/QBKaPG1bYcwMODVYRHKLlROhy5TeqW9bd8/GBZ+zObhrWp8cBqDKDn84dfqLgGNoZBEFrNQVDpmNWgcWH12nHTesGUwuNNHKjQF6vW5DF+0JhlOceD9+PmN7x8C5iQ+1l3bDpW7XASewpuFYi7RzcodRwQXOz0z9U5e+Z85NH9XQLozW9v4Dtro/68x+VuvMuvlWsJ++cFXO9FPr+ZKRVTxHcf3vVxxgpnxp+Zy65vF4Kfht4dh7ozVGGXIOCDsYOAgotLIed9Z405pHT86DzRpmNfN3oBWcfR4RKXOvTNkF+vygILXiRvgMA6q5IMGJc8GcKid906P+UlxmYVA7zBylphzFjq8K7+//5WNc18xHKngcdBoxVSOG3FjdFYJvXnIGAqXPoL1bKLWCwq7rnGMfsNwdqp66IaioeP81kSSwhZBRhfVTSGmc+ZwgcQwJk7U9txVK9rcNXtQnumESdbKzg1KW3j0kOdkoH0oThBXkUl20g6G5xJ3Cqniziz32Lbp/juucvB6IG6S9uIAjdTQVf2d5w+RSPMiOgT/2V9StTKKOcT3MsvhwuVJgSKGQJKjhboSZVjKvyVTVGGtwtXYn/Rvt82lY+DIJgmE2fdKJg0jgaOHCycu/Bi0zQRFH6hO48TDOYarh+dsnYk50/IJtKreFGPZYLkzdrSEpYXaIilMJIU/v+pGGyFv6EoB7wPMUfc1uVk9z7aTHDOalxcebnBTdoIYfndxj3Mx1y+AUNQbQe/Sa8GOu76pRa0I33dRJ+CIEAWQZm42i1XmSRuqHEcQ4C73oVPFnZQxBisMfc5lxNtcuWC8xVjkcWo/GnNlOou+aJ3sB+AFMJIyOjAchO+eFRCPAIEyw3Es0sSDMQBMLIryxixoBmbasy/WTVnvX5ZVocILkVT2Na5EvruzAHLmvt4MQXdZW5r1OPST0OXEsWxn49pyBwMKlczY7IOzqrmW4UQh/Lvpi89RmQorOJXr6hhNiYecEdl++oQ3MeQ8nN32OrT8TRnKiBhBbxfHAkzfBdenmJMBlDS+agOO+S/FVHdtRGIJALWCddo8Fj+CcXXCCnjsoZfOIVkI/YFJiLNGbDkjq/PZd9n0Q6H8n5awad2hRJ5xf9Q1qp/9Rmh84RVnCOO8ZpV779I0z0J96UepJ2oR9mHOAGDuN/LdFqkFvBnvL92RUo9hkxmDRp7AInzt8ZlpPOMNjeuPEXkA9xlQ/CfNfsKsZmFqebb2yWvlgT/piRUWNj12hBPBsNzi6xs6zNQI3S72+iPWxOx1ZTYNmQ+k6jvtLaoiITOMc9d1XXoLL5WwlEIiir7HujqCPauLR/JXbABpIt7JTUq9m8jrq4jKJR8ybvbFWyJobtKrmsXxgRwgWua5/bQqIakjSr+rPNifCkqn9O61zeo3h/1zuJap1KQl222yZzymq2db6VemWLarAAyhzmqbNZ801/+ZKeYwGm2kxwxl4jwmxaO3gpu8/EVhgpcvZQvczSzq4pqqP1ubXcmVlaAizX4ZHPTzy+laxmZ5mwsDcNQ4Su02o/l7UpA6sDV2VWYJPoOvMqCZ10YKcq63ppafHH6SUTI8mZDmHUfTs/K2Kjl6FfL1AaeNipLzp4NpWhws268IoXb+m4KOQQspehjUh30FNW0faYHWwnUviqG8BZWKBwRFdFKmAsqGIzryNlCwQ1oDq3Bm7QDg5JQLyHJjN9vo0+af28aQ9F+7YIPOlMV9aJi/5Gp0++uUqguiYtDcdx0KNL7Ww1p4ugIXM8OaGVDhSuvFONfc0KwB+S311dUvqqxXkWeiuQLSU15rKRu4+00C1LSErVGfIFG+YdVnaKeRR+93/+zbr4SaF+SIDNfbARw2YlwPXsgw//BpDuhgTDWzvYa+BRVj/uo3RQwga2d+PQmXfcljKIsXVi27lNUKYN+iS71/3o/CO4h1lNtzuTYPYVNutmVn4BA8LlJ0fqvgqt7TKm/mceJHRbtQfj4KaIklGZ50K1ieN4r98soVz+aMxMYE73sNp0QBILhpw47Lo4Wol66QDjqN85uFJ8Jl99/6UFhtAd3CoqttHbCcMBj3Mvt/DByCs7xxvaQUrlS/HxaGe/1LM69mbmPU2jmaInDknIdX2s0SYnueeTmMhrZe4a52AieosNF2ZWU7TKzvXQiwehsBwrVTXBnJ83X7Mp0VhJaVAcsg+Zvo1uc2OIFUcnTHe9Dtfbg/PyhJ6PM1HZ9lsRgPu0dCWnT3wSifAHdZQHzcGWVyK+NdqOv8V1FyqFB9lUquuF0vBJOyHdZIVO7nobbFXdqNv//QDv7jzp7mr+NZMXRQe6SMWX/6ZHQzLjWXvjjVKwUzbarua0xz5k1giN+AgwZeqWIagiv7LFhYIPfKBVRexNN1zjaZwt0SJ8d16xvWHKf+FPoREjtJiRY73aMOwIw4yelkzuU4jkyLbftYIEUa7Yx7F9VJSEBL7RfCreVtwp8ln3AdFfqPiOVpnwdNkc6BYK9MYSyidoOhCm6v4T7+jIA0tQownzKzvQMVxAyIPWToAcKQWPvRE39x1ZUH1slDde/zhBz7fLVpEtlek8NykNYDkTU1GYqQoSV5HW4RTxdZgN8iLPppB9ZHOBiJIbCqClIwya4opK1Z3xLV6camrvSpTlpy+cpN+rGOS/vxa9Bq2RtngjftBp+u+6v1PD1gKOVvz6oJ4whznnVYEp2W23y9wv3uj6yN0/brR3KhmHQo1RoKJjmhpHa8utQhHlto2Q8WNnxAkpAmoNeL9oUsECBL4hdXsEP9yMi/4mqkrRHJJCdYgjpJilKhippivRzNyUwlcYxLRGX2e36TCkz/9cwy9h9FDMP6a4uxLyOkkV9TTwMYWftd/WRKBOuYJYyV122fHSFh/P6VN29s2JG7lt2jxpbYqxi90rw/HEWoC4mAT/Zb/Pa9I5qTM03aYK1HxTXlW1ph3gDZIc3th2bJu1Ij/WMULW9ysbWo06JbygX6M9eUGwiHo4ji4lFcFmzxTu6YcdPGGVu0uwDvE1+8M1ArV9NO8UyY2N5HmxIwXNn0pee0GPe9QO2w6LFi219u4FQLBS+esEce40Wd1XQhYE0f4z8vDQHZzwlMaWRXW43e5dnr3hWfqpQXC1hyih8jv45sttYa9hp7UM3cXRmPk7TvCmbRO4wOAsNHAut/zVqP0JkyQF7DH1Pm2CVazN0zzXBe2Ik5l2SQwU63cca1FchI72qH1/tOu+oya5J/fLUlAwEBcG/tVhBvJQt2676SgIDjPC2G6OMz427VgUAoNrcqsZ3Iq4mnK6j2gjTGGk876hEveCP7fak6uO0d0lirYUakCah128Yz7GKbUfk72Xo3ZE7Te//Rtrb8jkh8i6MowUjAxwESnN/DWynxDfkB6OkT+ldZJ9Ni2a2+NGyCBmFzsQdinNv+G6PhawvRi0YFNpA/eDTM59mbKyNB/+MJSww62lz39nQ2ksPiAM4oWt5SYQuF0KopkM91gIt1+MifXBNVoEGKVfDubyuluCLlAQ0DoRWo1qn/ocJghYWBItWglD3+EDfO9mxau0pqPVBjbTwF8Pmg54A5Fz4Rvct5Ko6Q/PRx0xQe/4JBgAgvrLs8V11HwtniyK+uL+Z1JLd8dlN2vTfdjO7u9P4Jbhd2BBlxbAMtAMQXPBoWKDgaCK5LwGSREo60/AIcTzBgG7z1R5D0sa2juwHjsacLInKzCouVc4o/qxlKMuCuOqcdfLfBYuWVPM31roxQU88f7uZe54fTqMvjC/Q5+9yXUIWUFe//NpnksU5ZWNCJkbkwkd22KZAo/RTHkNQM3asP3KQRDT+txjeztJv7zGeWp5WlJ/fvBBTIYLj/QAMX7t6tHu/BKwAhGwA009RuELlENTn8ObElQaflLL/ayKssvvgKpf71d5dsdkbyH3eYL8xIgNp4VJkYa88C9dNF9pQvfC4DKu9hP3HxCdgr3zdYhI5ZgVjauE0B7jtym2hEgW798j/d0N+IF3AbswMCd9xVsbSmeHudM3VJUGNfINaO8UKx3koXCQLjdbr5ZtTL+USn7Yu4ruNSVDe+hoenfVw2bxZgZh7fKhwrW6g4Hs1WjqCuwac3Wk26lBcmMo5oLph9n2sX01dDxB337NeQk+J8Goo3y3XfNaKPBNIhzzix/TOQsVOPgsDpnDB+RiqpGonDr7CmKWxbtqoZRyJn5kSKoSMjq3Q5owiNCJ9nODdIa3gcOxCeWsUaLeM0bjGaregjdSJ8/H619+o4U+Me8UULd25JFo3ES2d1xm0DiQBlb4AC10ptLsTr97bpbvio+zmUcmSEVihAV2zq7fs+3ACuzfI+ux1VeX40gGRBCWi5BjvrdwOAnVGxZxTUsN7NShEpAgU6sKxmsdFDhUwrZlhY1w87DBtgBMRdrZz5IocK+aXGck10BEOZa2+vVpbFPGkOhPp5VUNX9OnTbpaTc4MGSwUB9QL6G7sIJZyU6h8ci9txfy717aNPfNZVxqvtjbodcbTGdOx4gIB28uawwIuUrDs5H7UDU0G4Ns2m9ps+3h0a7hzDNTGU+5ig8x+s+pOEm6VL1zwucEF2eAAr0yOoC6XPuLDrS4oD00qyrXNT1X0o7ixdCX4Mv6u3MkWWUjXb4tGbXLUDVaDgeam1JcrEg13XsykYX3MHhLQFRR7HffmJD31DtVf5ISsENRHGng2J/SoHVI1ZHWrTpw2OcLmlHOuUbp75gcUUQA1hPBgEWC4EpCNecRgo60PZHUJww7MW9ga4saQbn3NC8eWlbx7t8XTvZ1oenSOrIvAHn9qlcSdzoffJ0hdzXTLixDNRBVH+InvdCMQDbDDkoBCdp1Z2D90sHQ98tPZF4zdRlz+iH2p0INmHPgPo/8NmSE0a/P+mIUm/S8hO5Ye0EDd4sokcEoyiKPbM4i0nqu/7ZSqNQ8VNEoFQ+C99aD707lX6F9VKC60FZtUoMofVBE3chivNg15gF4QfujB//KA2kz8YjXvxSveqRmgVocQFd2BpXA67m0yZuWYyD9Bfu5tNl3fdROG8bHWmm030fwq20PWIeAbb+N2BCo8y+5061eTeLj5i9p6GlmTNfgqt9z7Pe3JAmzmd5sdcyb9EyepHk3ULOwH7t3C1h6GS/k6tsG9l9/QuuSszTrDPWnNbxAwr7XeImSPbDZ05C9fXOHsP72zITQa+G7VOKfvGI5HxCMdCLQRtjwdSDG091XRaTz1cu1MCaQmmh8kzAtuQGk4aM0z2Ruv/ZAUeipLN4O/LrRMvG4DMxf5Pi/KHnGPoYywVWeoLFzLFnkZMiLr4gtVed9dRKJAdp6Z9e4lFQ+6sPtv/5ba4S4cmBVD5e6QZCjePJp4iT+3OQoU1X0oJLcvuo5y2LwbAfDlJSNPXBcJFUQ53mIdpFoZk4ZNUvODaDYTrc/ulOkIUnM/guVHICfuW8wBzUjxZR6ENbD1cxCRgohQw/O1HRRT4mCn4jrt0HWkP8d1WGsyJFIWsvfRIoviWej0IGHv3jNO4lEfJNoIa6Wt8FdgjaF9LskXLb77NVksIbbyy2PBJDpkddjzCsMYyhB1PLpxTZBkbezAdLCNd0kxNzFZC5UVKMhaCUMhb3R1/o4Tbsk3F4lsbqDNoYSKpQnLVFY2/TwTceCANbjytqfOHXhRdti/9DPDnWysdAYkGjUj7TKMFnKsSkgafRxDNq5+dowaxv8LuElurJ/+713ySa0OR304QejZSUJUM0itb5lG48un04gJ5WPvG7ye5LZArgKIcyV5hq1QlbkViR3tPK6IK+oXjKrw+zJee7xZNIay46deJq+b14f1uK+O1XubJvNwUH8jiG17qbexYmEbrcYyv4l5b/RzsDVcywxwsfHhCIgAxkKnbYfyj/TrpnfkVQzino5VDGmKDU/v1u6spL6K8pyRI+qGN8tPU2p8TtEJ6s0q/73+3nAHnQHE+6uTbU0Ves1hiMlj6GLxgbGTBEektxGvcr5kGU3lhVdIqhe6aaZPEfWRpfcuxGhkheik5PnEvuvsbOc9tf/Wkmouqp7Rb8tQ9wj1CuuVw/IB5wXnaln0QwF/rJwc0p2ndRKUNEewhZrdVKy8H+hO3hqmon1wBt9EdrRzQ0Yr9a1f7Rn3MKKIBm7puR0kUlP4XyWQH/Kscb/p2kVUXQG8Vh6VB9Q1o8tH4xdO7quOBTbfyrxpJbIztw1RCr7vSGolkN4Nbq11UxkWZXOFP5Xd0e+WCACj3qcbro+71xdrEAh3FRqwqytlZiop6l9gSGXtIOneRPm79l+gBGXblWk7loUmKmYtURGl2Oct8MpJva2LCGI1vTk1kMHG4GA/KZDcgnUohFIkcubia3FZds6mPdDD3myjiZodOftywUmbqkTC6ONb9zDXI4kFquPT7x3BqO/yUyLtJpzoGrgkZsG0TYSLZMnemU1jtOyOgFU1rTOWzG+W0Kei8DJh77XWy9m/0G8S+1P9+jtB8jUy8QdkHCbnfNwi98ohrG0F5obkhTslU9uRtVR5V1zTx7lKI5DNP8bIREEX4N365EZJLH6o16syAJknJheghWKQl/qGnBOKr0zlwLYPfFwAu0JdIXqNUNNjEaXeJzV4+PaBuHEuvSCdZmJXE1568+9bZyTkHTfaIIhM3xt8dQFsYEaQj7TwOZHpd8AzUEHqp9TgIpUV00L4iBUO0VmICGcMmUpuFc4AtWSe8V8ddsr9H3HxQI9zWCv7y6VR9rI0jzX27PMWcI9Rm3QztURqxF+MbAPG429nsVuACeW1egpCT54ocyzYgYM8HhCWaQvPaLQUP9yyEJc5Z6vFPob+5PEBrLdKJIMVhFptTB+oG0e0NnKa0DC118zx9e9p5G7yOtq7m/vPN5Qtz5aEFgfksxixfeUYQ5DMDKGBZWeFsJLOgJ/VHYVe4Khid8VEXNc3XgBUL5KVL0FVUXa6piIAItmDE+ntldZ42F4+xh6IPUz0SJlp/noxxLULDlwh1Ygg5UcszoUa2moUEaXKMe+dikq2E+UaFGt6kVRcwA+Ht0stLrA8DAop5kssYvZZBqQeASvJi854oEl4b7r05QClz1OgVUplCUgjrryb2m90VBGmXE33Fdr04oD2Vmrn7S31xxf0yW1JieBL+h7yoQglYa3F35OzUlqq6KIcg55V+Zf7NiUOFMNLx1KceO4WWGT5wov3k0kue18ubOcAYgyI+d5CK/FPN+xNdQPL7JcJJNXUnk5oC4Et4YKv+dO37OkcS3T4zBYgmudD58Z6mSwK/hUBYmaJXPaK/ehVNJJBW/XvdoiCzVKTUahDSL4ddAXmcKedj0URVDOKe1aeD//Zxx+g7hx4b2/Mham6ESyrxjau5rgLPtQmEt+6+uHBFUyhn82Ai52m+UmQYQpC1KyR0vB3a176kPxcLTeKP30PWZQbQfbcNKDoFbyW2RvaJCGixKKZtGfoaNls/KOEiHA/GVK+pv3Qwdwp8oGw+/FDgvc0XJyx04QeSb8cRRpsM39FE0F/PsfYpw1SoJKXaVoML0sqq59kMNnvx0JcViYa5/Qu/VOCF6vcnkqqsBSafcb5hgmNYx6g6QMLZB4SHaaX73Ix/7oO8S1PgYo/jdMI43ZcvE2h5AnWewkd4bmmi7YL9bffhuZ/764x98zVYQ2MnK9rpAS5+ELORwkPOaDRY6Utr0SVsxXg3ww//Go1Vc1sIvQ2syCAqLoK0pKSZsDbal+86c05GLRBeY26TkDnAkSyIA+Qlk0HBm5QYLzbjLIMcI1nyA9P1RuuMz4YwmBeNjZWcsgkeLM53Eqc3FeIGfi+uR9CiFzEkSpzV3h/PkA956CkGDPZSB8zTbw86CRgjW7HkDD/lbwXX6pl39Fq4U3To+4dqFJjSCuXh/xObHLF71C0g6SLuV0wJEuFV8D965aiVa551JrPlxAQNnvlSb0oUC4UG7WwQK6abk+JBXBzJAXxtftmtFtPdUN7rvtgDxmckv8VmDQPFxRW5m1AVwldrENBVIPnNOP4hUkg8eGrdBCOP+/jSln2X1QTLY/4KCzukGBz6SKqZFfgBlm+s7Dbthx6Mv+v41/nVOxlLvgNu49W0l4OnrbSqSW5e2SfVkY5Z5g31KXTAiGa+uxTLgVufwPZW31NGSsUTcNpZYUG+L6Ydy2W36QtOqw9ReB8TYZFIuQD8HmFaIjdIplNN6C2grg5EH1OdFdyM9yzw74UxQYqqbEgSNRkgBAVMopcFzRh/PGBHndFlBsNpQ0yLlcvUSN9xWVg90rqHneg2Q0rvO+tcjyqTbmxPzQ+1+yWLbSqVnmnmdqPbYydAs4JQpS9NIJNHjedjJ3Ic29a974eDNAGAtxKoRrdjRbtcm9WAkxYFJ0e0MPWDWWU5KlYckHK1vBuvPhgxKQ2RO23f87ug3s3JRTTrV/FNx9JGTf/vwkQhsngLEJDxrnNoNWGa/bml1oCfk6jvMIrEb5pUwGRq1hS6E/2c/LnupaqSQLiQsfDz2dvIvfeHapeX8GEb2M8Wt5WygDx0Q/49Mgva2XudllVVJ3ASi+R+aw24nSkS+qg6q4PbP3X2aDs4l3pp7F8rwJMflxwuAU1qTN0Kq8uvRgwfSPi2EfUzYV+UZDmtbnSxIKMNwwCA8T8FISRxBf1gTwcffTIq6O0tBXTZWH0sVMjnH3mbCBcprHq8JhTPlQInVzTqdA4gcJd3IWkiTDgEeAD06oDoy68LsXtcTdRqReC2TkbvrNhQZRSrIiMGxeBtCW+BhyWhz88bMTJjBtDBOqlDUBwH4Mqc4HuoK39HKU5PIePbT4nFm7j3wjirQyn2vy5TareWgISdH9g+gUlh2G/wGH+Vra1LCxoN8osvDkb+h9zlIFJV4UGFOLgHRsvNOGlEBNPsa4P6FfYtKuFwWO1I6bk22q4xHX2EPITpinyYA955D4xRja4wPDcmUTfRja6Dk9npu8sV44P3av0FoXQD3grjVJVCPhQs6vqeqtXN2IPVP+48pP01GFEq6f08/Xvd7d0mNNDQRJoHQEl347T7k429DbffkyI9Egl+twMRVoMyHnR7EFGMpnEqtBVD4593ARvce6Q2MS7hocDGT14Jh4WDl6rwVK8tG3DenFDM/tPrcuPr8MVDZVW3YRtzTyVRzx4IdiO+Ra5fBhPCieojhOTkOC9bXJ/eh7FPafMLa71uLZ2vyHglTodgVOPtsTSg0K6hU22lz2ee/rHVDScPZOshK/xoXa7/nTVZT6M4QFc/W9QccyXRulNqBn0Ohs71lVtPqkegJckII3WAUAmCRv31JfGhD07Ie3voN9oV4evoC7PrA5zYUDdOtp1NRldGyD1Q5AR8zvtVtQ8g1gMHs6SHS5K8YS1A6SD1V9e2bTcj4Bu4UsNgR5SmskWGrygyCWR909acqUrkCEC2a5mLEjXjyXMjKRf6/36YM8GE1uplu/fIvMbb3xQVqsBINqer/iFzFuDXtBQ/9KdXGKZtnI8PGoseI8MXG45s7hbwZIgKhrVjpVv6hJT7RyBO5iCJnIliOF0mqFoeoaHaUNea5fGDY7Qv4b/77dXqTeLNAlnvSCwWl//8An3uZI3z3tXjX0AUFalq7uNxV/REqO55Jd/Y9Au6Ew3ciOI6ofmYR6wG0CmBjbczpyF6LxxQ/ryRopXBldYN9UC4U6RWoja7Jj8UUDSm5hIFxserCnRpFXg3K6d0OyV2qWBoz3RSZEz1nLl0kGNvmIaJ/fbuVZAvwyZPYyZ5xi4B2AgHkEd+Pt+Xc0EASaoLSbAm56TVHbj3TLXfuT3tXPsTjacOxd6WXh2UsmFvzU0+SVrH3UudxpLWe1k6De/vibjG/TwC0ftOnrsk/YdhTdBg7/csYYua+crx6F0qwkaUSNY+Vr6GsI+4qyzQrpgoFWPNW13YCcV5vNeqZHtun+fCyv+ufhREKGrshqf20M/IOBioIuj79YJ1H9SgbdN6/WgMqDuMOS1rR7sQcIaTIBMqsl6yfCHY8jgi4v8T6rtTD80Cw2kO2xXcss3KfGDDntBW3IBUYWcJSEY5bzKxKu9IBNKmI/aDXlfyGVRtlsrIE1lPPwZdPm2MVnDsBjZGKqFAWYUiVhKXvPIg+DQfZVHJ8Hxf8GR+I+jGGDw9IeJkieg7DLO+O/HBCTF7JztO5oBl7aLxvHNY7oSVMZhTSF3Ogt8sPKqlxJtpI5upJFF5640Zb99Vz4pl1AnzzLn06uU9WILVY4QmS5lcSuziew9ySmQtO3Y9mKfH2RLcfRO5SSQYKCcTePgk3yZVVd20Dozr+S1uBqOIo79KAGJybUXwXnxviyaYrpBAIGOfOAmyOV7EawmmiOsBjEVQt1wNVCbgUEH7zEapOczcLS2/Fh37suCtrG8U7eLriXWAxTZFSmHwc2W5TnqugJuZb6KqF1FADfvi403al/Qaz53MylyM8Z+q+IMsr8gBRLH2wj2WZw=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="Writing" scheme="https://chasencenge.github.io/categories/Writing/"/>
    
    
      <category term="novel" scheme="https://chasencenge.github.io/tags/novel/"/>
    
      <category term="咸青" scheme="https://chasencenge.github.io/tags/%E5%92%B8%E9%9D%92/"/>
    
  </entry>
  
</feed>
