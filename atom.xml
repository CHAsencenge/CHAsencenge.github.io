<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>解字</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-11T04:46:14.441Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CHAsencenge</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>双十一有一说一</title>
    <link href="http://yoursite.com/2019/11/11/%E5%8F%8C%E5%8D%81%E4%B8%80%E6%9C%89%E4%B8%80%E8%AF%B4%E4%B8%80/"/>
    <id>http://yoursite.com/2019/11/11/双十一有一说一/</id>
    <published>2019-11-11T04:16:55.000Z</published>
    <updated>2019-11-11T04:46:14.441Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="writing" scheme="http://yoursite.com/categories/writing/"/>
    
    
  </entry>
  
  <entry>
    <title>partical filter</title>
    <link href="http://yoursite.com/2019/09/23/partical-filter/"/>
    <id>http://yoursite.com/2019/09/23/partical-filter/</id>
    <published>2019-09-23T05:36:58.000Z</published>
    <updated>2019-10-23T12:36:37.284Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy <span class="keyword">as</span> scipy</span><br><span class="line"><span class="keyword">from</span> numpy.random <span class="keyword">import</span> uniform</span><br><span class="line"><span class="keyword">import</span> scipy.stats</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">np.set_printoptions(threshold=<span class="number">3</span>)</span><br><span class="line">np.set_printoptions(suppress=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawLines</span><span class="params">(img, points, r, g, b)</span>:</span></span><br><span class="line">    cv2.polylines(img, [np.int32(points)], isClosed=<span class="literal">False</span>, color=(r, g, b))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawCross</span><span class="params">(img, center, r, g, b)</span>:</span></span><br><span class="line">    d = <span class="number">5</span></span><br><span class="line">    t = <span class="number">2</span></span><br><span class="line">    LINE_AA = cv2.LINE_AA <span class="keyword">if</span> cv2.__version__[<span class="number">0</span>] == <span class="string">'3'</span> <span class="keyword">else</span> cv2.CV_AA</span><br><span class="line">    color = (r, g, b)</span><br><span class="line">    ctrx = center[<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    ctry = center[<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">    cv2.line(img, (ctrx - d, ctry - d), (ctrx + d, ctry + d), color, t, LINE_AA)</span><br><span class="line">    cv2.line(img, (ctrx + d, ctry - d), (ctrx - d, ctry + d), color, t, LINE_AA)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mouseCallback</span><span class="params">(event, x, y, flags,null)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> center</span><br><span class="line">    <span class="keyword">global</span> trajectory</span><br><span class="line">    <span class="keyword">global</span> previous_x</span><br><span class="line">    <span class="keyword">global</span> previous_y</span><br><span class="line">    <span class="keyword">global</span> zs</span><br><span class="line">    </span><br><span class="line">    center=np.array([[x,y]])</span><br><span class="line">    trajectory=np.vstack((trajectory,np.array([x,y])))</span><br><span class="line">    <span class="comment">#noise=sensorSigma * np.random.randn(1,2) + sensorMu</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> previous_x &gt;<span class="number">0</span>:</span><br><span class="line">        heading=np.arctan2(np.array([y-previous_y]), np.array([previous_x-x ]))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> heading&gt;<span class="number">0</span>:</span><br><span class="line">            heading=-(heading-np.pi)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            heading=-(np.pi+heading)</span><br><span class="line">            </span><br><span class="line">        distance=np.linalg.norm(np.array([[previous_x,previous_y]])-np.array([[x,y]]) ,axis=<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        std=np.array([<span class="number">2</span>,<span class="number">4</span>])</span><br><span class="line">        u=np.array([heading,distance])</span><br><span class="line">        predict(particles, u, std, dt=<span class="number">1.</span>)</span><br><span class="line">        zs = (np.linalg.norm(landmarks - center, axis=<span class="number">1</span>) + (np.random.randn(NL) * sensor_std_err))</span><br><span class="line">        update(particles, weights, z=zs, R=<span class="number">50</span>, landmarks=landmarks)</span><br><span class="line">        </span><br><span class="line">        indexes = systematic_resample(weights)</span><br><span class="line">        resample_from_index(particles, weights, indexes)</span><br><span class="line"></span><br><span class="line">    previous_x=x</span><br><span class="line">    previous_y=y</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WIDTH=<span class="number">800</span></span><br><span class="line">HEIGHT=<span class="number">600</span></span><br><span class="line">WINDOW_NAME=<span class="string">"Particle Filter"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sensorMu=0</span></span><br><span class="line"><span class="comment">#sensorSigma=3</span></span><br><span class="line"></span><br><span class="line">sensor_std_err=<span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_uniform_particles</span><span class="params">(x_range, y_range, N)</span>:</span></span><br><span class="line">    particles = np.empty((N, <span class="number">2</span>))</span><br><span class="line">    particles[:, <span class="number">0</span>] = uniform(x_range[<span class="number">0</span>], x_range[<span class="number">1</span>], size=N)</span><br><span class="line">    particles[:, <span class="number">1</span>] = uniform(y_range[<span class="number">0</span>], y_range[<span class="number">1</span>], size=N)</span><br><span class="line">    <span class="keyword">return</span> particles</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(particles, u, std, dt=<span class="number">1.</span>)</span>:</span></span><br><span class="line">    N = len(particles)</span><br><span class="line">    dist = (u[<span class="number">1</span>] * dt) + (np.random.randn(N) * std[<span class="number">1</span>])</span><br><span class="line">    particles[:, <span class="number">0</span>] += np.cos(u[<span class="number">0</span>]) * dist</span><br><span class="line">    particles[:, <span class="number">1</span>] += np.sin(u[<span class="number">0</span>]) * dist</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(particles, weights, z, R, landmarks)</span>:</span></span><br><span class="line">    weights.fill(<span class="number">1.</span>)</span><br><span class="line">    <span class="keyword">for</span> i, landmark <span class="keyword">in</span> enumerate(landmarks):</span><br><span class="line">       </span><br><span class="line">        distance=np.power((particles[:,<span class="number">0</span>] - landmark[<span class="number">0</span>])**<span class="number">2</span> +(particles[:,<span class="number">1</span>] - landmark[<span class="number">1</span>])**<span class="number">2</span>,<span class="number">0.5</span>)</span><br><span class="line">        weights *= scipy.stats.norm(distance, R).pdf(z[i])</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    weights += <span class="number">1.e-300</span> <span class="comment"># avoid round-off to zero</span></span><br><span class="line">    weights /= sum(weights)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">neff</span><span class="params">(weights)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.</span> / np.sum(np.square(weights))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">systematic_resample</span><span class="params">(weights)</span>:</span></span><br><span class="line">    N = len(weights)</span><br><span class="line">    positions = (np.arange(N) + np.random.random()) / N</span><br><span class="line"></span><br><span class="line">    indexes = np.zeros(N, <span class="string">'i'</span>)</span><br><span class="line">    cumulative_sum = np.cumsum(weights)</span><br><span class="line">    i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; N <span class="keyword">and</span> j&lt;N:</span><br><span class="line">        <span class="keyword">if</span> positions[i] &lt; cumulative_sum[j]:</span><br><span class="line">            indexes[i] = j</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> indexes</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">estimate</span><span class="params">(particles, weights)</span>:</span></span><br><span class="line">    pos = particles[:, <span class="number">0</span>:<span class="number">1</span>]</span><br><span class="line">    mean = np.average(pos, weights=weights, axis=<span class="number">0</span>)</span><br><span class="line">    var = np.average((pos - mean)**<span class="number">2</span>, weights=weights, axis=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> mean, var</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resample_from_index</span><span class="params">(particles, weights, indexes)</span>:</span></span><br><span class="line">    particles[:] = particles[indexes]</span><br><span class="line">    weights[:] = weights[indexes]</span><br><span class="line">    weights /= np.sum(weights)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">x_range=np.array([<span class="number">0</span>,<span class="number">800</span>])</span><br><span class="line">y_range=np.array([<span class="number">0</span>,<span class="number">600</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#Number of partciles</span></span><br><span class="line">N=<span class="number">400</span></span><br><span class="line"></span><br><span class="line">landmarks=np.array([ [<span class="number">144</span>,<span class="number">73</span>], [<span class="number">410</span>,<span class="number">13</span>], [<span class="number">336</span>,<span class="number">175</span>], [<span class="number">718</span>,<span class="number">159</span>], [<span class="number">178</span>,<span class="number">484</span>], [<span class="number">665</span>,<span class="number">464</span>]  ])</span><br><span class="line">NL = len(landmarks)</span><br><span class="line">particles=create_uniform_particles(x_range, y_range, N)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">weights = np.array([<span class="number">1.0</span>]*N)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a black image, a window and bind the function to window</span></span><br><span class="line">img = np.zeros((HEIGHT,WIDTH,<span class="number">3</span>), np.uint8)</span><br><span class="line">cv2.namedWindow(WINDOW_NAME)</span><br><span class="line">cv2.setMouseCallback(WINDOW_NAME,mouseCallback)</span><br><span class="line"></span><br><span class="line">center=np.array([[<span class="number">-10</span>,<span class="number">-10</span>]])</span><br><span class="line"></span><br><span class="line">trajectory=np.zeros(shape=(<span class="number">0</span>,<span class="number">2</span>))</span><br><span class="line">robot_pos=np.zeros(shape=(<span class="number">0</span>,<span class="number">2</span>))</span><br><span class="line">previous_x=<span class="number">-1</span></span><br><span class="line">previous_y=<span class="number">-1</span></span><br><span class="line">DELAY_MSEC=<span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">    cv2.imshow(WINDOW_NAME,img)</span><br><span class="line">    img = np.zeros((HEIGHT,WIDTH,<span class="number">3</span>), np.uint8)</span><br><span class="line">    drawLines(img, trajectory,   <span class="number">0</span>,   <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">    drawCross(img, center, r=<span class="number">255</span>, g=<span class="number">0</span>, b=<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#landmarks</span></span><br><span class="line">    <span class="keyword">for</span> landmark <span class="keyword">in</span> landmarks:</span><br><span class="line">        cv2.circle(img,tuple(landmark),<span class="number">10</span>,(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),<span class="number">-1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#draw_particles:</span></span><br><span class="line">    <span class="keyword">for</span> particle <span class="keyword">in</span> particles:</span><br><span class="line">        cv2.circle(img,tuple((int(particle[<span class="number">0</span>]),int(particle[<span class="number">1</span>]))),<span class="number">1</span>,(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>),<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(DELAY_MSEC) &amp; <span class="number">0xFF</span> == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    cv2.circle(img,(<span class="number">10</span>,<span class="number">10</span>),<span class="number">10</span>,(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),<span class="number">-1</span>)</span><br><span class="line">    cv2.circle(img,(<span class="number">10</span>,<span class="number">30</span>),<span class="number">3</span>,(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>),<span class="number">-1</span>)</span><br><span class="line">    cv2.putText(img,<span class="string">"Landmarks"</span>,(<span class="number">30</span>,<span class="number">20</span>),<span class="number">1</span>,<span class="number">1.0</span>,(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">    cv2.putText(img,<span class="string">"Particles"</span>,(<span class="number">30</span>,<span class="number">40</span>),<span class="number">1</span>,<span class="number">1.0</span>,(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line">    cv2.putText(img,<span class="string">"Robot Trajectory(Ground truth)"</span>,(<span class="number">30</span>,<span class="number">60</span>),<span class="number">1</span>,<span class="number">1.0</span>,(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    drawLines(img, np.array([[<span class="number">10</span>,<span class="number">55</span>],[<span class="number">25</span>,<span class="number">55</span>]]), <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="如何安装依赖并运行"><a href="#如何安装依赖并运行" class="headerlink" title="如何安装依赖并运行"></a>如何安装依赖并运行</h2><p>打开anaconda prompt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda create -n Filters python=3</span><br><span class="line">conda activate Filters</span><br><span class="line">conda install -c menpo opencv3</span><br><span class="line">conda install numpy scipy matplotlib sympy</span><br></pre></td></tr></table></figure><p>cd python_code<br>python partical.py<br>python partical_v2.py</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>新生活你要怎么过</title>
    <link href="http://yoursite.com/2019/09/16/%E6%96%B0%E7%94%9F%E6%B4%BB%E4%BD%A0%E8%A6%81%E6%80%8E%E4%B9%88%E8%BF%87/"/>
    <id>http://yoursite.com/2019/09/16/新生活你要怎么过/</id>
    <published>2019-09-16T15:06:07.000Z</published>
    <updated>2019-09-16T15:27:31.657Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19I6Oq+RoGA5iTKAsORMZPMi7EviiaXz/U=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="writing" scheme="http://yoursite.com/categories/writing/"/>
    
    
  </entry>
  
  <entry>
    <title>你的上限真的很高吗</title>
    <link href="http://yoursite.com/2019/09/14/%E4%BD%A0%E7%9A%84%E4%B8%8A%E9%99%90%E7%9C%9F%E7%9A%84%E5%BE%88%E9%AB%98%E5%90%97/"/>
    <id>http://yoursite.com/2019/09/14/你的上限真的很高吗/</id>
    <published>2019-09-14T15:52:50.000Z</published>
    <updated>2019-09-14T15:52:50.303Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>矛盾论</title>
    <link href="http://yoursite.com/2019/09/13/%E7%9F%9B%E7%9B%BE%E8%AE%BA/"/>
    <id>http://yoursite.com/2019/09/13/矛盾论/</id>
    <published>2019-09-13T07:24:37.000Z</published>
    <updated>2019-09-16T15:32:03.483Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="writing" scheme="http://yoursite.com/categories/writing/"/>
    
    
  </entry>
  
  <entry>
    <title>电脑迁移</title>
    <link href="http://yoursite.com/2019/09/13/%E7%94%B5%E8%84%91%E8%BF%81%E7%A7%BB/"/>
    <id>http://yoursite.com/2019/09/13/电脑迁移/</id>
    <published>2019-09-13T04:51:27.000Z</published>
    <updated>2019-09-13T04:54:40.402Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19uuEgskZBqYWpx9FUo6KK+dNQqDS+yCNa2uXx9FAoV6s0st2WcARcPG/6HlaoWwFWRCyIxh32js5aHhiwepgRFIrOtokxsJiUurV7HY9K8wklkK1gGR76Sw9j+DRFleVU+2OTVWZEUN379tDJHpeFw8st87DBZqqQoeaVdGaqt4BRMOXTe+Qb62AUEkRXt6MYKhpYl8eeCVc72lFy6x/R5iUmzPTdWvLUy7vd5Y4WmWqjnA86pl0VCHgZGuYyXh7d7XhbTdFV8/2dGiKHvYjVrdmylJ2rBdx4swo6ILJ9BeizRkGFnph3+TGGEB2qyMspGtmbD4l/mgXCyyBAkFA+90UX5so0GTGO3yJb8C608rs/F4tekWvlM</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/09/12/hello-world/"/>
    <id>http://yoursite.com/2019/09/12/hello-world/</id>
    <published>2019-09-12T14:27:15.898Z</published>
    <updated>2019-07-03T10:54:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python yield</title>
    <link href="http://yoursite.com/2019/07/25/python-yield/"/>
    <id>http://yoursite.com/2019/07/25/python-yield/</id>
    <published>2019-07-25T06:59:22.000Z</published>
    <updated>2019-07-25T08:31:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">python中yield关键字的用法</blockquote><a id="more"></a><h2 id="迭代-iteration-与可迭代-iterable"><a href="#迭代-iteration-与可迭代-iterable" class="headerlink" title="迭代(iteration)与可迭代(iterable)"></a>迭代(iteration)与可迭代(iterable)</h2><p>使用<strong>容器</strong>时逐个获取元素的过程为<strong>迭代</strong>。</p><h2 id="哪些类型是可迭代的"><a href="#哪些类型是可迭代的" class="headerlink" title="哪些类型是可迭代的"></a>哪些类型是可迭代的</h2><ul><li>python中的顺序类型： <code>list</code>, <code>tuple</code>(元组，列表可修改元组不可修改，列表用中括号元组用小括号), <code>string</code>.</li><li><code>dict</code>, <code>set</code>, <code>file</code>.</li><li>某类对象提供了 <code>__iter__()</code> 或者 <code>__getitem__()</code> 方法.</li></ul><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>对迭代器不断调用<code>next()</code>方法，可依次获取下一个元素，迭代器<code>__iter__()</code>方法返回迭代器自身，因此迭代器也是可迭代的。</p><h2 id="迭代器协议-iterator-protocol"><a href="#迭代器协议-iterator-protocol" class="headerlink" title="迭代器协议(iterator protocol)"></a>迭代器协议(iterator protocol)</h2><p>一个容器提供<code>__iter__()</code>方法，该方法能返回一个能逐个访问容器内所有元素的迭代器，则该容器实现了迭代器协议。</p><h3 id="python处理for循环的过程"><a href="#python处理for循环的过程" class="headerlink" title="python处理for循环的过程"></a>python处理for循环的过程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> something:</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><p>处理for循环首先调用内建函数<code>iter(something)</code>,内建函数调用<code>something.__iter__()</code>,返回something对应的迭代器，然后for循环会调用内建函数<code>next()</code>，作用在迭代器上获取迭代器的下一个元素，并赋值给x</p><h2 id="生成器函数-generaor-function-和生成器-generator"><a href="#生成器函数-generaor-function-和生成器-generator" class="headerlink" title="生成器函数(generaor function)和生成器(generator)"></a>生成器函数(generaor function)和生成器(generator)</h2><p>如果一个函数包含 yield 表达式，那么它是一个生成器函数；调用它会返回一个特殊的迭代器，称为生成器。</p><p>生成器函数被调用后，其函数体内的代码并不会立即执行，而是返回一个生成器（generator-iterator）。当返回的生成器调用成员方法时，相应的生成器函数中的代码才会执行。</p><h2 id="“下一个yield表达式”"><a href="#“下一个yield表达式”" class="headerlink" title="“下一个yield表达式”"></a>“下一个yield表达式”</h2><p>调用 generator.next() 时，生成器函数会从当前位置开始执行到下一个 yield 表达式。这里的「下一个」指的是执行逻辑的下一个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f123</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> f123(): <span class="comment"># 1, 2, and 3, will be printed</span></span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f13</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">False</span>:</span><br><span class="line">        <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> f13(): <span class="comment"># 1 and 3, will be printed</span></span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><h3 id="使用-send-方法与生成器函数通信"><a href="#使用-send-方法与生成器函数通信" class="headerlink" title="使用 send() 方法与生成器函数通信"></a>使用 send() 方法与生成器函数通信</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        y = (<span class="keyword">yield</span> x)</span><br><span class="line">        x += y</span><br><span class="line"></span><br><span class="line">geniter = func()</span><br><span class="line">geniter.next()  <span class="comment"># 1</span></span><br><span class="line">geniter.send(<span class="number">3</span>) <span class="comment"># 4</span></span><br><span class="line">geniter.send(<span class="number">10</span>)<span class="comment"># 14</span></span><br></pre></td></tr></table></figure><p>生成器函数 func 用 yield 表达式，将处理好的 x 发送给生成器的调用者；与此同时，生成器的调用者通过 send 函数，将外部信息作为生成器函数内部的 yield 表达式的值，保存在 y 当中，并参与后续的处理。</p><h2 id="yield的好处"><a href="#yield的好处" class="headerlink" title="yield的好处"></a>yield的好处</h2><p>顺序访问容器内的前五个元素：</p><ul><li>way1:获取所有元素然后取前五</li><li>way2:逐个迭代，至第五个元素</li></ul><p>假设对于一个func(),返回值为列表，调用者对其返回值只有逐个迭代：</p><ul><li>若等函数生成所有元素可能需要很长时间</li><li>使用yield把func()变成一个生成器函数，每次产生一个元素，可以节省开销</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;python中yield关键字的用法
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>又梦</title>
    <link href="http://yoursite.com/2019/07/19/%E5%8F%88%E6%A2%A6/"/>
    <id>http://yoursite.com/2019/07/19/又梦/</id>
    <published>2019-07-19T02:55:49.000Z</published>
    <updated>2019-07-19T03:06:28.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="writing" scheme="http://yoursite.com/categories/writing/"/>
    
    
  </entry>
  
  <entry>
    <title>非极客</title>
    <link href="http://yoursite.com/2019/07/19/%E9%9D%9E%E6%9E%81%E5%AE%A2/"/>
    <id>http://yoursite.com/2019/07/19/非极客/</id>
    <published>2019-07-19T02:26:12.000Z</published>
    <updated>2019-07-19T02:52:30.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="writing" scheme="http://yoursite.com/categories/writing/"/>
    
    
  </entry>
  
  <entry>
    <title>复现vifi相关</title>
    <link href="http://yoursite.com/2019/07/18/%E5%A4%8D%E7%8E%B0vifi%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2019/07/18/复现vifi相关/</id>
    <published>2019-07-18T10:35:47.000Z</published>
    <updated>2019-07-19T03:06:48.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">复现vifi过程中涉及的相关知识</blockquote><a id="more"></a>### ]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;复现vifi过程中涉及的相关知识&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Gradle(转载自Bonker)</title>
    <link href="http://yoursite.com/2019/07/18/Gradle/"/>
    <id>http://yoursite.com/2019/07/18/Gradle/</id>
    <published>2019-07-18T08:38:29.000Z</published>
    <updated>2019-07-18T08:53:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">关于Android开发中的Gradle</blockquote><a id="more"></a><p>(转载自Bonker）原文链接：<a href="https://www.cnblogs.com/Bonker/p/5619458.html" target="_blank" rel="noopener">https://www.cnblogs.com/Bonker/p/5619458.html</a></p><h2 id="什么是Gradle"><a href="#什么是Gradle" class="headerlink" title="什么是Gradle"></a>什么是Gradle</h2><p>简单的说，Gradle是一个构建工具，它是用来帮助我们构建app的，构建包括编译、打包等过程。我们可以为Gradle指定构建规则，然后它就会根据我们的“命令”自动为我们构建app。Android Studio中默认就使用Gradle来完成应用的构建。有些同学可能会有疑问：”我用AS不记得给Gradle指定过什么构建规则呀，最后不还是能搞出来个apk。“ 实际上，app的构建过程是大同小异的，有一些过程是”通用“的，也就是每个app的构建都要经历一些公共步骤。因此，在我们在创建工程时，Android Studio自动帮我们生成了一些通用构建规则，很多时候我们甚至完全不用修改这些规则就能完成我们app的构建。</p><p>有些时候，我们会有一些个性化的构建需求，比如我们引入了第三方库，或者我们想要在通用构建过程中做一些其他的事情，这时我们就要自己在系统默认构建规则上做一些修改。这时候我们就要自己向Gradle”下命令“了，这时候我们就需要用Gradle能听懂的话了，也就是Groovy。Groovy是一种基于JVM的动态语言，关于它的具体介绍，感兴趣的同学可以文末参考”延伸阅读“部分给出的链接。</p><p>我们在开头处提到“Gradle是一种构建工具”。实际上，当我们想要更灵活的构建过程时，Gradle就成为了一个编程框架——我们可以通过编程让构建过程按我们的意愿进行。也就是说，当我们把Gradle作为构建工具使用时，我们只需要掌握它的配置脚本的基本写法就OK了；而当我们需要对构建流程进行高度定制时，就务必要掌握Groovy等相关知识了。限于篇幅，本文只从构建工具使用者的角度来介绍Gradle的一些最佳实践，在文末“延伸阅读”部分给出了几篇高质量的深入介绍Gradle的文章，其中包含了Groovy等知识的介绍。</p><h2 id="Gradle的基本组分"><a href="#Gradle的基本组分" class="headerlink" title="Gradle的基本组分"></a>Gradle的基本组分</h2><h3 id="Project与Task"><a href="#Project与Task" class="headerlink" title="Project与Task"></a>Project与Task</h3><p>在Gradle中，每一个待构建的工程是一个Project，构建一个Project需要执行一系列Task，比如编译、打包这些构建过程的子过程都对应着一个Task。具体来说，一个apk文件的构建包含以下Task：Java源码编译、资源文件编译、Lint检查、打包以生成最终的apk文件等等。</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>插件的核心工作有两个：一是定义Task；而是执行Task。也就是说，我们想让Gradle能正常工作，完成整个构建流程中的一系列Task的执行，必须导入合适的插件，这些插件中定义了构建Project中的一系列Task，并且负责执行相应的Task。</p><p>在新建工程的app模块的build.gradle文件的第一行，往往都是如下这句：</p><p>apply plugin: ‘com.android.application’<br>这句话的意思就是应用“com.android.application“这个插件来构建app模块，app模块就是Gradle中的一个Project。也就是说，这个插件负责定义并执行Java源码编译、资源文件编译、打包等一系列Task。实际上”com.android.application”整个插件中定义了如下4个顶级任务：</p><p>assemble: 构建项目的输出（apk）</p><p>check: 进行校验工作</p><p>build: 执行assemble任务与check任务</p><p>clean: 清除项目的输出</p><p>当我们执行一个任务时，会自动执行它所依赖的任务。比如，执行assemble任务会执行assembleDebug任务和assembleRelease任务，这是因为一个Android项目至少要有debug和release这两个版本的输出。</p><h3 id="Gradle配置文件"><a href="#Gradle配置文件" class="headerlink" title="Gradle配置文件"></a>Gradle配置文件</h3><p>我们在Android Studio中新建一个工程，可以得到如下的工程结构图：</p><p>上面我们说过，Android Studio中的一个Module即为Gradle中的一个Project。上图的app目录下，存在一个build.gradle文件，代表了app Module的构建脚本，它定义了应用于本模块的构建规则。我们可以看到，工程根目录下也存在一个build.gradle文件，它代表了整个工程的构建，其中定义了适用于这个工程中所有模块的构建规则。</p><p>接下来我们介绍一下上图中其他几个Gradle配置文件：</p><p>gradle.properties: 从它的名字可以看出，这个文件中定义了一系列“属性”。实际上，这个文件中定义了一系列供build.gradle使用的常量，比如keystore的存储路径、keyalias等等。</p><p>gradlew与gradlew.bat: gradlew为Linux下的shell脚本，gradlew.bat是Windows下的批处理文件。gradlew是gradle wrapper的缩写，也就是说它对gradle的命令进行了包装，比如我们进入到指定Module目录并执行“gradlew.bat assemble”即可完成对当前Module的构建（Windows系统下）。</p><p>local.properties: 从名字就可以看出来，这个文件中定义了一些本地属性，比如SDK的路径。</p><p>settings.gradle: 假如我们的项目包含了不只一个Module时，我们想要一次性构建所有Module以完成整个项目的构建，这时我们需要用到这个文件。比如我们的项目包含了ModuleA和ModuleB这两个模块，则这个文件中会包含这样的语句：include ‘:ModuleA’, ‘:ModuleB’。</p><h3 id="构建脚本"><a href="#构建脚本" class="headerlink" title="构建脚本"></a>构建脚本</h3><p>首先我们来看一下工程目录下的build.gradle，它指定了真个整个项目的构建规则，它的内容如下：</p><figure class="highlight plain"><figcaption><span>&#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    repositories &#123;</span><br><span class="line">        jcenter() //构建脚本中所依赖的库都在jcenter仓库下载</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        //指定了gradle插件的版本</span><br><span class="line">        classpath &apos;com.android.tools.build:gradle:1.5.0&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        //当前项目所有模块所依赖的库都在jcenter仓库下载</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">我们再来简单介绍下app模块的build.gradle的内容：</span><br></pre></td></tr></table></figure><p>//加载用于构建Android项目的插件<br>apply plugin: ‘com.android.application’</p><p>android { //构建Android项目使用的配置<br>    compileSdkVersion 23 //指定编译项目时使用的SDK版本<br>    buildToolsVersion “23.0.1” //指定构建工具的版本</p><pre><code>defaultConfig {    applicationId &quot;com.absfree.debugframwork&quot; //包名    minSdkVersion 15  //指定支持的最小SDK版本    targetSdkVersion 23 //针对的目标SDK版本    versionCode 1     versionName &quot;1.0&quot;}buildTypes { //针对不同的构建版本进行一些设置    release { //对release版本进行的设置        minifyEnabled false //是否开启混淆        proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;  //指定混淆文件的位置    }}</code></pre><p>}</p><p>dependencies { //指定当前模块的依赖<br>    compile fileTree(dir: ‘libs’, include: [‘*.jar’])<br>    testCompile ‘junit:junit:4.12’<br>    compile ‘com.android.support:appcompat-v7:23.1.1’<br>    compile ‘com.android.support:design:23.1.1’<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"></span><br><span class="line">## 常见配置</span><br><span class="line"></span><br><span class="line">整个工程的build.gradle通常不需我们改动，这里我们介绍下一些对模块目录下build.gradle文件的常见配置。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">### 依赖第三方库</span><br><span class="line"></span><br><span class="line">当我们的项目中用到了了一些第三方库时，我们就需要进行一些配置，以保证能正确导入相关依赖。设置方法很简单，比如我们在app模块中中用到了Fresco，只需要在build.gradle文件中的dependencies块添加如下语句：</span><br></pre></td></tr></table></figure><p>dependencies {<br>    …<br>    compile ‘com.facebook.fresco:fresco:0.11.0’<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这样一来，Gradle会自动从jcenter仓库下载我们所需的第三方库并导入到项目中。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">### 导入本地jar包</span><br><span class="line"></span><br><span class="line">在使用第三方库时，除了像上面那样从jcenter仓库下载，我们还可以导入本地的jar包。配置方法也很简单，只需要先把jar文件添加到app\libs目录下，然后在相应jar文件上单击右键，选择“Ad As Library”。然后在build.gradle的dependencies块下添加如下语句：</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">compile files(&apos;libs/xxx.jar&apos;)</span><br><span class="line">实际上我们可以看到，系统为我们创建的build.gradle中就已经包含了如下语句：</span><br><span class="line"></span><br><span class="line">compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">这句话的意思是，将libs目录下的所有jar包都导入。所以实际上我们只需要把jar包添加到libs目录下并“Ad As Library&quot;即可。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 依赖其它模块</span><br><span class="line"></span><br><span class="line">假设我们的项目包含了多个模块，并且app模块依赖other模块，那么我们只需app\build.gradle的denpendencies块下添加如下语句：</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">compile project(&apos;:other&apos;)</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">### 构建输出为aar文件</span><br><span class="line"></span><br><span class="line">通常我们构建的输出目标都是apk文件，但如果我们的当前项目时Android Library，我们的目标输出就是aar文件。要想达到这个目的也很容易，只需要把build.gradle的第一句改为如下：</span><br><span class="line"></span><br><span class="line">apply plugin:&apos;com.android.library&apos;</span><br><span class="line">这话表示我们使用的插件不再是构建Android应用的插件，而是构建Android Library的插件，这个插件定义并执行用于构建Android Library的一系列Task。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">### 自动移除不再使用的资源</span><br><span class="line"></span><br><span class="line">只需进行如下配置：</span><br></pre></td></tr></table></figure><p>android {<br>    …<br>    }<br>    buildTypes {<br>        release {<br>            …<br>            shrinkResources true<br>            …<br>        }<br>    }<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 忽略Lint错误</span><br><span class="line"></span><br><span class="line">在我们构建Android项目的过程中，有时候会由于Lint错误而终止。当这些错误来自第三方库中时，我们往往想要忽略这些错误从而继续构建进程。这时候，我们可以只需进行如下配置：</span><br></pre></td></tr></table></figure><p>android {<br>    …<br>    lintOptions {<br>        abortOnError false<br>    }<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 集成签名配置</span><br><span class="line"></span><br><span class="line">在构建release版本的Android项目时，每次都手动导入签名文件，键入密码、keyalias等信息十分麻烦。通过将签名配置集成到构建脚本中，我们就不必每次构建发行版本时都手动设置了。具体配置如下：</span><br></pre></td></tr></table></figure><p>signingConfigs {<br>    myConfig { //将”xx”替换为自己的签名文件信息<br>        storeFile file(“xx.jks”)<br>        storePassword “xx”<br>        keyAlias “xx”<br>        keyPassword “xx”<br>    }<br>}<br>android {<br>    buildTypes {<br>        release {<br>            signingConfig  signingConfigs.myConfig //在release块中加入这行<br>            …<br>        }<br>    }<br>    …<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">真实开发中，我们不应该把密码等信息直接写到build.gradle中，更好的做法是放在gradle.properties中设置：</span><br></pre></td></tr></table></figure><p>RELEASE_STOREFILE=xxx.jks<br>RELEASE_STORE_PASSWORD = xxx<br>RELEASE_KEY_ALIAS=xxx<br>RELEASE_KEY_PASSWORD=xxx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">然后在build.gradle中直接引用即可：</span><br></pre></td></tr></table></figure><p>signingConfigs {<br>    myConfig {<br>        storeFilefile(RELEASE_STOREFILE)<br>        storePassword RELEASE_STORE_PASSWORD<br>        keyAlias RELEASE_KEY_ALIAS<br>        keyPassword RELEASE_KEY_PASSWORD<br>    }<br>}</p><p>``` </p><p>关于Gradle的其他配置方法大家可以参考“延伸阅读”部分的“Gradle最佳实践”。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;关于Android开发中的Gradle&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Gradle" scheme="http://yoursite.com/categories/Gradle/"/>
    
    
      <category term="Gradle" scheme="http://yoursite.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Linux远程登录及服务器配置</title>
    <link href="http://yoursite.com/2019/07/17/Linux%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/"/>
    <id>http://yoursite.com/2019/07/17/Linux远程登录/</id>
    <published>2019-07-17T13:45:43.000Z</published>
    <updated>2019-07-18T08:56:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">Linux远程登录及服务器配置</blockquote><a id="more"></a><p>##Linux远程登录原理<br>安装telnet远程客户端登录工具的客户机通过23（默认）端口连接到Linux服务器，通过telnet将远程客户机上命令传到服务器执行并反馈。<br>###telnet软件包安装<br><code>sudo apt-get install inetutils-telnetd</code>(ubuntu没有默认安装Telnet软件包)</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;Linux远程登录及服务器配置&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="远程登录" scheme="http://yoursite.com/tags/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>usr-key</title>
    <link href="http://yoursite.com/2019/07/17/usr-key/"/>
    <id>http://yoursite.com/2019/07/17/usr-key/</id>
    <published>2019-07-17T07:33:59.000Z</published>
    <updated>2019-07-28T07:00:56.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX18t5kJrltqCsnreyjazDYketSW833KhEGIPlvESxYCLdOJSTubiRHM4Vbh+RMEYndALIXLqQpjO/vL99aloy2cfJIZA/N/hlt6E84LLLr8D1fZSw2aBB4YYDK29B9xDyDSiqV6Cab2Si/F5XD9oEbptMYNAXR8bILtNwmwry1XRL8ZmlYao0oIfHuiRW8sZUsuU58lCtn21b4rlCW/Ds/ivWbiCOfVxkqg8C2exn6RYftOfN12ex1eU7afiUyHxq0zGKqQXcLe0tciIoe1qwWLu2qniWnWZhy4z9LlbUruM19SyKylGF7hty+nKc5/u8jAkOecFDpH/B5MzBgXfrYs2AlqHq7tYMD9Gewf5Gxj04jWYpQL6h0rV3PAvgAcGtcNmDqR0pHNHUMMZ274D/w7oZ08uxstZUv3tvH6MObr96MpNKbHrN5uiZD8v+XjOr6MG50M+DxyXwSOr8EnNwdai/UVXUxc9I4jc7e4Untt7r7OB2K4EzTPBCNouNLbGXPX/Qwfx0c5oL+jNrnZCYUQp2LbR2/2zjh//2WL7F4DFSfRfWa41sPMLEBTdmx4HPDxM2Z2xT/Gv5Ec2LQ3zFgLDuONktyhwitu3UKpfmORd8Fr8ptvXaM0rAEoS3L4xM4k9KoZo066oF69N+SuqPBxlz9CgWFSbLr2r242z/9fvd9mQXeoajlwmZ+n2WeL4OOOkgeoCrHJRD6vgmIh57d6/xnb/NteZxwxmZ1Z4I6oKSQrh3H4q3GADg2ciGh3EgPOMpDL2km1MuxzsGN6dO5F57TkHSxVt2itnCPHhVgKTIKr8XnKjBF8NsHaljc7vu3yCUeoFQSZV/T+yhSV+QeDHBSH/yooxptMgSAuqQUIVlqqHBZFMX2L9zY1qWr0kXmfreRLhnMNTi8c2b7P1vpB0lJ4fACFGb77T6qat1qnsm9L/SSwppF0VCBx5p19lBBdvDJcxZYTrj5x0uP+eZTapchly5m5hBeO6ME+H37MdFPrHhbI0HYnWIDM6o8m8GZipXRRe7YtbbW/zWc34UVyqGv9XAaD1N7wiUqtJb9xh/xEVsVpkXF7UPY78wX8FMITeQdKa1TH3eXHbfTcyMBYYnrTmVavw2ycdiDVuBS0UCtUQEFRNkzUtOTxvpCSb6erFEtzRw2U+RdZ4n32qIuPMMo8WxnkXAI8huPP5dk00g+yxFxrlnqMMmP+P/ueZ3bMeMV0sJdldf3UJEkEjwt4ltlzscDdn6ni6qq/FBQWwgsWOD3QHIvOkMQTCUNbji2DNATFh2W/aM3PUyZ4KKRSKzDFOSOqbrj6LqRq6h/LQvO11jPRWedyehKXYpC/hnsnVEM3tWAchfft3zKbTTw+e5uXZfJMli/ddRlHxqNanLq+smDe5VYHTnf8udTSI/91huAUNx/Ayo3mSj0IXrWoOUj1Idq2VGnDfaj4UPHu82mg+JQtMxAUfy0JMTx2I9Y502FZ+QtvmDd2brEAees/2AcRbevLYQzFKoEEtqJP4sv8qV5sw5oW3P4P3gY6W5VWqckeYtsRHYN+zSnlDK6bnW2t02RGy3b6ZYUsDw5yhgeQeYxxJVLqxfQyZqRZqngDK0M7R2N/hw/V4pL69T93m5Mrkq6RzPOw=</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="key" scheme="http://yoursite.com/categories/key/"/>
    
    
  </entry>
  
  <entry>
    <title>light frequency authenticate</title>
    <link href="http://yoursite.com/2019/07/05/light-frequency-authenticate/"/>
    <id>http://yoursite.com/2019/07/05/light-frequency-authenticate/</id>
    <published>2019-07-05T03:09:43.000Z</published>
    <updated>2019-07-09T06:38:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">基于可见光的无线网络认证</blockquote><a id="more"></a><p>2019-07-05</p><h2 id="802-1x认证过程："><a href="#802-1x认证过程：" class="headerlink" title="802.1x认证过程："></a>802.1x认证过程：</h2><ol><li><p>当用户有访问网络需求时打开802.1X客户端程序，输入已经申请、登记过的用户名和密码，发起连接请求（EAPOL-Start报文）。此时，客户端程序将发出请求认证的报文给设备端，开始启动一次认证过程。</p></li><li><p>设备端收到请求认证的数据帧后，将发出一个请求帧（EAP-Request/Identity报文）要求用户的客户端程序发送输入的用户名。</p></li><li><p>客户端程序响应设备端发出的请求，将用户名信息通过数据帧（EAP-Response/Identity报文）发送给设备端。设备端将客户端发送的数据帧经过封包处理后（RADIUS Access-Request报文）送给认证服务器进行处理。</p></li><li><p>RADIUS服务器收到设备端转发的用户名信息后，将该信息与数据库中的用户名表对比，找到该用户名对应的密码信息，用随机生成的一个加密字对它进行加密处理，同时也将此加密字通过RADIUS Access-Challenge报文发送给设备端，由设备端转发给客户端程序。</p></li><li><p>客户端程序收到由设备端传来的加密字（EAP-Request/MD5 Challenge报文）后，用该加密字对密码部分进行加密处理（此种加密算法通常是不可逆的），生成EAP-Response/MD5 Challenge报文，并通过设备端传给认证服务器。</p></li><li><p>RADIUS服务器将收到的已加密的密码信息（RADIUS Access-Request报文）和本地经过加密运算后的密码信息进行对比，如果相同，则认为该用户为合法用户，反馈认证通过的消息（RADIUS Access-Accept报文和EAP-Success报文）。</p></li><li><p>设备收到认证通过消息后将端口改为授权状态，允许用户通过端口访问网络。在此期间，设备端会通过向客户端定期发送握手报文的方法，对用户的在线情况进行监测。缺省情况下，两次握手请求报文都得不到客户端应答，设备端就会让用户下线，防止用户因为异常原因下线而设备无法感知。</p></li><li><p>客户端也可以发送EAPOL-Logoff报文给设备端，主动要求下线。设备端把端口状态从授权状态改变成未授权状态，并向客户端发送EAP-Failure报文。</p></li></ol><h2 id="关于WiFidog："><a href="#关于WiFidog：" class="headerlink" title="关于WiFidog："></a>关于WiFidog：</h2><p>Portal认证，通常也会叫Web认证，未认证用户上网时，设备强制用户登录到特定站点，用户可以免费访问其中的服务。当用户需要使用互联网中的其它信息时，必须在门户网站进行认证，只有认证通过后才可以使用互联网资源。现金很多中国移动CMCC、中国联通、中国电信ChinaNet的WIFI都使用这种认证接入方式。</p><p>在OpenWRT上实现Portal认证，实际上早已有解决方案：</p><ol><li><p>chillispot，但原维护作者停止更新，被chillispot.info接管继续开发；</p></li><li><p>coova-chilli，它是基于chillispot开发拓展的，功能最为强大；可以去官方看一下Coova-chilli；</p></li><li><p><strong>wifidog</strong>，前两个由于原维护作者停止更新，笔者也没有深入研究，重点钻研了wifidog，Wifidog也是OpenWRT和DD-WRT中实现Portal比较出名的。但是，Wifidog只是实现AP认证网关，需要配合外部的Portal服务器才能使用，Portal主要是提供认证所需的WEB页面且实现认证计费等的功能。虽然这也有很多商用解决方案，例如wiwiz、wifiap等，但是这些商业解决方案的目标都是盈利，即使可以免费使用，免费账号的功能和权限都受到了很大的限制，例如不能自定义页面，Web认证页面有广告等等。有条件的人可能打算自己搭建Portal服务器，但是看看Wifidog的官方Wiki，对搭建过程实在是难以理解。后来，笔者发现网络上还有一个 <strong>authpuppy方案</strong> ，官方网站 <strong><a href="http://www.authpuppy.org" target="_blank" rel="noopener">www.authpuppy.org</a></strong> ，是一个已实现好的Wifidog认证服务器，里面包含各种插件供你使用，官方的安装过程也很简单，如果你懂的HTML和面向对象编程的相关知识且拥有一个服务器，可以自行修改认证页面，使用authpuppy也是一个不错的方案。</p></li><li><p>如何 <strong>自行编写一个轻量级的Web Portal认证服务器</strong> ：</p><ul><li><h3 id="Wifidog的工作原理："><a href="#Wifidog的工作原理：" class="headerlink" title="Wifidog的工作原理："></a>Wifidog的工作原理：</h3><ol><li><p>客户端发出初始化请求，比如访问 <a href="http://www.dqrun.com" target="_blank" rel="noopener">www.dqrun.com</a> 。</p></li><li><p>网关的防火墙规则将这个请求重定向到本地网关的端口上。这个端口是Wifidog监听的端口。</p></li><li><p>Wfidog提供一个HTTP重定向回复，重定向到Web认证页面，重定向的Url的Querystring中包含了Gateway的ID，Gateway的FQDN以及其他的信息。</p></li><li><p>用户向认证服务器发出认证请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gw_id=[GatewayID, default: “default”]</span><br><span class="line">gw_address=[GatewayAddress, internal IP of router]</span><br><span class="line">gw_port=[GatewayPort, port that wifidog Gateway is listening on]</span><br><span class="line">url=[user requested url]；</span><br></pre></td></tr></table></figure></li><li><p>网关返回一个（可以是自定义的）splash（也称作“登录”）页面。</p></li><li><p>用户提供他的凭据信息，比如用户名和密码。</p></li><li><p>成功认证的话，客户端将会被重定向到网关的自己的web页面上，并且带有一个认证凭据（一个一次性的token），内容比如：<a href="http://GatewayIP:GatewayPort/wifidog/auth?token=[auth" target="_blank" rel="noopener">http://GatewayIP:GatewayPort/wifidog/auth?token=[auth</a> token]；</p></li><li><p>用户就是用获取到的凭据访问网关。</p></li><li><p>网关去认证服务器询问token的有效性。</p></li><li><p>认证服务器确认token的有效性。</p></li><li><p>网关发送重定向给客户端，以从认证服务器上获取 成功提示页面，重定向到 <a href="http://portal_server:port/portal_script" target="_blank" rel="noopener">http://portal_server:port/portal_script</a> 这个位置。</p></li><li><p>认证服务器通知客户请求成功，可以上网了。</p></li></ol></li></ul></li></ol><h2 id="待完成工作："><a href="#待完成工作：" class="headerlink" title="待完成工作："></a>待完成工作：</h2><p><strong>装wifidog</strong> ，配置:<br>1）监听端口 2)服务器地址 3）5个脚本的地址(login, portal, msg, ping, auth)<br> <strong>配置方法：</strong>远程登陆openwrt: ssh <a href="mailto:root@192.168.1.1" target="_blank" rel="noopener">root@192.168.1.1</a>， 然后修改/etc/wifidog.conf文件。</p><p><strong>将笔记本搭建成服务器</strong></p><p><strong>添加对LED的频率提取功能</strong></p><p><strong>实现动态调节LED频率,将此功能添加至系统</strong></p><hr><p>2019/07/08</p><h2 id="路由器刷openwrt系统"><a href="#路由器刷openwrt系统" class="headerlink" title="路由器刷openwrt系统"></a>路由器刷openwrt系统</h2><p>恢复出厂：断电后，先按住reset再通电。<br><br>登陆192.168.1.1（breed web），先点“恢复出厂”，选择“openwrt”；再点击“更新固件”，选中已下载好的openwrt镜像，进行固件更新。<br></p><h3 id="解决路由器联网问题"><a href="#解决路由器联网问题" class="headerlink" title="解决路由器联网问题"></a>解决路由器联网问题</h3><ol><li>设置密码：点击<code>Go to password configuration...</code>，敲入2遍新的路由器密码，点击页面最下面的 保存执行按钮，密码修改即时生效。 </li><li>设置主机名和时区：<code>System</code>菜单的<code>system</code>进去，主机名改为自己希望的名称，时区设置为<code>Asia/Shanghai</code>，保存。</li><li><strong>联网设置</strong> :点击菜单<code>Network</code>中的第二项，可以选择2G或5G无线网络连接WIFI，按 <code>scan</code>扫描按钮，稍等出现列表中，选择自己(想通过这个路由连接)的WIFI，输入密码，按提交，然后稍等，按保存执行。</li></ol><h2 id="ubuntu16-04编译OpenWrt环境搭建："><a href="#ubuntu16-04编译OpenWrt环境搭建：" class="headerlink" title="ubuntu16.04编译OpenWrt环境搭建："></a>ubuntu16.04编译OpenWrt环境搭建：</h2><ol><li><p>ubuntu下OpenWrt编译环境需要安装很多组件：<br><br><code>sudo apt-get install gcc</code><br><code>sudo apt-get install g++</code><br><code>sudo apt-get install binutils</code><br><code>sudo apt-get install patch</code><br><code>sudo apt-get install bzip2</code><br><code>sudo apt-get install flex</code><br><code>sudo apt-get install bison</code><br><code>sudo apt-get install make</code><br><code>sudo apt-get install autoconf</code><br><code>sudo apt-get install gettext</code><br><code>sudo apt-get install texinfo</code><br><code>sudo apt-get install unzip</code><br><code>sudo apt-get install sharutils</code><br><code>sudo apt-get install subversion</code><br><code>sudo apt-get install libncurses5-dev</code><br><code>sudo apt-get install ncurses-term</code><br><code>sudo apt-get install zlib1g-dev</code><br><code>sudo apt-get install subversion</code><br><code>sudo apt-get install  git-core</code><br><code>sudo apt-get install gawk</code><br><code>sudo apt-get install asciidoc</code><br><code>sudo apt-get install libz-dev</code><br>当然安装之前最好先更新下组件包：<br><code>sudo apt-get update</code><br>逐个安装…</p></li><li><p>新建一个openwrt目录，使用命令：<br><code>mkdir openwrt</code><br><code>sudo chmod 777 openwrt</code><br>接下来的所有命令都在/openwrt目录下运行</p></li><li><p>下载OpenWrt源码:<br><code>git clone git://git.openwrt.org/openwrt/openwrt.git</code></p></li><li><p>添加软件扩展包：<br><code>cd /home/ngmi/openwrt/openwrt/</code><br><code>cp feeds.conf.default feeds.conf</code>(将feeds.conf.default修改为feeds.conf)</p></li><li><p>更新扩展，安装扩展：<br><code>./scripts/feeds update -a</code><br><code>./scripts/feeds install -a</code></p></li><li><p>测试下编译环境，使用命令：<br><code>make defconfig</code></p></li><li><p><code>make menuconfig</code><br>如果一切正常，会出现一个配置菜单，可以选择要编译的固件平台、型号，还能选择固件中要添加的功能和组件，至此编译环境就搭建好了。</p></li></ol><h2 id="在OpenWrt的路由器上安装Wifidog应用程序"><a href="#在OpenWrt的路由器上安装Wifidog应用程序" class="headerlink" title="在OpenWrt的路由器上安装Wifidog应用程序"></a>在OpenWrt的路由器上安装Wifidog应用程序</h2><ol><li>在OpenWrt系统的源码文件下，编辑<code>feeds.conf.default</code>文件<br><br><code>vim feeds.conf.default</code><br>在其中增加一行：<br><code>src-git wifidog https://github.com/wifidog/wifidog-gateway.git</code></li><li>然后更新，再安装：<br><code>./scripts/feeds update -a</code><br><code>./scripts/feeds install -a</code></li><li>终端执行编译命令<br><code>make menuconfig</code></li><li>在<code>Network/captive portals/</code>下选择wifidog 就有选择 WiFiDog 这一项了</li></ol><hr><p>2019/07/09</p><h2 id="配置服务器中遇到的问题"><a href="#配置服务器中遇到的问题" class="headerlink" title="配置服务器中遇到的问题"></a>配置服务器中遇到的问题</h2><p><strong>问题：</strong></p><figure class="highlight plain"><figcaption><span>python3 manage.py runserver 0.0.0.0:8000</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;manage.py&quot;, line 22, in &lt;module&gt;</span><br><span class="line">    execute_from_command_line(sys.argv)</span><br><span class="line">  File &quot;/usr/local/lib/python3.5/dist-packages/django/core/management/__init__.py&quot;, line 381, in execute_from_command_line</span><br><span class="line">    utility.execute()</span><br><span class="line">  File &quot;/usr/local/lib/python3.5/dist-packages/django/core/management/__init__.py&quot;, line 375, in execute</span><br><span class="line">    self.fetch_command(subcommand).run_from_argv(self.argv)</span><br><span class="line">  File &quot;/usr/local/lib/python3.5/dist-packages/django/core/management/base.py&quot;, line 323, in run_from_argv</span><br><span class="line">    self.execute(*args, **cmd_options)</span><br><span class="line">  File &quot;/usr/local/lib/python3.5/dist-packages/django/core/management/commands/runserver.py&quot;, line 60, in execute</span><br><span class="line">    super().execute(*args, **options)</span><br><span class="line">  File &quot;/usr/local/lib/python3.5/dist-packages/django/core/management/base.py&quot;, line 364, in execute</span><br><span class="line">    output = self.handle(*args, **options)</span><br><span class="line">  File &quot;/home/ngmi/lightFreq-master/my_wifi_auth_server/django_pdb/management/commands/runserver.py&quot;, line 59, in handle</span><br><span class="line">    and middleware not in settings.MIDDLEWARE_CLASSES):</span><br><span class="line">  File &quot;/usr/local/lib/python3.5/dist-packages/django/conf/__init__.py&quot;, line 80, in __getattr__</span><br><span class="line">    val = getattr(self._wrapped, name)</span><br><span class="line">AttributeError: &apos;Settings&apos; object has no attribute &apos;MIDDLEWARE_CLASSES&apos;</span><br></pre></td></tr></table></figure><p><strong>解决方法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">middleware = <span class="string">'django_pdb.middleware.PdbMiddleware'</span></span><br><span class="line">        <span class="keyword">if</span> ((pdb_option <span class="keyword">or</span> settings.DEBUG)</span><br><span class="line">            <span class="keyword">and</span> middleware <span class="keyword">not</span> <span class="keyword">in</span> settings.MIDDLEWARE):</span><br><span class="line">            settings.MIDDLEWARE += (middleware,)</span><br></pre></td></tr></table></figure><p>由于Django版本的问题，需要将（lightFreq-master/my_wifi_auth_server/django_pdb/management/conmands/runserver.py）以上代码中原本的MIDDLEWARE_CLASSES改为MIDDLEWARE。</p><p><strong>问题：</strong></p><figure class="highlight plain"><figcaption><span>HTTP_HOST header: '0.0.0.0:8000'. You may need to add '0.0.0.0' to ALLOWED_HOSTS.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bad Request: /</span><br><span class="line">[09/Jul/2019 14:14:40] &quot;GET / HTTP/1.1&quot; 400 66219</span><br></pre></td></tr></table></figure><p>进入<a href="http://0.0.0.0:8000页面显示Invalid" target="_blank" rel="noopener">http://0.0.0.0:8000页面显示Invalid</a>…<br><br><strong>解决办法：</strong><br>将lightFreq-master/my_wifi_auth_server/Auth_server/settings.py文件中<code>ALLOWED_HOSTS = [&#39;192.168.1.162&#39;,&#39;127.0.0.1&#39;]</code>修改为<code>ALLOWED_HOSTS = [&#39;*&#39;]</code></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;基于可见光的无线网络认证&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="light-frequency-authenticate" scheme="http://yoursite.com/categories/light-frequency-authenticate/"/>
    
    
      <category term="lightFre" scheme="http://yoursite.com/tags/lightFre/"/>
    
  </entry>
  
  <entry>
    <title>perfect-quare-number</title>
    <link href="http://yoursite.com/2019/07/04/perfect-quare-number/"/>
    <id>http://yoursite.com/2019/07/04/perfect-quare-number/</id>
    <published>2019-07-04T09:48:04.000Z</published>
    <updated>2019-07-04T10:05:02.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">求一个数，加100和加268都是完全平方数<br>解决:unindent does not match any outer indentation level问题</blockquote><a id="more"></a><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</span><br><span class="line">x = int(math.sqrt(i + <span class="number">100</span>))</span><br><span class="line">y = int(math.sqrt(i + <span class="number">268</span>))</span><br><span class="line"><span class="keyword">if</span> (x * x == i + <span class="number">100</span>) <span class="keyword">and</span> (y * y == i + <span class="number">268</span>):</span><br><span class="line"><span class="keyword">print</span> (i)</span><br></pre></td></tr></table></figure><h2 id="error"><a href="#error" class="headerlink" title="error"></a>error</h2><p>unindent does not match any outer indentation level：Tab换行对齐和四个空格的对齐不能混用，混用会这样报错。</p><p>print i：正确应为 print (i)</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;求一个数，加100和加268都是完全平方数&lt;br&gt;解决:unindent does not match any outer indentation level问题
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python-100-practices" scheme="http://yoursite.com/categories/python-100-practices/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>四年又三年</title>
    <link href="http://yoursite.com/2019/07/03/%E5%9B%9B%E5%B9%B4%E5%8F%88%E4%B8%89%E5%B9%B4/"/>
    <id>http://yoursite.com/2019/07/03/四年又三年/</id>
    <published>2019-07-03T13:02:40.000Z</published>
    <updated>2019-07-03T14:16:44.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="writing" scheme="http://yoursite.com/categories/writing/"/>
    
    
  </entry>
  
  <entry>
    <title>十六岁不太友好的reminder</title>
    <link href="http://yoursite.com/2019/07/03/%E6%B5%AE%E7%94%9F%E8%8B%A5%E6%A2%A6/"/>
    <id>http://yoursite.com/2019/07/03/浮生若梦/</id>
    <published>2019-07-03T11:57:29.000Z</published>
    <updated>2019-07-03T14:25:30.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="writing" scheme="http://yoursite.com/categories/writing/"/>
    
    
  </entry>
  
  <entry>
    <title>触动</title>
    <link href="http://yoursite.com/2019/07/03/%E8%A7%A6%E5%8A%A8/"/>
    <id>http://yoursite.com/2019/07/03/触动/</id>
    <published>2019-07-03T11:57:21.000Z</published>
    <updated>2019-07-03T12:21:48.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19EZsq3pLHlwMqFaHjIEby6TrodogJEOtz4JTtbz4cwk2IsGENH9dv6jmWz35nDRk7VTUZ5SWlOuwejE8+3H7k+PhJCzHYMPormqjFaXVClC5iWDGgm0hWQYmg7AWniTLn2cQsgTdwt9hZDHUgg42i0HNwrSvjATeSKo8tvm7PX9soshAvnfrHi3MZ98m8S+5vkYmwsE/fnm2Jaj8opE7WvAQnmSDMTAlgGSnxceNDnoxtjmM5Wbo1AHnMsUj4PFUgGlepMBYGZ87BqiZS/jIl2HC+FUrfSiB4TpSsdsPIBZa0EjCa22UTcQxa8TuKnpwVcrPoWjcBIRhhtrv7Vq3XxZ5JSr0rLQ96m0KX66oHK+mPVkbGd2DuKyCwOBixCkC/btBE8nMM2xR+jWo0UZwsM0qPbcdMOCIoClNrClVtXF6KxwJPpS0u7fVDc39Zm+nkaGuydTemaqOq5IRetx6OnFGtFdJFSTJGruhoIk8PxIcQX4MfP/6BoNoYdLXbwmILtqwPEyzk35qa5wTxvkGNe6HcGgieEcofot6EaiQcVGNv9VdDW3TTbiZyDQrV9exEmuwZLZfVPInoU3Ct8QUHOjKuTAJuG0es3qhEnad4NEU4bjGFAo7qJWG6Zv3UoORNCHaENF1hhbcS/kFJo/FzmyHGjWapz5IVm92lDGKbtEdrXx9iQ4zTg5MsxNU1g9fghIJEhi84aA8aNmgK/j598M96AXsM6AVgixubRJcdtJtcQK/mE+HXdyf1LCoY3y8iTKfnOJnjV7gZOIREjpyddOg9EdO/1hZxNA7ByLGqrz73NNXtDDoxa4ZXfTmPJqDySz6Lu+dN2yjLv9RzprUDGAJ8uJiTiLZIX8rmEmbogjG4A0NuA7oOwEySlhy7Hq9SZ10014zdNK+olp2vMWVaITx7AQOGErbD9BIoPr5taBoi2diS4XTl1bcLdh1sWATccVoKew/ahcIHbQEB1WpATDYfAbN3L6azjBXhXUVHYO5L4mQtwmd39oVR0HEfU/5Z/BBFA2pe0mLMfmQ1WMhu1uTG34MN1MfHSrdaq+u2/lORZMo78UT9JYEH5nkPt6sBr+FE3BZVmK36epImMLlOKnsvLDvMZixW0zE6sTBlYCvUM0lBrPd3HAvrvBmyapx5PP8o2WKsgG7swNx7SY6J7WEmOrWDEjmq1UmYzF5VkmgjVpmrK27FdROirdIemOIQZ5e4GvRIt+JyvYd+wULpstQsYW9xvY5JeCHISoi4JnuajlPQRIpWCLV9NRVSgNhGLs4fwiPN0kLBLcdbBcHLsMza4+vPcbxca5MrxvFBRYAWhTwbkmp7jQsnC8/4IIAwQjaDffEaNHb2DtHjAOfsDSssIW5/Lqt4zJqb0aSVAblVw30TiiXCOjWZIa9kYEmv+gZEOilL9d3XIJm6UWuNNXLlJtPRSPrdXSQ+zxNG/C/yNpcOkae5mjVeeCBPIzP43MKE/78afF6Soucv/jAbq2UGratX8uBJ9l8L9YN3GWSpMwVkpo0EAqm89pIkysDeHmqMD0MQurUUoU0ZU8QT2dk0bkDrFr/a0ih7wcK+wWdoJQyRCu91vgb4eCRg4AL7Wrxvv0Vr9UCUxKih+GOKc3aFGuhYbxsW8TQ1E5NatP/wexCW/gQPzkkKwN50fCckE1qbcRQ4AL2VP4NsXmUAmg0GWXqLa5Esuplku/vH8O2ttFZ2S6f23grTjOfGQU8RkDBrl/xNg3aSRPY3URN1SiAay/GSORte1WfuvqwiASAfu/AEHwXpv78F0vdrVi4JAK6aXkFfnrPnR0+Lt8x35q2nsfI+ZJmLrN0IugdvNqrC89h57avx6/Hk54i1H3R0Sl4tfXG3Gvseu09JPY3x5j6UScrTG+jYvEFVfprNxscZgzEecgvBfk8CwLmLmpeMvPgka2d/bMg0LEm+fruorb65sBhuLd5YQKNBa2u2+kM2hJbgFegziOk3Sx6TwB6sLQ6HYQ5ij4STUIi0AXmdBiw2unyr935qnoCbzFRPAHmIKbpzbugNLFMN3pk7BCsg8iCxW0om/tepLhXPAATtNW65EnG7olP4yHigagD2y+4OYs4yzPgrrhv/X/s7JBo7UegYMa2SPZsP6WxLBcJSEBBb6sU5uz4An5hpJmdE2woqcH7vA5wB2XjzOSqa/nOTXNuJvkTIqaqyRLpTQUS6qeK4cnHEbr53uMTXXVAO4DYfMudfuQ2MjW2WJqRHGxnA+Ue3ZvbQohnq2JUiZQs4sbzjktgZy/3W96SlSfg475CsNoLKAOXylNPTa4SarWQqvjv8QxaNWu8TyKfKvIHyuPC416VMkLAqDvlnz62D63OMw8rkBDBRHqsmS01XkAIYpXHTTAV+KQd1CV9fMso+TrnUCbOcjaEV7CE7evzHFNQ298WD+XxNtVd5rLZMWIwADZzP78SMXbEn71yx9eX0uUp7zYRBJNr6rMfwAYKEMeW9uPI+gD96bYXM7kokbIRFfXuOeQCIkIHK5qSh8jRgtCREJlp1MgyUrJSOCVKtC5fRFRgjfsdJSEjmxFOWsav/UKixD2tR6DBo1SrAkSh5fdHwrRIfSyNfo800ci33tAjHAjHl7hrMIFMAxupfInzzuylH6oy5huhFDBdjvN7PavHf/WsCOOXvjdCV+AOuC457MOmjDb+z74FqQVLN09xCwzTXfXJQV6X+CTl5SGrSYXIRmWbtc5WNP3jDJeDE78hVTteB0Xml9Jz9RCavKIVB+tJNG11PHREnZ/QbPzjFfaSKFcu9/EWD2MtryJH6hEuzqRIJrR/syGfx3SIfoPwjCd/leoOtl6KvlU8a9EbeEFeOkryn8b392zm4rNgt/VYmbKGIa2oixuEWcndsxydwM1RjcbQVuPRt7Q1JnidAlZdkRcQdb7vah8n3zyenbydOOTozmjvTYPKyCqpDOGiNCzhP+9p29BtRoh+7kEJd9L5xrgRm30p9e9+d2KKXgx7uDFHZTMh2nD1LfxMrgEYmPlY679zK/q5WCnaT1bo1Wvf7T/Y9boTG/W+qaQieb4XVrS0XBpKzt9a5GEjWHjCUf/iJNkaG4hn1wbvoFVUD8X6bH6SS8KfggxMfLdYxAQz65RuyUGySPZP+Op3N4p73YCL2kInazKYZwQmywwuv3qZCd/gn0DAjvOAOomlj2Wu2MlWZ/6MIHCjbVH1SfkM+NkbhiT7KLY8rKMtxUMgT0pjyjtCfVxktu6Q3W+8cwazyjwf7U7NTV9vx5eZSuwXNy/I7esRoesyK5GtPD+m6aQrllu4/ozGOlc03P/45x5aI5tNrxmQcngtQiPMwuawp8Xk12bgMCxjyGJGVkKNBVkZ4bwj9CAFG2AD7AmRGIl6pO/D58wid9NK5oFF/mxe/oPUtIw4w2mrtYj7taim2vAqpYpu7oSsXeEkAMEtFkS6/YHtJ3o0e8hq7J8OWIUvezRJz0W1Z8xw==</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="writing" scheme="http://yoursite.com/categories/writing/"/>
    
    
  </entry>
  
  <entry>
    <title>红海新区的冬和夏</title>
    <link href="http://yoursite.com/2019/07/03/%E7%BA%A2%E6%B5%B7%E6%96%B0%E5%8C%BA%E7%9A%84%E5%86%AC%E5%92%8C%E5%A4%8F/"/>
    <id>http://yoursite.com/2019/07/03/红海新区的冬和夏/</id>
    <published>2019-07-03T11:57:14.000Z</published>
    <updated>2019-07-03T12:19:54.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="writing" scheme="http://yoursite.com/categories/writing/"/>
    
    
  </entry>
  
</feed>
